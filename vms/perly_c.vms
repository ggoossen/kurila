/* Postprocessed by vms_yfix.pl 1.11 to add VMS declarations of globals */
#ifndef lint
static char yysccsid[] = "@(#)yaccpar 1.8 (Berkeley) 01/20/91";
#endif
#define YYBYACC 1
#line 16 "perly.y"
#include "EXTERN.h"
#define PERL_IN_PERLY_C
#include "perl.h"

#define yydebug	    PL_yydebug
#define yynerrs	    PL_yynerrs
#define yyerrflag   PL_yyerrflag
#define yychar	    PL_yychar
#define yyval	    PL_yyval
#define yylval	    PL_yylval

#define dep() deprecate("\"do\" to call subroutines")

static void yydestruct(pTHXo_ void *ptr);

#line 27 "perly.y"
#define YYERRCODE 256
static short yylhs[] = {                                 -1,
   46,    0,    9,    7,   10,    8,   11,   11,   11,   12,
   12,   12,   12,   25,   25,   25,   25,   25,   25,   25,
   15,   15,   15,   14,   14,   43,   43,   13,   13,   13,
   13,   13,   13,   13,   27,   27,   28,   28,   29,   30,
   31,   32,   33,   45,   45,    1,    1,    1,    1,    3,
   39,   39,   47,    4,    5,    6,   40,   41,   41,   42,
   42,   48,   48,   50,   49,   16,   16,   16,   26,   26,
   26,   37,   37,   37,   37,   37,   37,   37,   37,   51,
   37,   38,   38,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   34,   34,   35,   35,   35,    2,    2,   44,
   24,   19,   20,   21,   22,   23,   36,   36,   36,   36,
};
static short yylen[] = {                                  2,
    0,    2,    4,    0,    4,    0,    0,    2,    2,    2,
    1,    2,    3,    1,    1,    3,    3,    3,    3,    3,
    0,    2,    6,    7,    7,    0,    2,    8,    8,   10,
    9,    8,   11,    3,    0,    1,    0,    1,    1,    1,
    1,    1,    1,    0,    1,    1,    1,    1,    1,    4,
    1,    0,    5,    0,    0,    0,    1,    0,    1,    1,
    1,    3,    2,    0,    7,    3,    3,    1,    2,    3,
    1,    3,    5,    6,    3,    3,    5,    2,    4,    0,
    5,    1,    1,    5,    4,    5,    4,    5,    6,    5,
    4,    5,    4,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    5,    3,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,
    3,    2,    4,    3,    4,    1,    1,    1,    1,    1,
    1,    6,    5,    4,    5,    1,    1,    3,    4,    3,
    2,    2,    4,    5,    4,    5,    1,    2,    2,    1,
    2,    2,    2,    1,    3,    1,    3,    4,    4,    6,
    1,    1,    0,    1,    0,    1,    2,    1,    1,    1,
    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,
};
static short yydefred[] = {                               1,
    0,    7,    0,   45,   56,   54,    0,   54,    8,   46,
    9,   11,    0,   47,   48,   49,    0,    0,    0,   63,
   64,   14,    4,  161,    0,    0,  136,    0,  156,    0,
   55,   55,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  168,  169,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   12,    0,
    0,    0,    0,    0,    0,    0,    0,   10,    0,    0,
    0,    0,    0,  128,  130,    0,    0,    0,    0,  162,
   51,    0,   57,    0,   62,    0,    7,  177,  180,  179,
  178,    0,    0,    0,    0,    0,    0,    4,    4,    4,
    4,    4,    4,    0,    0,    0,    0,    0,  151,    0,
    0,    0,    0,   78,    0,  175,    0,  142,    0,    0,
    0,    0,    0,  171,    0,    0,    0,    0,    0,    0,
    0,    0,  122,    0,    0,    0,  172,  173,  174,  176,
    0,    0,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  114,  115,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   13,    0,   50,   59,
    0,    0,    0,   76,    0,    0,   80,    0,    0,    0,
    0,    0,    0,    0,    4,  155,  157,    0,    0,    0,
    0,    0,    0,    0,  124,    0,  140,    0,    0,  121,
   27,    0,    0,   19,    0,    0,    0,    0,   66,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   82,    0,    0,   83,    0,    0,
   94,    0,    0,    0,    0,    0,    0,    0,  138,    0,
    0,   61,   60,   53,    0,    3,    0,    0,  159,    0,
  125,    0,   42,    0,   43,    0,    0,    0,    0,  170,
    0,    0,   36,   41,    0,    0,    0,  158,  167,   79,
    0,  143,    0,  145,    0,  123,    0,    0,    0,    0,
   91,    0,    0,    0,    0,   93,   87,    0,   85,    0,
  134,    0,  139,    0,   77,    0,   81,    0,    0,    0,
    0,    0,    0,    0,    0,   73,  144,  146,  133,    0,
    0,    0,   92,   86,    0,   90,   88,  135,   84,   65,
  160,    6,    0,    0,    0,    0,    0,    0,    0,    0,
  132,   89,   74,    7,   28,   29,    0,    0,   24,   25,
    0,   32,    0,    0,    0,   22,    0,    0,    0,   31,
    5,    0,   30,    0,    0,   33,    0,   23,
};
static short yydgoto[] = {                                1,
    9,   66,   10,   18,   96,   17,   87,  344,   90,  333,
    3,   11,   12,   68,  349,  267,   70,   71,   72,   73,
   74,   75,   76,   77,  273,   79,  274,  263,  265,  268,
  276,  264,  266,  114,  200,   92,   80,  239,   82,   84,
  181,  254,  143,  271,   13,    2,   14,   15,   16,   86,
  260,
};
static short yysindex[] = {                               0,
    0,    0,  142,    0,    0,    0,  -57,    0,    0,    0,
    0,    0,  622,    0,    0,    0, -239, -229,  -10,    0,
    0,    0,    0,    0,  -24,  -24,    0,   -5,    0, 2126,
    0,    0,    6,   28,   44,   57,  -32, 2126,   68,   69,
   72,  999,  943,  -24, 1062, 1327, -198,    0,    0,  -24,
 2126, 2126, 2126, 2126, 2126, 2126, 1233, 1383,    0, 2126,
 2126,  -24,  -24,  -24,  -24, 2126, -217,    0,  342,  827,
  -20,  -80,  -70,    0,    0,  -60,   73,   61,   75,    0,
    0,   -1,    0, -137,    0, -130,    0,    0,    0,    0,
    0, 2126,   88, 2126, -189,   -1, -137,    0,    0,    0,
    0,    0,    0,   89,  827,   99, 1444,  943,    0, -189,
    0,  -80,   75,    0, 2126,    0,   90,    0, -189,  -16,
   27,  -58, 2126,    0,   75,  218,  218,  218, -169, -169,
   63,  -22,    0,  -63,  218,  218,    0,    0,    0,    0,
 -189,   -1,    0, 2126, 2126, 2126, 2126, 2126, 2126, 2126,
 2126, 2126, 2126, 2126, 2126, 2126, 2126, 2126, 2126, 2126,
 2126, 2126, 2126, 2126,    0,    0,   74, 2126, 1535, 2126,
 2126, 2126, 2126, 2126, 2126, 1725,    0, 2126,    0,    0,
  -44,  -91,  256,    0, 2126,  428,    0,   -1, 2126, 2126,
 2126, 2126,  131, 1800,    0,    0,    0,  -12,   36,  130,
 2126,   75, 1861, 1936,    0,   48,    0, 2126,   87,    0,
    0, -272, -272,    0, -272, -272, -272, -119,    0, 1565,
 -189, 1088,  375,  160,  827,  715,  389,  771,  684, 1026,
 1242,  218,  218, 2126,    0, 2006, 2126,    0,  143,  -56,
    0,    1,   51,  -49,   56,   43,   58,   45,    0,    7,
  827,    0,    0,    0, 2126,    0,  141, 2126,    0, 2126,
    0, -272,    0,  144,    0,  145, -272,  151,  158,    0,
  162,  342,    0,    0,  166,  150, 2126,    0,    0,    0,
    9,    0,   16,    0,   19,    0,   60, 2126, 2126,   47,
    0,   21,   94, 2126,   78,    0,    0,   91,    0,   95,
    0,  101,    0,  153,    0,  268,    0,   92,   92,   92,
   92, 2126,   92, 2126,  188,    0,    0,    0,    0,   96,
 1152,  109,    0,    0,  196,    0,    0,    0,    0,    0,
    0,    0, -217, -217, -204, -204,  198, -217,  185,   92,
    0,    0,    0,    0,    0,    0,   92,  211,    0,    0,
   92,    0, 1800, -217,  319,    0, 2126, -217,  216,    0,
    0,  228,    0,   92,   92,    0, -204,    0,
};
static short yyrindex[] = {                               0,
    0,    0,  225,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  155,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   23, 2214,    0,
    0, 2264, 2308,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  105,    0,  -18, 1030,
 2383, 2433, 2561,    0,    0, 2636, 2686,    0,  918,    0,
    0,    0,    0,  -25,    0,    0,    0,    0,    0,    0,
    0, 2308,    0,    0, 3879,    0,  165,    0,    0,    0,
    0,    0,    0,    0, 1356,    0,    0,  232,    0, 3936,
  502,  561, 3047,    0,    0,    0, 2730,    0, 3987, 2433,
    0,    0, 2308,    0, 3096, 3236, 3300, 3436, 1656, 3186,
 2780,    0,    0,    0, 3487, 3550,    0,    0,    0,    0,
 4025,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2828,    0,    0,
    0,    0,  887,    0,  232,    0,    0,    0,  242,    0,
    0,    0,    0,  226,    0,    0,    0,    0,  249,    0,
    0, 3142,    0,    0,    0,    0,    0,    0, 2889,    0,
    0,   -4,   10,    0,   11,   17,   24,  363,    0,  -27,
  664, 3890, 3686, 3737, 1507,    0, 4291, 4188, 4155, 4035,
 3842, 3586, 3623,    0,    0,    0,    0,    0, 2983,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1640,    0,    0,    0,  233,    0,    0,    0,    0, 2308,
    0,   37,    0,    0,    0,    0,  262,    0,    0,    0,
    0,   52,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  232,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  264,    0,    0,    0,    0,    0,    0,
  -19,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  105,  105,  168,  168,    0,  105,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  298,  105,  887,    0,    0,  105,    0,    0,
    0,    0,    0,    0,    0,    0,  168,    0,
};
static short yygindex[] = {                               0,
    0,    0,    0,  339,  320,    0,  -11,    0,  913,  360,
  -78,    0,    0,    0, -320,  -13, 4321,    0, 1367,    0,
    0,    0,    0,    0,  340,  -38,    0,    0,  215, -138,
   14,   97,  190,  -85, -179,  583,    0,    0,    0,    0,
  286,    0, -140,    0,    0,    0,    0,    0,    0,    0,
    0,
};
#define YYTABLESIZE 4610
static short yytable[] = {                               69,
  206,   20,  295,   62,  113,  257,  184,  103,  183,  298,
  172,   62,  125,  104,  252,  350,  104,   81,  209,  169,
  174,  107,   15,  204,  107,  149,  150,   83,  278,  210,
  104,  104,  122,   58,   94,  104,   18,  207,  107,  107,
   15,  296,  171,  132,  134,   98,  368,  303,   85,  316,
   39,   16,  173,  113,   18,  275,  317,   17,  123,  318,
  142,  323,  175,  147,   20,  104,  147,   99,   39,   16,
  170,  347,  348,  107,  172,   17,  202,   38,   23,  279,
  147,  147,   20,  100,  113,  147,  189,  190,  191,  192,
  193,  194,   40,  198,  199,   38,  101,   58,   23,  154,
  155,  300,  168,  302,   26,  322,  171,  106,  107,   62,
   15,  108,  176,  236,  325,  147,  162,  163,  178,  177,
  164,   23,  180,  165,  166,  167,  182,  185,  195,  203,
  212,  213,  215,  216,  217,  218,  219,   26,  315,  196,
   26,   26,   26,  297,   26,  167,   26,   26,  299,   26,
  301,  205,  319,  208,  240,  242,  243,  244,  245,  246,
  247,  248,  250,   26,  237,  255,   62,   21,   26,  304,
  280,  199,  286,  337,  307,  262,  213,  288,  213,  150,
  272,  305,  294,  277,  308,  309,  324,  281,  341,  283,
  285,  310,  345,  346,  287,   26,  234,  352,  311,   19,
   21,  312,  326,   21,   21,   21,  313,   21,  314,   21,
   21,  330,   21,  360,  332,  327,  113,  363,  362,  328,
  290,  113,  292,  293,    2,  329,   21,   26,  340,   26,
   26,   21,   88,  342,  149,  150,  343,   89,  351,  149,
  150,  149,  150,  353,  104,  104,  104,  104,  149,  150,
  357,  104,  107,  107,  107,  107,  364,   44,   21,  107,
   44,   44,   44,  102,   44,  355,   44,   44,  365,   44,
  104,  104,  165,  104,  320,  149,  150,   52,  107,  107,
  199,  107,   37,   44,   35,  149,  150,   58,   44,  166,
   21,  163,   21,   21,  147,  147,  147,  147,  149,  150,
  262,  147,   40,  147,  149,  150,  149,  150,  331,  147,
  147,  147,  147,  149,  150,   44,  149,  150,  149,  150,
  147,  147,   37,  147,  147,  147,  147,  147,  147,  147,
  157,  235,  147,  149,  150,  147,  147,  147,   35,   69,
  149,  150,  149,  150,  149,  150,   21,   44,  149,  150,
   44,   97,   78,  149,  150,  149,  150,  149,  150,  214,
   26,   26,   26,   26,   26,   26,  359,   26,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
  256,  269,  188,   26,   26,    0,   26,   26,   26,   26,
   26,  149,  150,  149,  150,   26,   26,   26,   26,   26,
   26,    0,    0,   67,   26,    0,   67,    4,    5,    6,
  339,    7,    8,   26,    0,   26,   26,    0,    0,    0,
    0,   67,    0,   21,   21,   21,   21,   21,   21,    0,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,  361,    0,    0,   21,   21,  154,   21,
   21,   21,   21,   21,    0,   67,    0,    0,   21,   21,
   21,   21,   21,   21,    0,    0,  163,   21,  259,  164,
    0,  258,  165,  166,  167,    0,   21,    0,   21,   21,
   44,   44,   44,   44,   44,   44,    0,   44,   44,   44,
  157,    0,    0,   44,    0,    0,   44,   44,   44,   44,
    0,    0,    0,   44,   44,    0,   44,   44,   44,   44,
   44,    0,    0,    0,    0,   44,   44,   44,   44,   44,
   44,    4,    5,    6,   44,    7,    8,  164,    0,    0,
  165,  166,  167,   44,  177,   44,   44,  177,  177,  177,
    0,  177,  161,  177,  177,  161,  177,    0,  151,    0,
    0,    0,    0,    0,  152,  153,  154,  155,    0,  161,
  161,    0,    0,    0,  161,  177,    0,    0,  156,  158,
  159,  160,  161,  162,  163,    0,    0,  164,    0,    0,
  165,  166,  167,    0,    4,    5,    6,    0,    7,    8,
    0,    0,  177,  178,  161,    0,  178,  178,  178,    0,
  178,  126,  178,  178,  126,  178,    0,    0,   93,    0,
    0,    0,    0,  144,  145,  146,  147,    0,  126,  126,
  148,    0,    0,  126,  178,  115,  116,  177,    0,    0,
    0,    0,  124,    0,   67,   67,   67,   67,    0,  149,
  150,   67,    0,    0,  137,  138,  139,  140,    0,    0,
    0,    0,    0,  126,   52,    0,    0,   62,   64,   50,
   67,   57,    0,   65,   61,    0,   60,    0,  334,  335,
  336,    0,  338,    0,    0,  152,  153,  154,  155,    0,
   59,  163,    0,    0,  164,   63,  178,  165,  166,  167,
  201,  159,  160,  161,  162,  163,    0,    0,  164,  354,
    0,  165,  166,  167,  100,    0,  356,  100,  151,    0,
  358,    0,   58,    0,  152,  153,  154,  155,    0,    0,
    0,  100,  100,  366,  367,    0,  100,    0,  156,  158,
  159,  160,  161,  162,  163,    0,    0,  164,    0,    0,
  165,  166,  167,    0,   23,    0,    0,   53,    0,    0,
    0,    0,    0,    0,    0,    0,  100,    0,  177,  177,
  177,  177,  177,    0,  177,  177,  177,    0,    0,    0,
  177,    0,  289,  161,  161,  161,  161,  157,    0,    0,
  161,  177,  161,  177,  177,  177,  177,  177,  161,  161,
  161,  161,  177,  177,  177,  177,  177,  177,    0,  161,
  161,  177,  161,  161,  161,  161,  161,  161,  161,    0,
  177,  161,  177,  177,  161,  161,  161,  178,  178,  178,
  178,  178,    0,  178,  178,  178,    0,    0,    0,  178,
    0,    0,  126,  126,  126,  126,    0,    0,    0,  126,
  178,  126,  178,  178,  178,  178,  178,  126,  126,  126,
  126,  178,  178,  178,  178,  178,  178,    0,  126,  126,
  178,  126,  126,  126,  126,  126,  126,  126,    0,  178,
  126,  178,  178,  126,  126,  126,    0,   22,   24,   25,
   26,   27,   28,    0,   29,   30,   31,    0,    0,  157,
   32,    0,    0,   33,   34,   35,   36,    0,    0,    0,
   37,   38,    0,   39,   40,   41,   42,   43,    0,    0,
    0,    0,   44,   45,   46,   47,   48,   49,    0,   44,
    0,   51,   44,   44,   44,   67,   44,    0,   44,   44,
   54,   44,   55,   56,    0,  100,  100,  100,  100,    0,
    0,    0,  100,    0,  100,   44,    0,    0,    0,    0,
   44,  100,    0,    0,  109,    0,    0,  118,   68,    0,
    0,  100,  100,    0,  100,  100,  100,  100,  100,    0,
  152,  153,  154,  155,    0,   52,   68,   44,   62,   64,
   50,    0,   57,    0,   65,   61,    0,   60,  161,  162,
  163,    0,    0,  164,  179,  151,  165,  166,  167,    0,
    0,  152,  153,  154,  155,    0,   63,    0,  187,   44,
   68,    0,   44,    0,    0,  156,  158,  159,  160,  161,
  162,  163,    0,    0,  164,    0,    0,  165,  166,  167,
    0,   52,    0,   58,   62,   64,   50,    0,   57,    0,
   65,   61,    0,   60,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  211,    0,    0,  152,  153,  154,
  155,    0,   63,    0,    0,   23,    0,    0,   53,    0,
   71,    0,    0,   71,  160,  161,  162,  163,    0,    0,
  164,    0,    0,  165,  166,  167,    0,   71,   71,   58,
    0,    0,    0,  253,   52,    0,    0,   62,   64,   50,
  261,   57,    0,   65,   61,    0,   60,  151,    0,    0,
    0,    0,    0,  152,  153,  154,  155,    0,    0,    0,
    0,   23,   71,    0,   53,   63,    0,  156,  158,  159,
  160,  161,  162,  163,    0,    0,  164,    0,    0,  165,
  166,  167,   44,   44,   44,   44,   44,   44,    0,   44,
   44,   44,   58,    0,    0,   44,    0,    0,   44,   44,
   44,   44,    0,    0,    0,   44,   44,    0,   44,   44,
   44,   44,   44,    0,    0,    0,    0,   44,   44,   44,
   44,   44,   44,    0,   23,    0,   44,   53,    0,   68,
   68,   68,   68,    0,    0,   44,   68,   44,   44,  111,
   25,   26,   27,   28,   89,   29,   30,   31,    0,    0,
    0,   32,    0,    0,  157,   68,   68,    0,    0,    0,
    0,    0,   38,    0,   39,   40,   41,   42,   43,    0,
    0,    0,    0,   44,   45,   46,   47,   48,   49,    0,
    0,    0,   51,    0,    0,    0,    0,    0,    0,    0,
    0,   54,    0,   55,   56,   24,   25,   26,   27,   28,
    0,   29,   30,   31,    0,   52,    0,   32,   62,   64,
   50,    0,   57,  131,   65,   61,    0,   60,   38,    0,
   39,   40,   41,   42,   43,    0,    0,    0,    0,   44,
   45,   46,   47,   48,   49,    0,   63,    0,   51,    0,
    0,   71,   71,   71,   71,    0,    0,   54,   71,   55,
   56,    0,  152,  153,  154,  155,    0,    0,  117,   25,
   26,   27,   28,   58,   29,   30,   31,   71,   71,    0,
   32,  162,  163,    0,    0,  164,    0,    0,  165,  166,
  167,   38,    0,   39,   40,   41,   42,   43,    0,    0,
    0,    0,   44,   45,   46,   47,   48,   49,   53,   52,
    0,   51,   62,   64,   50,    0,   57,    0,   65,   61,
   54,   60,   55,   56,  152,    0,  154,  155,    0,    0,
    0,    0,    0,    0,    0,  121,    0,    0,    0,    0,
   63,   91,   91,  162,  163,    0,  148,  164,    0,  148,
  165,  166,  167,  104,    0,    0,    0,    0,    0,  112,
   91,  120,    0,  148,  148,   52,   91,   58,   62,   64,
   50,    0,   57,    0,   65,   61,    0,   60,   91,   91,
   91,   91,  151,    0,    0,    0,    0,    0,  152,  153,
  154,  155,    0,    0,    0,    0,   63,    0,  148,    0,
    0,    0,   53,  158,  159,  160,  161,  162,  163,    0,
    0,  164,    0,    0,  165,  166,  167,    0,    0,    0,
    0,    0,    0,   58,  112,  133,   52,    0,    0,   62,
   64,   50,    0,   57,  197,   65,   61,    0,   60,   24,
   25,   26,   27,   28,    0,   29,   30,   31,    0,    0,
    0,   32,    0,    0,    0,    0,    0,   63,   53,    0,
    0,    0,   38,    0,   39,   40,   41,   42,   43,    0,
    0,    0,    0,   44,   45,   46,   47,   48,   49,    0,
  154,  155,   51,  238,   58,    0,    0,    0,    0,    0,
    0,   54,    0,   55,   56,    0,    0,   95,  163,    0,
   95,  164,    0,    0,  165,  166,  167,    0,    0,  270,
    0,    0,    0,    0,   95,   95,    0,   52,    0,   53,
   62,   64,   50,    0,   57,  241,   65,   61,    0,   60,
    0,    0,    0,   24,   25,   26,   27,   28,    0,   29,
   30,   31,    0,    0,    0,   32,    0,    0,   63,   95,
    0,    0,    0,    0,    0,    0,   38,    0,   39,   40,
   41,   42,   43,    0,    0,    0,    0,   44,   45,   46,
   47,   48,   49,    0,    0,   58,   51,  148,  148,  148,
  148,    0,    0,    0,  148,   54,    0,   55,   56,   24,
   25,   26,   27,   28,    0,   29,   30,   31,    0,    0,
    0,   32,    0,  148,  148,    0,    0,    0,    0,    0,
   53,    0,   38,    0,   39,   40,   41,   42,   43,    0,
    0,    0,    0,   44,   45,   46,   47,   48,   49,    0,
   70,    0,   51,   70,    0,    0,    0,    0,    0,    0,
    0,   54,    0,   55,   56,    0,  116,   70,   70,  116,
   24,   25,   26,   27,   28,    0,   29,   30,   31,    0,
    0,    0,   32,  116,  116,    0,    0,    0,  116,    0,
    0,    0,    0,   38,    0,   39,   40,   41,   42,   43,
    0,    0,   70,    0,   44,   45,   46,   47,   48,   49,
    0,    0,    0,   51,    0,    0,    0,    0,  116,    0,
    0,    0,   54,    0,   55,   56,    0,   52,    0,    0,
   62,   64,   50,    0,   57,  249,   65,   61,    0,   60,
    0,    0,    0,    0,    0,    0,    0,    0,   95,   95,
   95,   95,    0,    0,    0,   95,    0,    0,   63,    0,
    0,   24,   25,   26,   27,   28,    0,   29,   30,   31,
    0,    0,    0,   32,   95,   95,    0,    0,    0,    0,
    0,    0,    0,    0,   38,   58,   39,   40,   41,   42,
   43,    0,    0,    0,    0,   44,   45,   46,   47,   48,
   49,    0,   52,    0,   51,   62,   64,   50,    0,   57,
    0,   65,   61,   54,   60,   55,   56,    0,    0,    0,
   53,  152,  153,  154,  155,    0,    0,    0,    0,    0,
    0,    0,    0,   63,    0,    0,  158,  159,  160,  161,
  162,  163,    0,    0,  164,    0,    0,  165,  166,  167,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   58,    0,    0,   52,    0,    0,   62,   64,   50,    0,
   57,  282,   65,   61,    0,   60,    0,    0,    0,    0,
    0,   70,   70,   70,   70,    0,    0,    0,   70,    0,
    0,    0,    0,    0,   63,   53,    0,  116,  116,  116,
  116,    0,    0,    0,  116,    0,  116,   70,   70,    0,
    0,    0,  116,  116,  116,  116,    0,    0,    0,    0,
    0,   58,    0,  116,  116,    0,  116,  116,  116,  116,
  116,  116,  116,    0,    0,  116,    0,    0,   52,    0,
    0,   62,   64,   50,    0,   57,  284,   65,   61,    0,
   60,   24,   25,   26,   27,   28,   53,   29,   30,   31,
    0,    0,    0,   32,    0,    0,    0,    0,    0,   63,
    0,    0,    0,    0,   38,    0,   39,   40,   41,   42,
   43,    0,    0,    0,    0,   44,   45,   46,   47,   48,
   49,    0,    0,    0,   51,    0,   58,    0,    0,    0,
    0,    0,    0,   54,    0,   55,   56,    0,   52,    0,
    0,   62,   64,   50,    0,   57,  291,   65,   61,    0,
   60,    0,    0,    0,    0,   22,   24,   25,   26,   27,
   28,   53,   29,   30,   31,    0,    0,    0,   32,   63,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   38,
    0,   39,   40,   41,   42,   43,    0,    0,    0,    0,
   44,   45,   46,   47,   48,   49,   58,    0,    0,   51,
    0,    0,    0,    0,    0,    0,    0,    0,   54,    0,
   55,   56,    0,    0,    0,    0,    0,   24,   25,   26,
   27,   28,    0,   29,   30,   31,    0,    0,    0,   32,
    0,   53,    0,    0,    0,    0,    0,    0,    0,    0,
   38,    0,   39,   40,   41,   42,   43,    0,    0,    0,
    0,   44,   45,   46,   47,   48,   49,    0,   52,    0,
   51,   62,   64,   50,    0,   57,    0,   65,   61,   54,
   60,   55,   56,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   63,
    0,    0,   24,   25,   26,   27,   28,    0,   29,   30,
   31,    0,    0,    0,   32,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   38,   58,   39,   40,   41,
   42,   43,    0,    0,    0,    0,   44,   45,   46,   47,
   48,   49,    0,    0,    0,   51,    0,    0,    0,    0,
    0,    0,    0,    0,   54,    0,   55,   56,    0,    0,
    0,   53,    0,    0,  154,    0,    0,  154,    0,    0,
    0,    0,   24,   25,   26,   27,   28,    0,   29,   30,
   31,  154,  154,    0,   32,    0,  154,    0,    0,    0,
    0,    0,    0,    0,    0,   38,    0,   39,   40,   41,
   42,   43,    0,    0,    0,    0,   44,   45,   46,   47,
   48,   49,    0,    0,  150,   51,  154,  150,    0,    0,
    0,    0,    0,    0,   54,    0,   55,   56,    0,    0,
    0,  150,  150,    0,    0,    0,  150,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  163,    0,
    0,  163,    0,    0,    0,    0,  150,    0,    0,    0,
    0,    0,    0,    0,    0,  163,  163,    0,    0,    0,
  163,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   24,   25,   26,   27,   28,    0,   29,   30,
   31,    0,    0,    0,   32,    0,    0,    0,    0,    0,
  163,    0,    0,    0,    0,   38,    0,   39,   40,   41,
   42,   43,    0,    0,    0,    0,   44,   45,   46,   47,
   48,   49,    0,  131,    0,   51,  131,    0,    0,    0,
    0,    0,    0,    0,   54,    0,   55,   56,    0,    0,
  131,  131,    0,    0,    0,  131,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  126,    0,  131,  126,    0,    0,    0,
    0,    0,    0,    0,    0,  154,  154,  154,  154,    0,
  126,  126,  154,    0,  154,  126,    0,    0,    0,    0,
  154,  154,  154,  154,    0,    0,    0,    0,    0,    0,
    0,  154,  154,    0,  154,  154,  154,  154,  154,  154,
  154,    0,    0,  154,    0,  126,  154,  154,  154,    0,
    0,    0,    0,    0,    0,  150,  150,  150,  150,    0,
    0,    0,  150,    0,  150,    0,    0,    0,    0,    0,
  150,  150,  150,  150,    0,    0,    0,    0,    0,    0,
    0,  150,  150,    0,  150,  150,  150,  150,  150,  150,
  150,    0,    0,  150,    0,    0,  150,  150,  150,  163,
  163,  163,  163,    0,    0,    0,  163,    0,  163,    0,
    0,    0,    0,    0,  163,  163,  163,  163,    0,    0,
    0,  129,    0,    0,  129,  163,  163,    0,  163,  163,
  163,  163,  163,  163,  163,    0,    0,  163,  129,  129,
  163,  163,  163,  129,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  129,  131,  131,  131,  131,    0,    0,
    0,  131,    0,  131,    0,    0,    0,    0,    0,  131,
  131,  131,  131,    0,    0,    0,  127,    0,    0,  127,
  131,  131,    0,  131,  131,  131,  131,  131,  131,  131,
    0,    0,  131,  127,  127,  131,  131,  131,  127,    0,
    0,    0,    0,    0,  126,  126,  126,  126,    0,    0,
    0,  126,    0,  126,    0,    0,    0,    0,    0,  126,
  126,  126,  126,    0,    0,    0,  137,    0,  127,  137,
  126,  126,    0,  126,  126,  126,  126,  126,  126,  126,
    0,    0,  126,  137,  137,  126,  126,  126,  137,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  161,    0,    0,  161,    0,    0,    0,    0,  137,    0,
    0,    0,    0,    0,    0,    0,    0,  161,  161,    0,
    0,    0,  161,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  120,    0,  161,  120,    0,    0,    0,    0,    0,    0,
    0,    0,  129,  129,  129,  129,    0,  120,  120,  129,
    0,  129,  120,    0,    0,    0,    0,  129,  129,  129,
  129,    0,    0,    0,    0,    0,    0,    0,  129,  129,
    0,  129,  129,  129,  129,  129,  129,  129,   69,    0,
  129,   69,  120,  129,  129,  129,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   69,   69,    0,    0,    0,
   69,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  127,  127,  127,
  127,    0,    0,    0,  127,    0,  127,    0,    0,    0,
   69,    0,  127,  127,  127,  127,    0,    0,    0,  119,
    0,    0,  119,  127,  127,    0,  127,  127,  127,  127,
  127,  127,  127,    0,    0,  127,  119,  119,  127,  127,
  127,  119,    0,    0,    0,    0,    0,  137,  137,  137,
  137,    0,    0,    0,  137,    0,  137,    0,    0,    0,
    0,    0,  137,  137,  137,  137,    0,    0,    0,    0,
    0,  119,    0,  137,  137,    0,  137,  137,  137,  137,
  137,  137,  137,    0,    0,  137,    0,    0,  137,  137,
  137,  161,  161,  161,  161,    0,    0,    0,  161,    0,
  161,    0,    0,    0,    0,    0,  161,  161,  161,  161,
    0,    0,    0,   75,    0,    0,   75,  161,  161,    0,
  161,  161,  161,  161,  161,  161,  161,    0,    0,  161,
   75,   75,  161,  161,  161,   75,    0,    0,    0,    0,
    0,  120,  120,  120,  120,    0,    0,    0,  120,    0,
  120,    0,    0,    0,    0,    0,  120,  120,  120,  120,
    0,    0,    0,    0,    0,   75,    0,  120,  120,    0,
  120,  120,  120,  120,  120,  120,  120,  164,    0,  120,
    0,    0,  120,  120,  120,    0,    0,    0,    0,   69,
   69,   69,   69,    0,  164,  164,   69,    0,   69,  164,
    0,    0,    0,    0,   69,   69,   69,   69,    0,    0,
    0,    0,    0,    0,    0,   69,   69,    0,   69,   69,
   69,   69,   69,   69,   69,    0,  149,   69,    0,  164,
   69,   69,   69,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  149,  149,    0,    0,    0,  149,    0,
  119,  119,  119,  119,    0,    0,    0,  119,    0,  119,
    0,    0,    0,    0,    0,  119,  119,  119,  119,    0,
    0,    0,   72,    0,    0,    0,  119,  119,  149,  119,
  119,  119,  119,  119,  119,  119,    0,    0,  119,   72,
   72,  119,  119,  119,   72,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  117,    0,    0,  117,
    0,    0,    0,    0,   72,    0,    0,    0,    0,    0,
    0,    0,    0,  117,  117,    0,    0,    0,  117,    0,
    0,    0,    0,    0,   75,   75,   75,   75,    0,    0,
    0,   75,    0,   75,    0,    0,    0,    0,    0,   75,
   75,   75,   75,    0,    0,    0,  111,    0,  117,  111,
   75,   75,    0,   75,   75,   75,   75,   75,   75,   75,
    0,    0,   75,  111,  111,   75,   75,   75,  111,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  164,  164,
  164,  164,    0,    0,    0,  164,    0,  164,  111,    0,
    0,    0,    0,  164,  164,  164,  164,    0,    0,    0,
  112,    0,    0,  112,  164,  164,    0,  164,  164,  164,
  164,  164,  164,  164,    0,    0,  164,  112,  112,  164,
  164,  164,  112,    0,    0,    0,    0,  149,  149,  149,
  149,    0,    0,    0,  149,    0,  149,    0,    0,    0,
    0,    0,  149,  149,  149,  149,    0,    0,    0,    0,
    0,    0,  112,  149,  149,    0,  149,  149,  149,  149,
  149,  149,  149,    0,    0,  149,    0,    0,  149,  149,
  149,    0,    0,   72,   72,   72,   72,    0,    0,    0,
   72,    0,   72,    0,    0,    0,    0,    0,   72,   72,
   72,   72,    0,    0,    0,    0,    0,    0,    0,   72,
   72,    0,   72,   72,   72,   72,   72,   72,   72,    0,
    0,   72,    0,    0,   72,   72,   72,  117,  117,  117,
  117,    0,    0,    0,  117,    0,  117,    0,    0,    0,
    0,    0,  117,  117,  117,  117,  113,    0,    0,  113,
    0,    0,    0,  117,  117,    0,  117,  117,  117,  117,
  117,  117,  117,  113,  113,  117,    0,    0,  113,    0,
    0,    0,    0,    0,    0,    0,    0,  111,  111,  111,
  111,    0,    0,    0,  111,    0,  111,    0,    0,    0,
    0,    0,  111,  111,  111,  111,    0,  109,  113,    0,
  109,    0,    0,  111,  111,    0,  111,  111,  111,  111,
  111,  111,  111,    0,  109,  109,    0,    0,    0,  109,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  112,  112,  112,  112,    0,    0,    0,  112,  109,
  112,    0,    0,    0,    0,    0,  112,  112,  112,  112,
  110,    0,    0,  110,    0,    0,    0,  112,  112,    0,
  112,  112,  112,  112,  112,  112,  112,  110,  110,    0,
    0,    0,  110,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  108,    0,    0,  108,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  110,  108,  108,    0,    0,    0,  108,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   96,    0,    0,   96,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  108,    0,
   96,   96,    0,    0,    0,   96,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  113,  113,  113,
  113,    0,    0,    0,  113,   96,  113,    0,    0,    0,
    0,    0,  113,  113,  113,  113,   97,    0,    0,   97,
    0,    0,    0,  113,  113,    0,  113,  113,  113,  113,
  113,  113,  113,   97,   97,    0,    0,    0,   97,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  109,  109,
  109,  109,    0,    0,    0,  109,    0,  109,    0,    0,
    0,    0,    0,  109,  109,  109,  109,   98,   97,    0,
   98,    0,    0,    0,  109,  109,    0,  109,  109,  109,
  109,  109,  109,  109,   98,   98,    0,    0,    0,   98,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  110,  110,  110,  110,    0,    0,    0,  110,   98,
  110,    0,    0,    0,    0,    0,  110,  110,  110,  110,
    0,    0,    0,    0,    0,    0,    0,  110,  110,    0,
  110,  110,  110,  110,  110,  110,  110,  108,  108,  108,
  108,    0,    0,    0,  108,    0,  108,    0,    0,    0,
    0,    0,  108,  108,  108,  108,    0,    0,    0,    0,
    0,    0,   99,  108,  108,   99,  108,  108,  108,  108,
  108,  108,  108,    0,   96,   96,   96,   96,    0,   99,
   99,   96,    0,   96,   99,    0,    0,    0,    0,   96,
   96,   96,   96,    0,    0,    0,    0,    0,    0,  153,
   96,   96,  153,   96,   96,   96,   96,   96,   96,   96,
  101,    0,    0,  101,   99,    0,  153,  153,    0,    0,
    0,  153,    0,    0,    0,    0,    0,  101,  101,    0,
    0,    0,  101,    0,    0,    0,    0,   97,   97,   97,
   97,    0,    0,    0,   97,    0,   97,    0,    0,    0,
    0,  153,   97,   97,   97,   97,  152,    0,    0,  152,
    0,    0,  101,   97,   97,    0,   97,   97,   97,   97,
   97,   97,    0,  152,  152,    0,    0,    0,  152,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   98,   98,
   98,   98,    0,    0,    0,   98,    0,   98,    0,    0,
    0,    0,    0,   98,   98,    0,   98,  141,  152,    0,
  141,    0,    0,    0,   98,   98,    0,   98,   98,   98,
   98,   98,   98,    0,  141,  141,    0,    0,    0,  141,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  118,    0,    0,  118,    0,
    0,    0,    0,    0,    0,  102,    0,    0,  102,  141,
    0,    0,  118,  118,    0,    0,    0,  118,    0,    0,
    0,    0,  102,  102,    0,    0,    0,  102,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   99,   99,   99,   99,  118,    0,    0,
   99,    0,   99,    0,    0,    0,    0,  102,   99,   99,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   99,
   99,    0,   99,   99,   99,   99,   99,   99,    0,    0,
  153,  153,  153,  153,    0,    0,    0,  153,    0,  153,
    0,  101,  101,  101,  101,  153,  153,    0,  101,    0,
  101,    0,    0,    0,    0,    0,  153,  153,    0,  153,
  153,  153,  153,  153,    0,    0,    0,  101,  101,    0,
  101,  101,  101,  101,  101,  103,    0,    0,  103,    0,
    0,    0,    0,    0,    0,    0,    0,  152,  152,  152,
  152,    0,  103,  103,  152,    0,  152,  103,    0,    0,
    0,    0,  152,  152,    0,    0,    0,    0,  105,    0,
    0,  105,    0,  152,  152,    0,  152,  152,  152,  152,
  152,    0,    0,    0,    0,  105,  105,  103,    0,    0,
  105,    0,    0,    0,    0,    0,    0,    0,  141,  141,
  141,  141,    0,    0,    0,  141,    0,  141,    0,    0,
    0,    0,    0,  141,  141,    0,    0,    0,    0,    0,
  105,    0,    0,    0,  141,  141,    0,  141,  141,  141,
  141,  141,    0,    0,    0,    0,  118,  118,  118,  118,
    0,    0,    0,  118,    0,  118,  102,  102,  102,  102,
    0,  118,  118,  102,    0,  102,    0,    0,    0,    0,
    0,    0,  118,  118,    0,  118,  118,  118,  118,  118,
    0,  106,  102,  102,  106,  102,  102,  102,  102,  102,
    0,    0,    0,    0,    0,    0,    0,    0,  106,  106,
   95,    0,    0,  106,    0,    0,    0,    0,  105,    0,
    0,    0,  110,    0,    0,  119,    0,    0,    0,    0,
    0,    0,  126,  127,  128,  129,  130,    0,    0,    0,
  135,  136,    0,  106,    0,    0,  141,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  186,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  103,  103,  103,  103,
    0,    0,    0,  103,    0,  103,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  103,  103,    0,  103,  103,  103,  103,  105,
  105,  105,  105,    0,    0,    0,  105,    0,  105,    0,
    0,  220,  221,  222,  223,  224,  225,  226,  227,  228,
  229,  230,  231,  232,  233,  105,  105,    0,  105,  105,
  105,    0,    0,    0,    0,    0,    0,    0,  251,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  106,  106,  106,  106,    0,    0,    0,  106,
    0,  106,    0,    0,    0,    0,    0,    0,  306,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  106,  106,
    0,  106,  106,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  321,
};
static short yycheck[] = {                               13,
   59,   59,   59,   36,   43,  185,   92,   40,   87,   59,
   91,   36,   51,   41,   59,  336,   44,  257,   41,   40,
   91,   41,   41,   40,   44,  298,  299,  257,   41,   93,
   58,   59,   46,   59,   40,   63,   41,  123,   58,   59,
   59,   41,  123,   57,   58,   40,  367,   41,   59,   41,
   41,   41,  123,   92,   59,  194,   41,   41,  257,   41,
  278,   41,  123,   41,   41,   93,   44,   40,   59,   59,
   91,  276,  277,   93,   91,   59,  115,   41,  123,   44,
   58,   59,   59,   40,  123,   63,   98,   99,  100,  101,
  102,  103,   41,  107,  108,   59,   40,  123,  123,  289,
  290,   59,  123,   59,    0,   59,  123,   40,   40,   36,
   59,   40,   40,   40,  294,   93,  306,  307,   44,   59,
  310,  123,  260,  313,  314,  315,  257,   40,   40,   40,
  144,  145,  146,  147,  148,  149,  150,   33,  277,   41,
   36,   37,   38,   93,   40,  315,   42,   43,   93,   45,
   93,  125,   93,   91,  168,  169,  170,  171,  172,  173,
  174,  175,  176,   59,   91,  257,   36,    0,   64,  255,
   41,  185,  125,  312,  260,  189,  190,   91,  192,  299,
  194,   41,   40,  195,   41,   41,   93,  201,   93,  203,
  204,   41,  333,  334,  208,   91,  123,  338,   41,  257,
   33,   40,  125,   36,   37,   38,   41,   40,   59,   42,
   43,   59,   45,  354,  123,  125,  255,  358,  357,  125,
  234,  260,  236,  237,    0,  125,   59,  123,   41,  125,
  126,   64,  257,  125,  298,  299,   41,  262,   41,  298,
  299,  298,  299,   59,  272,  273,  274,  275,  298,  299,
   40,  279,  272,  273,  274,  275,   41,   33,   91,  279,
   36,   37,   38,  296,   40,  344,   42,   43,   41,   45,
  298,  299,   41,  301,  288,  298,  299,  123,  298,  299,
  294,  301,   41,   59,   59,  298,  299,  123,   64,   41,
  123,   59,  125,  126,  272,  273,  274,  275,  298,  299,
  314,  279,   41,  281,  298,  299,  298,  299,   41,  287,
  288,  289,  290,  298,  299,   91,  298,  299,  298,  299,
  298,  299,   59,  301,  302,  303,  304,  305,  306,  307,
   63,  258,  310,  298,  299,  313,  314,  315,   41,  353,
  298,  299,  298,  299,  298,  299,    8,  123,  298,  299,
  126,   32,   13,  298,  299,  298,  299,  298,  299,  145,
  256,  257,  258,  259,  260,  261,  353,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  125,  192,   97,  279,  280,   -1,  282,  283,  284,  285,
  286,  298,  299,  298,  299,  291,  292,  293,  294,  295,
  296,   -1,   -1,   41,  300,   -1,   44,  266,  267,  268,
  314,  270,  271,  309,   -1,  311,  312,   -1,   -1,   -1,
   -1,   59,   -1,  256,  257,  258,  259,  260,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,  274,  275,  125,   -1,   -1,  279,  280,  289,  282,
  283,  284,  285,  286,   -1,   93,   -1,   -1,  291,  292,
  293,  294,  295,  296,   -1,   -1,  307,  300,   41,  310,
   -1,   44,  313,  314,  315,   -1,  309,   -1,  311,  312,
  256,  257,  258,  259,  260,  261,   -1,  263,  264,  265,
   63,   -1,   -1,  269,   -1,   -1,  272,  273,  274,  275,
   -1,   -1,   -1,  279,  280,   -1,  282,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  266,  267,  268,  300,  270,  271,  310,   -1,   -1,
  313,  314,  315,  309,   33,  311,  312,   36,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   -1,  281,   -1,
   -1,   -1,   -1,   -1,  287,  288,  289,  290,   -1,   58,
   59,   -1,   -1,   -1,   63,   64,   -1,   -1,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,   -1,   -1,
  313,  314,  315,   -1,  266,  267,  268,   -1,  270,  271,
   -1,   -1,   91,   33,   93,   -1,   36,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   -1,   -1,   26,   -1,
   -1,   -1,   -1,  272,  273,  274,  275,   -1,   58,   59,
  279,   -1,   -1,   63,   64,   43,   44,  126,   -1,   -1,
   -1,   -1,   50,   -1,  272,  273,  274,  275,   -1,  298,
  299,  279,   -1,   -1,   62,   63,   64,   65,   -1,   -1,
   -1,   -1,   -1,   93,   33,   -1,   -1,   36,   37,   38,
  298,   40,   -1,   42,   43,   -1,   45,   -1,  309,  310,
  311,   -1,  313,   -1,   -1,  287,  288,  289,  290,   -1,
   59,  307,   -1,   -1,  310,   64,  126,  313,  314,  315,
  108,  303,  304,  305,  306,  307,   -1,   -1,  310,  340,
   -1,  313,  314,  315,   41,   -1,  347,   44,  281,   -1,
  351,   -1,   91,   -1,  287,  288,  289,  290,   -1,   -1,
   -1,   58,   59,  364,  365,   -1,   63,   -1,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,   -1,   -1,
  313,  314,  315,   -1,  123,   -1,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,  257,  258,
  259,  260,  261,   -1,  263,  264,  265,   -1,   -1,   -1,
  269,   -1,   58,  272,  273,  274,  275,   63,   -1,   -1,
  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,   -1,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
  309,  310,  311,  312,  313,  314,  315,  257,  258,  259,
  260,  261,   -1,  263,  264,  265,   -1,   -1,   -1,  269,
   -1,   -1,  272,  273,  274,  275,   -1,   -1,   -1,  279,
  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,   -1,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,  309,
  310,  311,  312,  313,  314,  315,   -1,  256,  257,  258,
  259,  260,  261,   -1,  263,  264,  265,   -1,   -1,   63,
  269,   -1,   -1,  272,  273,  274,  275,   -1,   -1,   -1,
  279,  280,   -1,  282,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,   -1,   33,
   -1,  300,   36,   37,   38,   13,   40,   -1,   42,   43,
  309,   45,  311,  312,   -1,  272,  273,  274,  275,   -1,
   -1,   -1,  279,   -1,  281,   59,   -1,   -1,   -1,   -1,
   64,  288,   -1,   -1,   42,   -1,   -1,   45,   41,   -1,
   -1,  298,  299,   -1,  301,  302,  303,  304,  305,   -1,
  287,  288,  289,  290,   -1,   33,   59,   91,   36,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,  305,  306,
  307,   -1,   -1,  310,   82,  281,  313,  314,  315,   -1,
   -1,  287,  288,  289,  290,   -1,   64,   -1,   96,  123,
   93,   -1,  126,   -1,   -1,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,   -1,   -1,  313,  314,  315,
   -1,   33,   -1,   91,   36,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  142,   -1,   -1,  287,  288,  289,
  290,   -1,   64,   -1,   -1,  123,   -1,   -1,  126,   -1,
   41,   -1,   -1,   44,  304,  305,  306,  307,   -1,   -1,
  310,   -1,   -1,  313,  314,  315,   -1,   58,   59,   91,
   -1,   -1,   -1,  181,   33,   -1,   -1,   36,   37,   38,
  188,   40,   -1,   42,   43,   -1,   45,  281,   -1,   -1,
   -1,   -1,   -1,  287,  288,  289,  290,   -1,   -1,   -1,
   -1,  123,   93,   -1,  126,   64,   -1,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,   -1,   -1,  313,
  314,  315,  256,  257,  258,  259,  260,  261,   -1,  263,
  264,  265,   91,   -1,   -1,  269,   -1,   -1,  272,  273,
  274,  275,   -1,   -1,   -1,  279,  280,   -1,  282,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,   -1,  123,   -1,  300,  126,   -1,  272,
  273,  274,  275,   -1,   -1,  309,  279,  311,  312,  257,
  258,  259,  260,  261,  262,  263,  264,  265,   -1,   -1,
   -1,  269,   -1,   -1,   63,  298,  299,   -1,   -1,   -1,
   -1,   -1,  280,   -1,  282,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,   -1,
   -1,   -1,  300,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  309,   -1,  311,  312,  257,  258,  259,  260,  261,
   -1,  263,  264,  265,   -1,   33,   -1,  269,   36,   37,
   38,   -1,   40,   41,   42,   43,   -1,   45,  280,   -1,
  282,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,   -1,   64,   -1,  300,   -1,
   -1,  272,  273,  274,  275,   -1,   -1,  309,  279,  311,
  312,   -1,  287,  288,  289,  290,   -1,   -1,  257,  258,
  259,  260,  261,   91,  263,  264,  265,  298,  299,   -1,
  269,  306,  307,   -1,   -1,  310,   -1,   -1,  313,  314,
  315,  280,   -1,  282,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  126,   33,
   -1,  300,   36,   37,   38,   -1,   40,   -1,   42,   43,
  309,   45,  311,  312,  287,   -1,  289,  290,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
   64,   25,   26,  306,  307,   -1,   41,  310,   -1,   44,
  313,  314,  315,   37,   -1,   -1,   -1,   -1,   -1,   43,
   44,   45,   -1,   58,   59,   33,   50,   91,   36,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   62,   63,
   64,   65,  281,   -1,   -1,   -1,   -1,   -1,  287,  288,
  289,  290,   -1,   -1,   -1,   -1,   64,   -1,   93,   -1,
   -1,   -1,  126,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,   -1,   -1,  313,  314,  315,   -1,   -1,   -1,
   -1,   -1,   -1,   91,  108,   93,   33,   -1,   -1,   36,
   37,   38,   -1,   40,   41,   42,   43,   -1,   45,  257,
  258,  259,  260,  261,   -1,  263,  264,  265,   -1,   -1,
   -1,  269,   -1,   -1,   -1,   -1,   -1,   64,  126,   -1,
   -1,   -1,  280,   -1,  282,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,   -1,
  289,  290,  300,  167,   91,   -1,   -1,   -1,   -1,   -1,
   -1,  309,   -1,  311,  312,   -1,   -1,   41,  307,   -1,
   44,  310,   -1,   -1,  313,  314,  315,   -1,   -1,  193,
   -1,   -1,   -1,   -1,   58,   59,   -1,   33,   -1,  126,
   36,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   -1,   -1,   -1,  257,  258,  259,  260,  261,   -1,  263,
  264,  265,   -1,   -1,   -1,  269,   -1,   -1,   64,   93,
   -1,   -1,   -1,   -1,   -1,   -1,  280,   -1,  282,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,   -1,   -1,   91,  300,  272,  273,  274,
  275,   -1,   -1,   -1,  279,  309,   -1,  311,  312,  257,
  258,  259,  260,  261,   -1,  263,  264,  265,   -1,   -1,
   -1,  269,   -1,  298,  299,   -1,   -1,   -1,   -1,   -1,
  126,   -1,  280,   -1,  282,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,   -1,
   41,   -1,  300,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  309,   -1,  311,  312,   -1,   41,   58,   59,   44,
  257,  258,  259,  260,  261,   -1,  263,  264,  265,   -1,
   -1,   -1,  269,   58,   59,   -1,   -1,   -1,   63,   -1,
   -1,   -1,   -1,  280,   -1,  282,  283,  284,  285,  286,
   -1,   -1,   93,   -1,  291,  292,  293,  294,  295,  296,
   -1,   -1,   -1,  300,   -1,   -1,   -1,   -1,   93,   -1,
   -1,   -1,  309,   -1,  311,  312,   -1,   33,   -1,   -1,
   36,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,
  274,  275,   -1,   -1,   -1,  279,   -1,   -1,   64,   -1,
   -1,  257,  258,  259,  260,  261,   -1,  263,  264,  265,
   -1,   -1,   -1,  269,  298,  299,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  280,   91,  282,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,   -1,   33,   -1,  300,   36,   37,   38,   -1,   40,
   -1,   42,   43,  309,   45,  311,  312,   -1,   -1,   -1,
  126,  287,  288,  289,  290,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   64,   -1,   -1,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,   -1,   -1,  313,  314,  315,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   33,   -1,   -1,   36,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,  272,  273,  274,  275,   -1,   -1,   -1,  279,   -1,
   -1,   -1,   -1,   -1,   64,  126,   -1,  272,  273,  274,
  275,   -1,   -1,   -1,  279,   -1,  281,  298,  299,   -1,
   -1,   -1,  287,  288,  289,  290,   -1,   -1,   -1,   -1,
   -1,   91,   -1,  298,  299,   -1,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,   -1,   -1,   33,   -1,
   -1,   36,   37,   38,   -1,   40,   41,   42,   43,   -1,
   45,  257,  258,  259,  260,  261,  126,  263,  264,  265,
   -1,   -1,   -1,  269,   -1,   -1,   -1,   -1,   -1,   64,
   -1,   -1,   -1,   -1,  280,   -1,  282,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,   -1,   -1,   -1,  300,   -1,   91,   -1,   -1,   -1,
   -1,   -1,   -1,  309,   -1,  311,  312,   -1,   33,   -1,
   -1,   36,   37,   38,   -1,   40,   41,   42,   43,   -1,
   45,   -1,   -1,   -1,   -1,  256,  257,  258,  259,  260,
  261,  126,  263,  264,  265,   -1,   -1,   -1,  269,   64,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,
   -1,  282,  283,  284,  285,  286,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,   91,   -1,   -1,  300,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  309,   -1,
  311,  312,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,   -1,  263,  264,  265,   -1,   -1,   -1,  269,
   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  280,   -1,  282,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,   -1,   33,   -1,
  300,   36,   37,   38,   -1,   40,   -1,   42,   43,  309,
   45,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   64,
   -1,   -1,  257,  258,  259,  260,  261,   -1,  263,  264,
  265,   -1,   -1,   -1,  269,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  280,   91,  282,  283,  284,
  285,  286,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,   -1,   -1,   -1,  300,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  309,   -1,  311,  312,   -1,   -1,
   -1,  126,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,   -1,  263,  264,
  265,   58,   59,   -1,  269,   -1,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  280,   -1,  282,  283,  284,
  285,  286,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,   -1,   -1,   41,  300,   93,   44,   -1,   -1,
   -1,   -1,   -1,   -1,  309,   -1,  311,  312,   -1,   -1,
   -1,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,   -1,  263,  264,
  265,   -1,   -1,   -1,  269,   -1,   -1,   -1,   -1,   -1,
   93,   -1,   -1,   -1,   -1,  280,   -1,  282,  283,  284,
  285,  286,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,   -1,   41,   -1,  300,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  309,   -1,  311,  312,   -1,   -1,
   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   41,   -1,   93,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  272,  273,  274,  275,   -1,
   58,   59,  279,   -1,  281,   63,   -1,   -1,   -1,   -1,
  287,  288,  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  298,  299,   -1,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,   -1,   93,  313,  314,  315,   -1,
   -1,   -1,   -1,   -1,   -1,  272,  273,  274,  275,   -1,
   -1,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,
  287,  288,  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  298,  299,   -1,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,   -1,   -1,  313,  314,  315,  272,
  273,  274,  275,   -1,   -1,   -1,  279,   -1,  281,   -1,
   -1,   -1,   -1,   -1,  287,  288,  289,  290,   -1,   -1,
   -1,   41,   -1,   -1,   44,  298,  299,   -1,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,   58,   59,
  313,  314,  315,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   93,  272,  273,  274,  275,   -1,   -1,
   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,  287,
  288,  289,  290,   -1,   -1,   -1,   41,   -1,   -1,   44,
  298,  299,   -1,  301,  302,  303,  304,  305,  306,  307,
   -1,   -1,  310,   58,   59,  313,  314,  315,   63,   -1,
   -1,   -1,   -1,   -1,  272,  273,  274,  275,   -1,   -1,
   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,  287,
  288,  289,  290,   -1,   -1,   -1,   41,   -1,   93,   44,
  298,  299,   -1,  301,  302,  303,  304,  305,  306,  307,
   -1,   -1,  310,   58,   59,  313,  314,  315,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   93,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   41,   -1,   93,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  272,  273,  274,  275,   -1,   58,   59,  279,
   -1,  281,   63,   -1,   -1,   -1,   -1,  287,  288,  289,
  290,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,  299,
   -1,  301,  302,  303,  304,  305,  306,  307,   41,   -1,
  310,   44,   93,  313,  314,  315,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,  274,
  275,   -1,   -1,   -1,  279,   -1,  281,   -1,   -1,   -1,
   93,   -1,  287,  288,  289,  290,   -1,   -1,   -1,   41,
   -1,   -1,   44,  298,  299,   -1,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,   58,   59,  313,  314,
  315,   63,   -1,   -1,   -1,   -1,   -1,  272,  273,  274,
  275,   -1,   -1,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,   -1,  287,  288,  289,  290,   -1,   -1,   -1,   -1,
   -1,   93,   -1,  298,  299,   -1,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,   -1,   -1,  313,  314,
  315,  272,  273,  274,  275,   -1,   -1,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,   -1,  287,  288,  289,  290,
   -1,   -1,   -1,   41,   -1,   -1,   44,  298,  299,   -1,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
   58,   59,  313,  314,  315,   63,   -1,   -1,   -1,   -1,
   -1,  272,  273,  274,  275,   -1,   -1,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,   -1,  287,  288,  289,  290,
   -1,   -1,   -1,   -1,   -1,   93,   -1,  298,  299,   -1,
  301,  302,  303,  304,  305,  306,  307,   41,   -1,  310,
   -1,   -1,  313,  314,  315,   -1,   -1,   -1,   -1,  272,
  273,  274,  275,   -1,   58,   59,  279,   -1,  281,   63,
   -1,   -1,   -1,   -1,  287,  288,  289,  290,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  298,  299,   -1,  301,  302,
  303,  304,  305,  306,  307,   -1,   41,  310,   -1,   93,
  313,  314,  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,
  272,  273,  274,  275,   -1,   -1,   -1,  279,   -1,  281,
   -1,   -1,   -1,   -1,   -1,  287,  288,  289,  290,   -1,
   -1,   -1,   41,   -1,   -1,   -1,  298,  299,   93,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,   58,
   59,  313,  314,  315,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,
   -1,   -1,   -1,   -1,  272,  273,  274,  275,   -1,   -1,
   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,  287,
  288,  289,  290,   -1,   -1,   -1,   41,   -1,   93,   44,
  298,  299,   -1,  301,  302,  303,  304,  305,  306,  307,
   -1,   -1,  310,   58,   59,  313,  314,  315,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,
  274,  275,   -1,   -1,   -1,  279,   -1,  281,   93,   -1,
   -1,   -1,   -1,  287,  288,  289,  290,   -1,   -1,   -1,
   41,   -1,   -1,   44,  298,  299,   -1,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,   58,   59,  313,
  314,  315,   63,   -1,   -1,   -1,   -1,  272,  273,  274,
  275,   -1,   -1,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,   -1,  287,  288,  289,  290,   -1,   -1,   -1,   -1,
   -1,   -1,   93,  298,  299,   -1,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,   -1,   -1,  313,  314,
  315,   -1,   -1,  272,  273,  274,  275,   -1,   -1,   -1,
  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,  287,  288,
  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,
  299,   -1,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,   -1,   -1,  313,  314,  315,  272,  273,  274,
  275,   -1,   -1,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,   -1,  287,  288,  289,  290,   41,   -1,   -1,   44,
   -1,   -1,   -1,  298,  299,   -1,  301,  302,  303,  304,
  305,  306,  307,   58,   59,  310,   -1,   -1,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,  274,
  275,   -1,   -1,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,   -1,  287,  288,  289,  290,   -1,   41,   93,   -1,
   44,   -1,   -1,  298,  299,   -1,  301,  302,  303,  304,
  305,  306,  307,   -1,   58,   59,   -1,   -1,   -1,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  272,  273,  274,  275,   -1,   -1,   -1,  279,   93,
  281,   -1,   -1,   -1,   -1,   -1,  287,  288,  289,  290,
   41,   -1,   -1,   44,   -1,   -1,   -1,  298,  299,   -1,
  301,  302,  303,  304,  305,  306,  307,   58,   59,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   58,   59,   -1,   -1,   -1,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,
   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,  274,
  275,   -1,   -1,   -1,  279,   93,  281,   -1,   -1,   -1,
   -1,   -1,  287,  288,  289,  290,   41,   -1,   -1,   44,
   -1,   -1,   -1,  298,  299,   -1,  301,  302,  303,  304,
  305,  306,  307,   58,   59,   -1,   -1,   -1,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,
  274,  275,   -1,   -1,   -1,  279,   -1,  281,   -1,   -1,
   -1,   -1,   -1,  287,  288,  289,  290,   41,   93,   -1,
   44,   -1,   -1,   -1,  298,  299,   -1,  301,  302,  303,
  304,  305,  306,  307,   58,   59,   -1,   -1,   -1,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  272,  273,  274,  275,   -1,   -1,   -1,  279,   93,
  281,   -1,   -1,   -1,   -1,   -1,  287,  288,  289,  290,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,  299,   -1,
  301,  302,  303,  304,  305,  306,  307,  272,  273,  274,
  275,   -1,   -1,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,   -1,  287,  288,  289,  290,   -1,   -1,   -1,   -1,
   -1,   -1,   41,  298,  299,   44,  301,  302,  303,  304,
  305,  306,  307,   -1,  272,  273,  274,  275,   -1,   58,
   59,  279,   -1,  281,   63,   -1,   -1,   -1,   -1,  287,
  288,  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,   41,
  298,  299,   44,  301,  302,  303,  304,  305,  306,  307,
   41,   -1,   -1,   44,   93,   -1,   58,   59,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   -1,  272,  273,  274,
  275,   -1,   -1,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,   93,  287,  288,  289,  290,   41,   -1,   -1,   44,
   -1,   -1,   93,  298,  299,   -1,  301,  302,  303,  304,
  305,  306,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,
  274,  275,   -1,   -1,   -1,  279,   -1,  281,   -1,   -1,
   -1,   -1,   -1,  287,  288,   -1,  290,   41,   93,   -1,
   44,   -1,   -1,   -1,  298,  299,   -1,  301,  302,  303,
  304,  305,  306,   -1,   58,   59,   -1,   -1,   -1,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   93,
   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,
   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  272,  273,  274,  275,   93,   -1,   -1,
  279,   -1,  281,   -1,   -1,   -1,   -1,   93,  287,  288,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,
  299,   -1,  301,  302,  303,  304,  305,  306,   -1,   -1,
  272,  273,  274,  275,   -1,   -1,   -1,  279,   -1,  281,
   -1,  272,  273,  274,  275,  287,  288,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,   -1,  298,  299,   -1,  301,
  302,  303,  304,  305,   -1,   -1,   -1,  298,  299,   -1,
  301,  302,  303,  304,  305,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,  274,
  275,   -1,   58,   59,  279,   -1,  281,   63,   -1,   -1,
   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,   41,   -1,
   -1,   44,   -1,  298,  299,   -1,  301,  302,  303,  304,
  305,   -1,   -1,   -1,   -1,   58,   59,   93,   -1,   -1,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,
  274,  275,   -1,   -1,   -1,  279,   -1,  281,   -1,   -1,
   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,   -1,
   93,   -1,   -1,   -1,  298,  299,   -1,  301,  302,  303,
  304,  305,   -1,   -1,   -1,   -1,  272,  273,  274,  275,
   -1,   -1,   -1,  279,   -1,  281,  272,  273,  274,  275,
   -1,  287,  288,  279,   -1,  281,   -1,   -1,   -1,   -1,
   -1,   -1,  298,  299,   -1,  301,  302,  303,  304,  305,
   -1,   41,  298,  299,   44,  301,  302,  303,  304,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   30,   -1,   -1,   63,   -1,   -1,   -1,   -1,   38,   -1,
   -1,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   52,   53,   54,   55,   56,   -1,   -1,   -1,
   60,   61,   -1,   93,   -1,   -1,   66,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,  274,  275,
   -1,   -1,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  298,  299,   -1,  301,  302,  303,  304,  272,
  273,  274,  275,   -1,   -1,   -1,  279,   -1,  281,   -1,
   -1,  151,  152,  153,  154,  155,  156,  157,  158,  159,
  160,  161,  162,  163,  164,  298,  299,   -1,  301,  302,
  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  178,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  272,  273,  274,  275,   -1,   -1,   -1,  279,
   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,  258,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,  299,
   -1,  301,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,
};
#define YYFINAL 1
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 315
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,"'$'","'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'",0,0,0,0,0,0,0,
0,0,0,0,0,"':'","';'",0,0,0,"'?'","'@'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,"'{'",0,"'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"WORD","METHOD","FUNCMETH","THING",
"PMFUNC","PRIVATEREF","FUNC0SUB","UNIOPSUB","LSTOPSUB","LABEL","FORMAT","SUB",
"ANONSUB","PACKAGE","USE","WHILE","UNTIL","IF","UNLESS","ELSE","ELSIF",
"CONTINUE","FOR","LOOPEX","DOTDOT","FUNC0","FUNC1","FUNC","UNIOP","LSTOP",
"RELOP","EQOP","MULOP","ADDOP","DOLSHARP","DO","HASHBRACK","NOAMP","LOCAL","MY",
"PREC_LOW","OROP","ANDOP","NOTOP","ASSIGNOP","OROR","ANDAND","BITOROP",
"BITANDOP","SHIFTOP","MATCHOP","UMINUS","REFGEN","POWOP","PREINC","PREDEC",
"POSTINC","POSTDEC","ARROW",
};
static char *yyrule[] = {
"$accept : prog",
"$$1 :",
"prog : $$1 lineseq",
"block : '{' remember lineseq '}'",
"remember :",
"mblock : '{' mremember lineseq '}'",
"mremember :",
"lineseq :",
"lineseq : lineseq decl",
"lineseq : lineseq line",
"line : label cond",
"line : loop",
"line : label ';'",
"line : label sideff ';'",
"sideff : error",
"sideff : expr",
"sideff : expr IF expr",
"sideff : expr UNLESS expr",
"sideff : expr WHILE expr",
"sideff : expr UNTIL iexpr",
"sideff : expr FOR expr",
"else :",
"else : ELSE mblock",
"else : ELSIF '(' mexpr ')' mblock else",
"cond : IF '(' remember mexpr ')' mblock else",
"cond : UNLESS '(' remember miexpr ')' mblock else",
"cont :",
"cont : CONTINUE block",
"loop : label WHILE '(' remember mtexpr ')' mblock cont",
"loop : label UNTIL '(' remember miexpr ')' mblock cont",
"loop : label FOR MY remember my_scalar '(' mexpr ')' mblock cont",
"loop : label FOR scalar '(' remember mexpr ')' mblock cont",
"loop : label FOR '(' remember mexpr ')' mblock cont",
"loop : label FOR '(' remember mnexpr ';' mtexpr ';' mnexpr ')' mblock",
"loop : label block cont",
"nexpr :",
"nexpr : sideff",
"texpr :",
"texpr : expr",
"iexpr : expr",
"mexpr : expr",
"mnexpr : nexpr",
"mtexpr : texpr",
"miexpr : iexpr",
"label :",
"label : LABEL",
"decl : format",
"decl : subrout",
"decl : package",
"decl : use",
"format : FORMAT startformsub formname block",
"formname : WORD",
"formname :",
"subrout : SUB startsub subname proto subbody",
"startsub :",
"startanonsub :",
"startformsub :",
"subname : WORD",
"proto :",
"proto : THING",
"subbody : block",
"subbody : ';'",
"package : PACKAGE WORD ';'",
"package : PACKAGE ';'",
"$$2 :",
"use : USE startsub $$2 WORD WORD listexpr ';'",
"expr : expr ANDOP expr",
"expr : expr OROP expr",
"expr : argexpr",
"argexpr : argexpr ','",
"argexpr : argexpr ',' term",
"argexpr : term",
"listop : LSTOP indirob argexpr",
"listop : FUNC '(' indirob expr ')'",
"listop : term ARROW method '(' listexprcom ')'",
"listop : term ARROW method",
"listop : METHOD indirob listexpr",
"listop : FUNCMETH indirob '(' listexprcom ')'",
"listop : LSTOP listexpr",
"listop : FUNC '(' listexprcom ')'",
"$$3 :",
"listop : LSTOPSUB startanonsub block $$3 listexpr",
"method : METHOD",
"method : scalar",
"subscripted : star '{' expr ';' '}'",
"subscripted : scalar '[' expr ']'",
"subscripted : term ARROW '[' expr ']'",
"subscripted : subscripted '[' expr ']'",
"subscripted : scalar '{' expr ';' '}'",
"subscripted : term ARROW '{' expr ';' '}'",
"subscripted : subscripted '{' expr ';' '}'",
"subscripted : term ARROW '(' ')'",
"subscripted : term ARROW '(' expr ')'",
"subscripted : subscripted '(' expr ')'",
"subscripted : subscripted '(' ')'",
"term : term ASSIGNOP term",
"term : term POWOP term",
"term : term MULOP term",
"term : term ADDOP term",
"term : term SHIFTOP term",
"term : term RELOP term",
"term : term EQOP term",
"term : term BITANDOP term",
"term : term BITOROP term",
"term : term DOTDOT term",
"term : term ANDAND term",
"term : term OROR term",
"term : term '?' term ':' term",
"term : term MATCHOP term",
"term : '-' term",
"term : '+' term",
"term : '!' term",
"term : '~' term",
"term : REFGEN term",
"term : term POSTINC",
"term : term POSTDEC",
"term : PREINC term",
"term : PREDEC term",
"term : local term",
"term : '(' expr ')'",
"term : '(' ')'",
"term : '[' expr ']'",
"term : '[' ']'",
"term : HASHBRACK expr ';' '}'",
"term : HASHBRACK ';' '}'",
"term : ANONSUB startanonsub proto block",
"term : scalar",
"term : star",
"term : hsh",
"term : ary",
"term : arylen",
"term : subscripted",
"term : '(' expr ')' '[' expr ']'",
"term : '(' ')' '[' expr ']'",
"term : ary '[' expr ']'",
"term : ary '{' expr ';' '}'",
"term : THING",
"term : amper",
"term : amper '(' ')'",
"term : amper '(' expr ')'",
"term : NOAMP WORD listexpr",
"term : DO term",
"term : DO block",
"term : DO WORD '(' ')'",
"term : DO WORD '(' expr ')'",
"term : DO scalar '(' ')'",
"term : DO scalar '(' expr ')'",
"term : LOOPEX",
"term : LOOPEX term",
"term : NOTOP argexpr",
"term : UNIOP",
"term : UNIOP block",
"term : UNIOP term",
"term : UNIOPSUB term",
"term : FUNC0",
"term : FUNC0 '(' ')'",
"term : FUNC0SUB",
"term : FUNC1 '(' ')'",
"term : FUNC1 '(' expr ')'",
"term : PMFUNC '(' term ')'",
"term : PMFUNC '(' term ',' term ')'",
"term : WORD",
"term : listop",
"listexpr :",
"listexpr : argexpr",
"listexprcom :",
"listexprcom : expr",
"listexprcom : expr ','",
"local : LOCAL",
"local : MY",
"my_scalar : scalar",
"amper : '&' indirob",
"scalar : '$' indirob",
"ary : '@' indirob",
"hsh : '%' indirob",
"arylen : DOLSHARP indirob",
"star : '*' indirob",
"indirob : WORD",
"indirob : scalar",
"indirob : block",
"indirob : PRIVATEREF",
};
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
#line 666 "perly.y"
 /* PROGRAM */
#line 1427 "perly.c"
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab

struct ysv {
    short* yyss;
    YYSTYPE* yyvs;
    int oldyydebug;
    int oldyynerrs;
    int oldyyerrflag;
    int oldyychar;
    YYSTYPE oldyyval;
    YYSTYPE oldyylval;
};

int
Perl_yyparse(pTHX)
{
    register int yym, yyn, yystate;
    register short *yyssp;
    register YYSTYPE *yyvsp;
    short* yyss;
    YYSTYPE* yyvs;
    unsigned yystacksize = YYSTACKSIZE;
    int retval = 0;
#if YYDEBUG
    register char *yys;
#ifndef __cplusplus
#   ifndef getenv
    extern char *getenv();
#   endif
#endif
#endif

    struct ysv *ysave;
    New(73, ysave, 1, struct ysv);
    SAVEDESTRUCTOR(yydestruct, ysave);
    ysave->oldyydebug	= yydebug;
    ysave->oldyynerrs	= yynerrs;
    ysave->oldyyerrflag	= yyerrflag;
    ysave->oldyychar	= yychar;
    ysave->oldyyval	= yyval;
    ysave->oldyylval	= yylval;

#if YYDEBUG
    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
	else SETERRNO(0,SS$_NORMAL);
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    /*
    ** Initialize private stacks (yyparse may be called from an action)
    */
    New(73, yyss, yystacksize, short);
    New(73, yyvs, yystacksize, YYSTYPE);
    ysave->yyss = yyss;
    ysave->yyvs = yyvs;
    if (!yyvs || !yyss)
	goto yyoverflow;

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            PerlIO_printf(Perl_debug_log, "yydebug: state %d, shifting to state %d\n",
                    yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
	    /*
	    ** reallocate and recover.  Note that pointers
	    ** have to be reset, or bad things will happen
	    */
	    int yyps_index = (yyssp - yyss);
	    int yypv_index = (yyvsp - yyvs);
	    yystacksize += YYSTACKSIZE;
	    ysave->yyvs = yyvs =
		(YYSTYPE*)PerlMem_realloc((char*)yyvs,yystacksize * sizeof(YYSTYPE));
	    ysave->yyss = yyss =
		(short*)PerlMem_realloc((char*)yyss,yystacksize * sizeof(short));
	    if (!yyvs || !yyss)
		goto yyoverflow;
	    yyssp = yyss + yyps_index;
	    yyvsp = yyvs + yypv_index;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    PerlIO_printf(Perl_debug_log,
		     "yydebug: state %d, error recovery shifting to state %d\n",
		     *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
		    /*
		    ** reallocate and recover.  Note that pointers
		    ** have to be reset, or bad things will happen
		    */
		    int yyps_index = (yyssp - yyss);
		    int yypv_index = (yyvsp - yyvs);
		    yystacksize += YYSTACKSIZE;
		    ysave->yyvs = yyvs = (YYSTYPE*)PerlMem_realloc((char*)yyvs,
			yystacksize * sizeof(YYSTYPE));
		    ysave->yyss = yyss = (short*)PerlMem_realloc((char*)yyss,
			yystacksize * sizeof(short));
		    if (!yyvs || !yyss)
			goto yyoverflow;
		    yyssp = yyss + yyps_index;
		    yyvsp = yyvs + yypv_index;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    PerlIO_printf(Perl_debug_log,
			"yydebug: error recovery discarding state %d\n",
			*yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            PerlIO_printf(Perl_debug_log,
		"yydebug: state %d, error recovery discards token %d (%s)\n",
		yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        PerlIO_printf(Perl_debug_log, "yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 101 "perly.y"
{
#if defined(YYDEBUG) && defined(DEBUGGING)
		    yydebug = (PL_debug & 1);
#endif
		    PL_expect = XSTATE;
		}
break;
case 2:
#line 108 "perly.y"
{ newPROG(yyvsp[0].opval); }
break;
case 3:
#line 112 "perly.y"
{ if (PL_copline > (line_t)yyvsp[-3].ival)
			      PL_copline = yyvsp[-3].ival;
			  yyval.opval = block_end(yyvsp[-2].ival, yyvsp[-1].opval); }
break;
case 4:
#line 118 "perly.y"
{ yyval.ival = block_start(TRUE); }
break;
case 5:
#line 122 "perly.y"
{ if (PL_copline > (line_t)yyvsp[-3].ival)
			      PL_copline = yyvsp[-3].ival;
			  yyval.opval = block_end(yyvsp[-2].ival, yyvsp[-1].opval); }
break;
case 6:
#line 128 "perly.y"
{ yyval.ival = block_start(FALSE); }
break;
case 7:
#line 132 "perly.y"
{ yyval.opval = Nullop; }
break;
case 8:
#line 134 "perly.y"
{ yyval.opval = yyvsp[-1].opval; }
break;
case 9:
#line 136 "perly.y"
{   yyval.opval = append_list(OP_LINESEQ,
				(LISTOP*)yyvsp[-1].opval, (LISTOP*)yyvsp[0].opval);
			    PL_pad_reset_pending = TRUE;
			    if (yyvsp[-1].opval && yyvsp[0].opval) PL_hints |= HINT_BLOCK_SCOPE; }
break;
case 10:
#line 143 "perly.y"
{ yyval.opval = newSTATEOP(0, yyvsp[-1].pval, yyvsp[0].opval); }
break;
case 12:
#line 146 "perly.y"
{ if (yyvsp[-1].pval != Nullch) {
			      yyval.opval = newSTATEOP(0, yyvsp[-1].pval, newOP(OP_NULL, 0));
			    }
			    else {
			      yyval.opval = Nullop;
			      PL_copline = NOLINE;
			    }
			    PL_expect = XSTATE; }
break;
case 13:
#line 155 "perly.y"
{ yyval.opval = newSTATEOP(0, yyvsp[-2].pval, yyvsp[-1].opval);
			  PL_expect = XSTATE; }
break;
case 14:
#line 160 "perly.y"
{ yyval.opval = Nullop; }
break;
case 15:
#line 162 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 16:
#line 164 "perly.y"
{ yyval.opval = newLOGOP(OP_AND, 0, yyvsp[0].opval, yyvsp[-2].opval); }
break;
case 17:
#line 166 "perly.y"
{ yyval.opval = newLOGOP(OP_OR, 0, yyvsp[0].opval, yyvsp[-2].opval); }
break;
case 18:
#line 168 "perly.y"
{ yyval.opval = newLOOPOP(OPf_PARENS, 1, scalar(yyvsp[0].opval), yyvsp[-2].opval); }
break;
case 19:
#line 170 "perly.y"
{ yyval.opval = newLOOPOP(OPf_PARENS, 1, yyvsp[0].opval, yyvsp[-2].opval);}
break;
case 20:
#line 172 "perly.y"
{ yyval.opval = newFOROP(0, Nullch, yyvsp[-1].ival,
					Nullop, yyvsp[0].opval, yyvsp[-2].opval, Nullop); }
break;
case 21:
#line 177 "perly.y"
{ yyval.opval = Nullop; }
break;
case 22:
#line 179 "perly.y"
{ yyval.opval = scope(yyvsp[0].opval); }
break;
case 23:
#line 181 "perly.y"
{ PL_copline = yyvsp[-5].ival;
			    yyval.opval = newCONDOP(0, yyvsp[-3].opval, scope(yyvsp[-1].opval), yyvsp[0].opval);
			    PL_hints |= HINT_BLOCK_SCOPE; }
break;
case 24:
#line 187 "perly.y"
{ PL_copline = yyvsp[-6].ival;
			    yyval.opval = block_end(yyvsp[-4].ival,
				   newCONDOP(0, yyvsp[-3].opval, scope(yyvsp[-1].opval), yyvsp[0].opval)); }
break;
case 25:
#line 191 "perly.y"
{ PL_copline = yyvsp[-6].ival;
			    yyval.opval = block_end(yyvsp[-4].ival,
				   newCONDOP(0, yyvsp[-3].opval, scope(yyvsp[-1].opval), yyvsp[0].opval)); }
break;
case 26:
#line 197 "perly.y"
{ yyval.opval = Nullop; }
break;
case 27:
#line 199 "perly.y"
{ yyval.opval = scope(yyvsp[0].opval); }
break;
case 28:
#line 203 "perly.y"
{ PL_copline = yyvsp[-6].ival;
			    yyval.opval = block_end(yyvsp[-4].ival,
				   newSTATEOP(0, yyvsp[-7].pval,
				     newWHILEOP(0, 1, (LOOP*)Nullop,
						yyvsp[-6].ival, yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval))); }
break;
case 29:
#line 209 "perly.y"
{ PL_copline = yyvsp[-6].ival;
			    yyval.opval = block_end(yyvsp[-4].ival,
				   newSTATEOP(0, yyvsp[-7].pval,
				     newWHILEOP(0, 1, (LOOP*)Nullop,
						yyvsp[-6].ival, yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval))); }
break;
case 30:
#line 215 "perly.y"
{ yyval.opval = block_end(yyvsp[-6].ival,
				 newFOROP(0, yyvsp[-9].pval, yyvsp[-8].ival, yyvsp[-5].opval, yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval)); }
break;
case 31:
#line 218 "perly.y"
{ yyval.opval = block_end(yyvsp[-4].ival,
				 newFOROP(0, yyvsp[-8].pval, yyvsp[-7].ival, mod(yyvsp[-6].opval, OP_ENTERLOOP),
					  yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval)); }
break;
case 32:
#line 222 "perly.y"
{ yyval.opval = block_end(yyvsp[-4].ival,
				 newFOROP(0, yyvsp[-7].pval, yyvsp[-6].ival, Nullop, yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval)); }
break;
case 33:
#line 226 "perly.y"
{ OP *forop = append_elem(OP_LINESEQ,
					scalar(yyvsp[-6].opval),
					newWHILEOP(0, 1, (LOOP*)Nullop,
						   yyvsp[-9].ival, scalar(yyvsp[-4].opval),
						   yyvsp[0].opval, scalar(yyvsp[-2].opval)));
			  PL_copline = yyvsp[-9].ival;
			  yyval.opval = block_end(yyvsp[-7].ival, newSTATEOP(0, yyvsp[-10].pval, forop)); }
break;
case 34:
#line 234 "perly.y"
{ yyval.opval = newSTATEOP(0, yyvsp[-2].pval,
				 newWHILEOP(0, 1, (LOOP*)Nullop,
					    NOLINE, Nullop, yyvsp[-1].opval, yyvsp[0].opval)); }
break;
case 35:
#line 240 "perly.y"
{ yyval.opval = Nullop; }
break;
case 37:
#line 245 "perly.y"
{ (void)scan_num("1"); yyval.opval = yylval.opval; }
break;
case 39:
#line 250 "perly.y"
{ yyval.opval = invert(scalar(yyvsp[0].opval)); }
break;
case 40:
#line 254 "perly.y"
{ yyval.opval = yyvsp[0].opval; intro_my(); }
break;
case 41:
#line 258 "perly.y"
{ yyval.opval = yyvsp[0].opval; intro_my(); }
break;
case 42:
#line 262 "perly.y"
{ yyval.opval = yyvsp[0].opval; intro_my(); }
break;
case 43:
#line 266 "perly.y"
{ yyval.opval = yyvsp[0].opval; intro_my(); }
break;
case 44:
#line 270 "perly.y"
{ yyval.pval = Nullch; }
break;
case 46:
#line 275 "perly.y"
{ yyval.ival = 0; }
break;
case 47:
#line 277 "perly.y"
{ yyval.ival = 0; }
break;
case 48:
#line 279 "perly.y"
{ yyval.ival = 0; }
break;
case 49:
#line 281 "perly.y"
{ yyval.ival = 0; }
break;
case 50:
#line 285 "perly.y"
{ newFORM(yyvsp[-2].ival, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 51:
#line 288 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 52:
#line 289 "perly.y"
{ yyval.opval = Nullop; }
break;
case 53:
#line 293 "perly.y"
{ newSUB(yyvsp[-3].ival, yyvsp[-2].opval, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 54:
#line 297 "perly.y"
{ yyval.ival = start_subparse(FALSE, 0); }
break;
case 55:
#line 301 "perly.y"
{ yyval.ival = start_subparse(FALSE, CVf_ANON); }
break;
case 56:
#line 305 "perly.y"
{ yyval.ival = start_subparse(TRUE, 0); }
break;
case 57:
#line 308 "perly.y"
{ STRLEN n_a; char *name = SvPV(((SVOP*)yyvsp[0].opval)->op_sv,n_a);
			  if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT"))
			      CvSPECIAL_on(PL_compcv);
			  yyval.opval = yyvsp[0].opval; }
break;
case 58:
#line 316 "perly.y"
{ yyval.opval = Nullop; }
break;
case 60:
#line 320 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 61:
#line 321 "perly.y"
{ yyval.opval = Nullop; PL_expect = XSTATE; }
break;
case 62:
#line 325 "perly.y"
{ package(yyvsp[-1].opval); }
break;
case 63:
#line 327 "perly.y"
{ package(Nullop); }
break;
case 64:
#line 331 "perly.y"
{ CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ }
break;
case 65:
#line 333 "perly.y"
{ utilize(yyvsp[-6].ival, yyvsp[-5].ival, yyvsp[-3].opval, yyvsp[-2].opval, yyvsp[-1].opval); }
break;
case 66:
#line 337 "perly.y"
{ yyval.opval = newLOGOP(OP_AND, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 67:
#line 339 "perly.y"
{ yyval.opval = newLOGOP(yyvsp[-1].ival, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 69:
#line 344 "perly.y"
{ yyval.opval = yyvsp[-1].opval; }
break;
case 70:
#line 346 "perly.y"
{ yyval.opval = append_elem(OP_LIST, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 72:
#line 351 "perly.y"
{ yyval.opval = convert(yyvsp[-2].ival, OPf_STACKED,
				prepend_elem(OP_LIST, newGVREF(yyvsp[-2].ival,yyvsp[-1].opval), yyvsp[0].opval) ); }
break;
case 73:
#line 354 "perly.y"
{ yyval.opval = convert(yyvsp[-4].ival, OPf_STACKED,
				prepend_elem(OP_LIST, newGVREF(yyvsp[-4].ival,yyvsp[-2].opval), yyvsp[-1].opval) ); }
break;
case 74:
#line 357 "perly.y"
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, scalar(yyvsp[-5].opval), yyvsp[-1].opval),
				    newUNOP(OP_METHOD, 0, yyvsp[-3].opval))); }
break;
case 75:
#line 362 "perly.y"
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST, scalar(yyvsp[-2].opval),
				    newUNOP(OP_METHOD, 0, yyvsp[0].opval))); }
break;
case 76:
#line 366 "perly.y"
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, yyvsp[-1].opval, yyvsp[0].opval),
				    newUNOP(OP_METHOD, 0, yyvsp[-2].opval))); }
break;
case 77:
#line 371 "perly.y"
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, yyvsp[-3].opval, yyvsp[-1].opval),
				    newUNOP(OP_METHOD, 0, yyvsp[-4].opval))); }
break;
case 78:
#line 376 "perly.y"
{ yyval.opval = convert(yyvsp[-1].ival, 0, yyvsp[0].opval); }
break;
case 79:
#line 378 "perly.y"
{ yyval.opval = convert(yyvsp[-3].ival, 0, yyvsp[-1].opval); }
break;
case 80:
#line 380 "perly.y"
{ yyvsp[0].opval = newANONSUB(yyvsp[-1].ival, 0, yyvsp[0].opval); }
break;
case 81:
#line 382 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 append_elem(OP_LIST,
				   prepend_elem(OP_LIST, yyvsp[-2].opval, yyvsp[0].opval), yyvsp[-4].opval)); }
break;
case 84:
#line 392 "perly.y"
{ yyval.opval = newBINOP(OP_GELEM, 0, yyvsp[-4].opval, scalar(yyvsp[-2].opval)); }
break;
case 85:
#line 394 "perly.y"
{ yyval.opval = newBINOP(OP_AELEM, 0, oopsAV(yyvsp[-3].opval), scalar(yyvsp[-1].opval)); }
break;
case 86:
#line 396 "perly.y"
{ yyval.opval = newBINOP(OP_AELEM, 0,
					ref(newAVREF(yyvsp[-4].opval),OP_RV2AV),
					scalar(yyvsp[-1].opval));}
break;
case 87:
#line 400 "perly.y"
{ yyval.opval = newBINOP(OP_AELEM, 0,
					ref(newAVREF(yyvsp[-3].opval),OP_RV2AV),
					scalar(yyvsp[-1].opval));}
break;
case 88:
#line 404 "perly.y"
{ yyval.opval = newBINOP(OP_HELEM, 0, oopsHV(yyvsp[-4].opval), jmaybe(yyvsp[-2].opval));
			    PL_expect = XOPERATOR; }
break;
case 89:
#line 407 "perly.y"
{ yyval.opval = newBINOP(OP_HELEM, 0,
					ref(newHVREF(yyvsp[-5].opval),OP_RV2HV),
					jmaybe(yyvsp[-2].opval));
			    PL_expect = XOPERATOR; }
break;
case 90:
#line 412 "perly.y"
{ yyval.opval = newBINOP(OP_HELEM, 0,
					ref(newHVREF(yyvsp[-4].opval),OP_RV2HV),
					jmaybe(yyvsp[-2].opval));
			    PL_expect = XOPERATOR; }
break;
case 91:
#line 417 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar(yyvsp[-3].opval))); }
break;
case 92:
#line 420 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   append_elem(OP_LIST, yyvsp[-1].opval,
				       newCVREF(0, scalar(yyvsp[-4].opval)))); }
break;
case 93:
#line 425 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   append_elem(OP_LIST, yyvsp[-1].opval,
					       newCVREF(0, scalar(yyvsp[-3].opval)))); }
break;
case 94:
#line 429 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar(yyvsp[-2].opval))); }
break;
case 95:
#line 435 "perly.y"
{ yyval.opval = newASSIGNOP(OPf_STACKED, yyvsp[-2].opval, yyvsp[-1].ival, yyvsp[0].opval); }
break;
case 96:
#line 437 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 97:
#line 439 "perly.y"
{   if (yyvsp[-1].ival != OP_REPEAT)
				scalar(yyvsp[-2].opval);
			    yyval.opval = newBINOP(yyvsp[-1].ival, 0, yyvsp[-2].opval, scalar(yyvsp[0].opval)); }
break;
case 98:
#line 443 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 99:
#line 445 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 100:
#line 447 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 101:
#line 449 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 102:
#line 451 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 103:
#line 453 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 104:
#line 455 "perly.y"
{ yyval.opval = newRANGE(yyvsp[-1].ival, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval));}
break;
case 105:
#line 457 "perly.y"
{ yyval.opval = newLOGOP(OP_AND, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 106:
#line 459 "perly.y"
{ yyval.opval = newLOGOP(OP_OR, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 107:
#line 461 "perly.y"
{ yyval.opval = newCONDOP(0, yyvsp[-4].opval, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 108:
#line 463 "perly.y"
{ yyval.opval = bind_match(yyvsp[-1].ival, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 109:
#line 466 "perly.y"
{ yyval.opval = newUNOP(OP_NEGATE, 0, scalar(yyvsp[0].opval)); }
break;
case 110:
#line 468 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 111:
#line 470 "perly.y"
{ yyval.opval = newUNOP(OP_NOT, 0, scalar(yyvsp[0].opval)); }
break;
case 112:
#line 472 "perly.y"
{ yyval.opval = newUNOP(OP_COMPLEMENT, 0, scalar(yyvsp[0].opval));}
break;
case 113:
#line 474 "perly.y"
{ yyval.opval = newUNOP(OP_REFGEN, 0, mod(yyvsp[0].opval,OP_REFGEN)); }
break;
case 114:
#line 476 "perly.y"
{ yyval.opval = newUNOP(OP_POSTINC, 0,
					mod(scalar(yyvsp[-1].opval), OP_POSTINC)); }
break;
case 115:
#line 479 "perly.y"
{ yyval.opval = newUNOP(OP_POSTDEC, 0,
					mod(scalar(yyvsp[-1].opval), OP_POSTDEC)); }
break;
case 116:
#line 482 "perly.y"
{ yyval.opval = newUNOP(OP_PREINC, 0,
					mod(scalar(yyvsp[0].opval), OP_PREINC)); }
break;
case 117:
#line 485 "perly.y"
{ yyval.opval = newUNOP(OP_PREDEC, 0,
					mod(scalar(yyvsp[0].opval), OP_PREDEC)); }
break;
case 118:
#line 488 "perly.y"
{ yyval.opval = localize(yyvsp[0].opval,yyvsp[-1].ival); }
break;
case 119:
#line 490 "perly.y"
{ yyval.opval = sawparens(yyvsp[-1].opval); }
break;
case 120:
#line 492 "perly.y"
{ yyval.opval = sawparens(newNULLLIST()); }
break;
case 121:
#line 494 "perly.y"
{ yyval.opval = newANONLIST(yyvsp[-1].opval); }
break;
case 122:
#line 496 "perly.y"
{ yyval.opval = newANONLIST(Nullop); }
break;
case 123:
#line 498 "perly.y"
{ yyval.opval = newANONHASH(yyvsp[-2].opval); }
break;
case 124:
#line 500 "perly.y"
{ yyval.opval = newANONHASH(Nullop); }
break;
case 125:
#line 502 "perly.y"
{ yyval.opval = newANONSUB(yyvsp[-2].ival, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 126:
#line 504 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 127:
#line 506 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 128:
#line 508 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 129:
#line 510 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 130:
#line 512 "perly.y"
{ yyval.opval = newUNOP(OP_AV2ARYLEN, 0, ref(yyvsp[0].opval, OP_AV2ARYLEN));}
break;
case 131:
#line 514 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 132:
#line 516 "perly.y"
{ yyval.opval = newSLICEOP(0, yyvsp[-1].opval, yyvsp[-4].opval); }
break;
case 133:
#line 518 "perly.y"
{ yyval.opval = newSLICEOP(0, yyvsp[-1].opval, Nullop); }
break;
case 134:
#line 520 "perly.y"
{ yyval.opval = prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list(yyvsp[-1].opval),
					ref(yyvsp[-3].opval, OP_ASLICE))); }
break;
case 135:
#line 526 "perly.y"
{ yyval.opval = prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list(yyvsp[-2].opval),
					ref(oopsHV(yyvsp[-4].opval), OP_HSLICE)));
			    PL_expect = XOPERATOR; }
break;
case 136:
#line 533 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 137:
#line 535 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, 0, scalar(yyvsp[0].opval)); }
break;
case 138:
#line 537 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar(yyvsp[-2].opval)); }
break;
case 139:
#line 539 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, yyvsp[-1].opval, scalar(yyvsp[-3].opval))); }
break;
case 140:
#line 542 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, yyvsp[0].opval, scalar(yyvsp[-1].opval))); }
break;
case 141:
#line 545 "perly.y"
{ yyval.opval = dofile(yyvsp[0].opval); }
break;
case 142:
#line 547 "perly.y"
{ yyval.opval = newUNOP(OP_NULL, OPf_SPECIAL, scope(yyvsp[0].opval)); }
break;
case 143:
#line 549 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB,
			    OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				scalar(newCVREF(
				    (OPpENTERSUB_AMPER<<8),
				    scalar(yyvsp[-2].opval)
				)),Nullop)); dep();}
break;
case 144:
#line 557 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB,
			    OPf_SPECIAL|OPf_STACKED,
			    append_elem(OP_LIST,
				yyvsp[-1].opval,
				scalar(newCVREF(
				    (OPpENTERSUB_AMPER<<8),
				    scalar(yyvsp[-3].opval)
				)))); dep();}
break;
case 145:
#line 566 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				scalar(newCVREF(0,scalar(yyvsp[-2].opval))), Nullop)); dep();}
break;
case 146:
#line 570 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				yyvsp[-1].opval,
				scalar(newCVREF(0,scalar(yyvsp[-3].opval))))); dep();}
break;
case 147:
#line 575 "perly.y"
{ yyval.opval = newOP(yyvsp[0].ival, OPf_SPECIAL);
			    PL_hints |= HINT_BLOCK_SCOPE; }
break;
case 148:
#line 578 "perly.y"
{ yyval.opval = newLOOPEX(yyvsp[-1].ival,yyvsp[0].opval); }
break;
case 149:
#line 580 "perly.y"
{ yyval.opval = newUNOP(OP_NOT, 0, scalar(yyvsp[0].opval)); }
break;
case 150:
#line 582 "perly.y"
{ yyval.opval = newOP(yyvsp[0].ival, 0); }
break;
case 151:
#line 584 "perly.y"
{ yyval.opval = newUNOP(yyvsp[-1].ival, 0, yyvsp[0].opval); }
break;
case 152:
#line 586 "perly.y"
{ yyval.opval = newUNOP(yyvsp[-1].ival, 0, yyvsp[0].opval); }
break;
case 153:
#line 588 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, yyvsp[0].opval, scalar(yyvsp[-1].opval))); }
break;
case 154:
#line 591 "perly.y"
{ yyval.opval = newOP(yyvsp[0].ival, 0); }
break;
case 155:
#line 593 "perly.y"
{ yyval.opval = newOP(yyvsp[-2].ival, 0); }
break;
case 156:
#line 595 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				scalar(yyvsp[0].opval)); }
break;
case 157:
#line 598 "perly.y"
{ yyval.opval = newOP(yyvsp[-2].ival, OPf_SPECIAL); }
break;
case 158:
#line 600 "perly.y"
{ yyval.opval = newUNOP(yyvsp[-3].ival, 0, yyvsp[-1].opval); }
break;
case 159:
#line 602 "perly.y"
{ yyval.opval = pmruntime(yyvsp[-3].opval, yyvsp[-1].opval, Nullop); }
break;
case 160:
#line 604 "perly.y"
{ yyval.opval = pmruntime(yyvsp[-5].opval, yyvsp[-3].opval, yyvsp[-1].opval); }
break;
case 163:
#line 610 "perly.y"
{ yyval.opval = Nullop; }
break;
case 164:
#line 612 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 165:
#line 616 "perly.y"
{ yyval.opval = Nullop; }
break;
case 166:
#line 618 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 167:
#line 620 "perly.y"
{ yyval.opval = yyvsp[-1].opval; }
break;
case 168:
#line 623 "perly.y"
{ yyval.ival = 0; }
break;
case 169:
#line 624 "perly.y"
{ yyval.ival = 1; }
break;
case 170:
#line 628 "perly.y"
{ PL_in_my = 0; yyval.opval = my(yyvsp[0].opval); }
break;
case 171:
#line 632 "perly.y"
{ yyval.opval = newCVREF(yyvsp[-1].ival,yyvsp[0].opval); }
break;
case 172:
#line 636 "perly.y"
{ yyval.opval = newSVREF(yyvsp[0].opval); }
break;
case 173:
#line 640 "perly.y"
{ yyval.opval = newAVREF(yyvsp[0].opval); }
break;
case 174:
#line 644 "perly.y"
{ yyval.opval = newHVREF(yyvsp[0].opval); }
break;
case 175:
#line 648 "perly.y"
{ yyval.opval = newAVREF(yyvsp[0].opval); }
break;
case 176:
#line 652 "perly.y"
{ yyval.opval = newGVREF(0,yyvsp[0].opval); }
break;
case 177:
#line 656 "perly.y"
{ yyval.opval = scalar(yyvsp[0].opval); }
break;
case 178:
#line 658 "perly.y"
{ yyval.opval = scalar(yyvsp[0].opval);  }
break;
case 179:
#line 660 "perly.y"
{ yyval.opval = scope(yyvsp[0].opval); }
break;
case 180:
#line 663 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
#line 2365 "perly.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            PerlIO_printf(Perl_debug_log,
		"yydebug: after reduction, shifting from state 0 to state %d\n",
		YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                PerlIO_printf(Perl_debug_log, "yydebug: state %d, reading %d (%s)\n",
                        YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        PerlIO_printf(Perl_debug_log,
	    "yydebug: after reduction, shifting from state %d to state %d\n",
	    *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
	/*
	** reallocate and recover.  Note that pointers
	** have to be reset, or bad things will happen
	*/
	int yyps_index = (yyssp - yyss);
	int yypv_index = (yyvsp - yyvs);
	yystacksize += YYSTACKSIZE;
	ysave->yyvs = yyvs =
	    (YYSTYPE*)PerlMem_realloc((char*)yyvs,yystacksize * sizeof(YYSTYPE));
	ysave->yyss = yyss =
	    (short*)PerlMem_realloc((char*)yyss,yystacksize * sizeof(short));
	if (!yyvs || !yyss)
	    goto yyoverflow;
	yyssp = yyss + yyps_index;
	yyvsp = yyvs + yypv_index;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("Out of memory for yacc stack");
yyabort:
    retval = 1;
yyaccept:
    return retval;
}

#ifdef PERL_OBJECT
#define NO_XSLOCKS
#include "XSUB.h"
#endif

static void
yydestruct(pTHXo_ void *ptr)
{
    struct ysv* ysave = (struct ysv*)ptr;
    if (ysave->yyss) Safefree(ysave->yyss);
    if (ysave->yyvs) Safefree(ysave->yyvs);
    yydebug	= ysave->oldyydebug;
    yynerrs	= ysave->oldyynerrs;
    yyerrflag	= ysave->oldyyerrflag;
    yychar	= ysave->oldyychar;
    yyval	= ysave->oldyyval;
    yylval	= ysave->oldyylval;
    Safefree(ysave);
}
