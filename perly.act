case 2:
#line 146 "perly.y"
    { 
                            (yyval.ionlyval) = (ps[(1) - (2)].val.ionlyval); newPROG(block_end((ps[(1) - (2)].val.ionlyval),(ps[(2) - (2)].val.opval))); 
                        ;}
    break;

  case 3:
#line 153 "perly.y"
    { if (PL_parser->copline > (line_t)IVAL((ps[(1) - (4)].val.i_tkval)))
			      PL_parser->copline = (line_t)IVAL((ps[(1) - (4)].val.i_tkval));
                            (yyval.opval) = block_end((ps[(2) - (4)].val.ionlyval), (ps[(3) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 4:
#line 162 "perly.y"
    { (yyval.ionlyval) = block_start(TRUE); ;}
    break;

  case 5:
#line 166 "perly.y"
    {
		    PL_parser->expect = XSTATE; (yyval.ionlyval) = block_start(TRUE);
		;}
    break;

  case 6:
#line 173 "perly.y"
    { if (PL_parser->copline > (line_t)IVAL((ps[(1) - (4)].val.i_tkval)))
			      PL_parser->copline = (line_t)IVAL((ps[(1) - (4)].val.i_tkval));
                            (yyval.opval) = block_end((ps[(2) - (4)].val.ionlyval), (ps[(3) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 7:
#line 182 "perly.y"
    { (yyval.ionlyval) = block_start(FALSE); ;}
    break;

  case 8:
#line 187 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 9:
#line 189 "perly.y"
    {
			(yyval.opval) = IF_MAD(
				append_list(OP_LINESEQ,
			    	    (LISTOP*)(ps[(1) - (2)].val.opval), (LISTOP*)(ps[(2) - (2)].val.opval)),
				(ps[(1) - (2)].val.opval));
			;}
    break;

  case 10:
#line 196 "perly.y"
    {   (yyval.opval) = append_list(OP_LINESEQ,
				(LISTOP*)(ps[(1) - (2)].val.opval), (LISTOP*)(ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			;}
    break;

  case 11:
#line 206 "perly.y"
    {
                            (yyval.opval) = newSTATEOP(0, NULL, (ps[(1) - (1)].val.opval), (ps[(1) - (1)].val.opval)->op_location);
                        ;}
    break;

  case 12:
#line 210 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 13:
#line 212 "perly.y"
    {
                            (yyval.opval) = IF_MAD( newOP(OP_NULL, 0, LOCATION((ps[(1) - (1)].val.i_tkval))),
                                    (OP*)NULL);
                            PL_parser->copline = NOLINE;
                            TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),';');
                            APPEND_MADPROPS_PV("nullstatement",(yyval.opval),'>');
                            PL_parser->expect = XSTATE;
                        ;}
    break;

  case 14:
#line 221 "perly.y"
    {
                            SV* loc = (ps[(1) - (2)].val.opval) ? (ps[(1) - (2)].val.opval)->op_location : LOCATION((ps[(2) - (2)].val.i_tkval));
                            (yyval.opval) = newSTATEOP(0, NULL, (ps[(1) - (2)].val.opval), loc);
                            PL_parser->expect = XSTATE;
                            TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),';');
                        ;}
    break;

  case 15:
#line 231 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 16:
#line 233 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 17:
#line 235 "perly.y"
    {
                            (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval), LOCATION((ps[(2) - (3)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'i');
                            APPEND_MADPROPS_PV("modif", (yyval.opval), '>');
			;}
    break;

  case 18:
#line 241 "perly.y"
    { 
                            (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval), LOCATION((ps[(2) - (3)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'i');
                            APPEND_MADPROPS_PV("modif", (yyval.opval), '>');
			;}
    break;

  case 19:
#line 247 "perly.y"
    {
                            (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[(3) - (3)].val.opval)), (ps[(1) - (3)].val.opval), FALSE, LOCATION((ps[(2) - (3)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'w');
			;}
    break;

  case 20:
#line 252 "perly.y"
    {
                            (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[(3) - (3)].val.opval)), (ps[(1) - (3)].val.opval), TRUE, LOCATION((ps[(2) - (3)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'w');
			;}
    break;

  case 21:
#line 257 "perly.y"
    { 
                            (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval), FALSE, LOCATION((ps[(2) - (3)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'w');
			;}
    break;

  case 22:
#line 262 "perly.y"
    { (yyval.opval) = newFOROP(0, NULL, (line_t)IVAL((ps[(2) - (3)].val.i_tkval)),
					(OP*)NULL, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval), (OP*)NULL, LOCATION((ps[(2) - (3)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),((LISTOP*)(yyval.opval))->op_first->op_sibling,'w');
			;}
    break;

  case 23:
#line 270 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 24:
#line 272 "perly.y"
    { ((ps[(2) - (2)].val.opval))->op_flags |= OPf_PARENS; (yyval.opval) = scope((ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 25:
#line 276 "perly.y"
    { PL_parser->copline = (line_t)IVAL((ps[(1) - (6)].val.i_tkval));
			    (yyval.opval) = newCONDOP(0, (ps[(3) - (6)].val.opval), scope((ps[(5) - (6)].val.opval)), (ps[(6) - (6)].val.opval), LOCATION((ps[(1) - (6)].val.i_tkval)));
			    PL_hints |= HINT_BLOCK_SCOPE;
			  TOKEN_GETMAD((ps[(1) - (6)].val.i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((ps[(2) - (6)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (6)].val.i_tkval),(yyval.opval),')');
                          APPEND_MADPROPS_PV("if", (yyval.opval), '>');
			;}
    break;

  case 26:
#line 288 "perly.y"
    { PL_parser->copline = (line_t)IVAL((ps[(1) - (7)].val.i_tkval));
			    (yyval.opval) = block_end((ps[(3) - (7)].val.ionlyval),
                                newCONDOP(0, (ps[(4) - (7)].val.opval), scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval), LOCATION((ps[(1) - (7)].val.i_tkval))));
			  TOKEN_GETMAD((ps[(1) - (7)].val.i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((ps[(2) - (7)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (7)].val.i_tkval),(yyval.opval),')');
                          APPEND_MADPROPS_PV("if", (yyval.opval), '>');
			;}
    break;

  case 27:
#line 297 "perly.y"
    { PL_parser->copline = (line_t)IVAL((ps[(1) - (7)].val.i_tkval));
			    (yyval.opval) = block_end((ps[(3) - (7)].val.ionlyval),
                                newCONDOP(0, (ps[(4) - (7)].val.opval), scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval), LOCATION((ps[(1) - (7)].val.i_tkval))));
			  TOKEN_GETMAD((ps[(1) - (7)].val.i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((ps[(2) - (7)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (7)].val.i_tkval),(yyval.opval),')');
                          APPEND_MADPROPS_PV("if", (yyval.opval), '>');
			;}
    break;

  case 28:
#line 309 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 29:
#line 311 "perly.y"
    { (yyval.opval) = scope((ps[(2) - (2)].val.opval));
                            TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
                        ;}
    break;

  case 30:
#line 318 "perly.y"
    {
                            /* insert "defined $_ = " before "~< $fh" */
                            if ((ps[(5) - (6)].val.opval)->op_type == OP_READLINE) {
                                OP* mydef;
                                mydef = newOP(OP_PADSV, 0, NULL);
                                mydef->op_targ = allocmy("$_");
                                (yyval.opval) = newUNOP(OP_DEFINED, 0,
                                    newASSIGNOP(0, mydef,
                                        0, (ps[(5) - (6)].val.opval), (ps[(5) - (6)].val.opval)->op_location), (ps[(5) - (6)].val.opval)->op_location );
                            }
                            else {
                                (yyval.opval) = (ps[(5) - (6)].val.opval);
                            }
                        ;}
    break;

  case 31:
#line 333 "perly.y"
    {
                            OP *innerop;
                            PL_parser->copline = (line_t)IVAL((ps[(2) - (10)].val.i_tkval));
			    (yyval.opval) = block_end((ps[(3) - (10)].val.ionlyval),
                                newSTATEOP(0, PVAL((ps[(1) - (10)].val.p_tkval)),
                                    innerop = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
                                        LOCATION((ps[(2) - (10)].val.i_tkval)), (ps[(7) - (10)].val.opval), (ps[(9) - (10)].val.opval), (ps[(10) - (10)].val.opval), (ps[(8) - (10)].val.ionlyval)), LOCATION((ps[(2) - (10)].val.i_tkval))));
                            TOKEN_GETMAD((ps[(1) - (10)].val.p_tkval),innerop,'L');
                            TOKEN_GETMAD((ps[(2) - (10)].val.i_tkval),innerop,'W');
                            TOKEN_GETMAD((ps[(4) - (10)].val.i_tkval),innerop,'(');
                            TOKEN_GETMAD((ps[(6) - (10)].val.i_tkval),innerop,')');
			;}
    break;

  case 32:
#line 347 "perly.y"
    { OP *innerop;
                            PL_parser->copline = (line_t)IVAL((ps[(2) - (9)].val.i_tkval));
			    (yyval.opval) = block_end((ps[(4) - (9)].val.ionlyval),
				   newSTATEOP(0, PVAL((ps[(1) - (9)].val.p_tkval)),
				     innerop = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
                                         LOCATION((ps[(2) - (9)].val.i_tkval)), (ps[(5) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval), (ps[(7) - (9)].val.ionlyval)), LOCATION((ps[(2) - (9)].val.i_tkval))));
			  TOKEN_GETMAD((ps[(1) - (9)].val.p_tkval),innerop,'L');
			  TOKEN_GETMAD((ps[(2) - (9)].val.i_tkval),innerop,'W');
			  TOKEN_GETMAD((ps[(3) - (9)].val.i_tkval),innerop,'(');
			  TOKEN_GETMAD((ps[(6) - (9)].val.i_tkval),innerop,')');
			;}
    break;

  case 33:
#line 359 "perly.y"
    { OP *innerop;
			  (yyval.opval) = block_end((ps[(4) - (10)].val.ionlyval),
                              innerop = newFOROP(0, PVAL((ps[(1) - (10)].val.p_tkval)), (line_t)IVAL((ps[(2) - (10)].val.i_tkval)),
                                  (ps[(5) - (10)].val.opval), (ps[(7) - (10)].val.opval), (ps[(9) - (10)].val.opval), (ps[(10) - (10)].val.opval), LOCATION((ps[(2) - (10)].val.i_tkval))));
			  TOKEN_GETMAD((ps[(1) - (10)].val.p_tkval),((LISTOP*)innerop)->op_first,'L');
			  TOKEN_GETMAD((ps[(2) - (10)].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'W');
			  TOKEN_GETMAD((ps[(3) - (10)].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'d');
			  TOKEN_GETMAD((ps[(6) - (10)].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'(');
			  TOKEN_GETMAD((ps[(8) - (10)].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,')');
			;}
    break;

  case 34:
#line 370 "perly.y"
    { OP *innerop;
			  (yyval.opval) = block_end((ps[(3) - (9)].val.ionlyval),
			     innerop = newFOROP(0, PVAL((ps[(1) - (9)].val.p_tkval)), (line_t)IVAL((ps[(2) - (9)].val.i_tkval)),
                                 (ps[(4) - (9)].val.opval), (ps[(6) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval), LOCATION((ps[(2) - (9)].val.i_tkval))));
			  TOKEN_GETMAD((ps[(1) - (9)].val.p_tkval),((LISTOP*)innerop)->op_first,'L');
			  TOKEN_GETMAD((ps[(2) - (9)].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'W');
			  TOKEN_GETMAD((ps[(3) - (9)].val.ionlyval),((LISTOP*)innerop)->op_first->op_sibling,'(');
			  TOKEN_GETMAD((ps[(7) - (9)].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,')');
			;}
    break;

  case 35:
#line 383 "perly.y"
    { (yyval.ionlyval) = (PL_min_intro_pending &&
			    PL_max_intro_pending >=  PL_min_intro_pending);
			  intro_my(); ;}
    break;

  case 36:
#line 389 "perly.y"
    { YYSTYPE tmplval;
			  (void)scan_num("1", &tmplval);
			  (yyval.opval) = tmplval.opval; ;}
    break;

  case 38:
#line 397 "perly.y"
    { (yyval.opval) = invert(scalar((ps[(1) - (1)].val.opval))); ;}
    break;

  case 39:
#line 402 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); ;}
    break;

  case 40:
#line 406 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); ;}
    break;

  case 41:
#line 411 "perly.y"
    {
#ifdef MAD
			  (yyval.p_tkval).pval = NULL;
			  (yyval.p_tkval).madtoken = newMADTOKEN(OP_NULL, 0);
#else
			  (yyval.p_tkval).pval = NULL;
			  (yyval.p_tkval).location = NULL;
#endif
			;}
    break;

  case 43:
#line 425 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 44:
#line 427 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 45:
#line 429 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 46:
#line 431 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 47:
#line 436 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 48:
#line 440 "perly.y"
    {
                            (yyval.opval) = newOP(OP_NULL,0, LOCATION((ps[(1) - (1)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'p');
                            APPEND_MADPROPS_PV("peg",(yyval.opval),'>');
			;}
    break;

  case 49:
#line 449 "perly.y"
    { 
#ifdef MAD
			  (yyval.opval) = newMYSUB((ps[(2) - (5)].val.ionlyval), (ps[(3) - (5)].val.opval), (ps[(4) - (5)].val.opval), NULL, (ps[(5) - (5)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (5)].val.i_tkval),(yyval.opval),'d');
#else
			  newMYSUB((ps[(2) - (5)].val.ionlyval), (ps[(3) - (5)].val.opval), (ps[(4) - (5)].val.opval), NULL, (ps[(5) - (5)].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
			;}
    break;

  case 50:
#line 462 "perly.y"
    {
#ifdef MAD
                            OP* o = newSVOP(OP_ANONCODE, 0,
                                (SV*)newNAMEDSUB((ps[(2) - (5)].val.ionlyval), (ps[(3) - (5)].val.opval), (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)), LOCATION((ps[(1) - (5)].val.i_tkval)));
                            (yyval.opval) = newOP(OP_NULL,0, LOCATION((ps[(1) - (5)].val.i_tkval)));
                            op_getmad(o,(yyval.opval),'&');
                            op_getmad((ps[(3) - (5)].val.opval),(yyval.opval),'n');
                            op_getmad((ps[(4) - (5)].val.opval),(yyval.opval),'s');
                            TOKEN_GETMAD((ps[(1) - (5)].val.i_tkval),(yyval.opval),'d');
                            APPEND_MADPROPS_PV("sub", (yyval.opval), '<');
                            (ps[(5) - (5)].val.opval)->op_madprop = 0;
#else
                            CV* new = newNAMEDSUB((ps[(2) - (5)].val.ionlyval), (ps[(3) - (5)].val.opval), (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval));
                            SvREFCNT_dec(new);
                            (yyval.opval) = (OP*)NULL;
#endif
			;}
    break;

  case 51:
#line 480 "perly.y"
    {
                            CV* new = newSUB((ps[(2) - (3)].val.ionlyval), NULL, (ps[(3) - (3)].val.opval));
                            process_special_block(IVAL((ps[(1) - (3)].val.i_tkval)), new);
                            (yyval.opval) = (OP*)NULL;
                        ;}
    break;

  case 52:
#line 488 "perly.y"
    { (yyval.ionlyval) = start_subparse(0); 
                        ;}
    break;

  case 53:
#line 494 "perly.y"
    { (yyval.ionlyval) = start_subparse(CVf_ANON);
			;}
    break;

  case 54:
#line 499 "perly.y"
    {
			  (yyval.opval) = (ps[(1) - (1)].val.opval);
                        ;}
    break;

  case 55:
#line 506 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 57:
#line 511 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 58:
#line 512 "perly.y"
    {
                           (yyval.opval) = newOP(OP_NULL, 0, LOCATION((ps[(1) - (1)].val.i_tkval)) );
                           yyerror("forward subroutine declartion not allowed");
                        ;}
    break;

  case 59:
#line 519 "perly.y"
    {
#ifdef MAD
			  (yyval.opval) = package((ps[(2) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),';');
                          APPEND_MADPROPS_PV("package",(yyval.opval),'>');
#else
			  package((ps[(2) - (3)].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
			;}
    break;

  case 60:
#line 533 "perly.y"
    { 
#ifdef MAD
			  (yyval.opval) = utilize(IVAL((ps[(1) - (6)].val.i_tkval)), (ps[(2) - (6)].val.ionlyval), (ps[(3) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (6)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(6) - (6)].val.i_tkval),(yyval.opval),';');
			  if (PL_parser->rsfp_filters &&
				      AvFILLp(PL_parser->rsfp_filters) >= 0)
			      APPEND_MADPROPS_PV("sourcefilter", (yyval.opval), '!');
#else
			  utilize(IVAL((ps[(1) - (6)].val.i_tkval)), (ps[(2) - (6)].val.ionlyval), (ps[(3) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
			;}
    break;

  case 61:
#line 550 "perly.y"
    {
                            (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval), LOCATION((ps[(2) - (3)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
                            APPEND_MADPROPS_PV("operator",(yyval.opval),'>');
			;}
    break;

  case 62:
#line 556 "perly.y"
    { (yyval.opval) = newLOGOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval), LOCATION((ps[(2) - (3)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
                          APPEND_MADPROPS_PV("operator",(yyval.opval),'>');
			;}
    break;

  case 63:
#line 561 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval), LOCATION((ps[(2) - (3)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
                          APPEND_MADPROPS_PV("operator",(yyval.opval),'>');
			;}
    break;

  case 65:
#line 570 "perly.y"
    {
#ifdef MAD
			  OP* op = newNULLLIST();
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),op,',');
			  (yyval.opval) = append_elem(OP_LIST, (ps[(1) - (2)].val.opval), op);
                          APPEND_MADPROPS_PV(",", op, '>');
#else
			  (yyval.opval) = (ps[(1) - (2)].val.opval);
#endif
			;}
    break;

  case 66:
#line 581 "perly.y"
    { 
			  OP* term = (ps[(3) - (3)].val.opval);
			  DO_MAD(
			      term = newUNOP(OP_NULL, 0, term, LOCATION((ps[(2) - (3)].val.i_tkval)));
			      TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),term,',');
                              APPEND_MADPROPS_PV(",", term, '>');
			  )
			  (yyval.opval) = append_elem(OP_LIST, (ps[(1) - (3)].val.opval), term);
			;}
    break;

  case 68:
#line 595 "perly.y"
    { 
                            (yyval.opval) = convert(IVAL((ps[(1) - (3)].val.i_tkval)), OPf_STACKED,
                                prepend_elem(OP_LIST, newGVREF(IVAL((ps[(1) - (3)].val.i_tkval)),(ps[(2) - (3)].val.opval), LOCATION((ps[(1) - (3)].val.i_tkval))), (ps[(3) - (3)].val.opval)), LOCATION((ps[(1) - (3)].val.i_tkval)) );
                            TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 69:
#line 601 "perly.y"
    { (yyval.opval) = convert(IVAL((ps[(1) - (5)].val.i_tkval)), OPf_STACKED,
				prepend_elem(OP_LIST, newGVREF(IVAL((ps[(1) - (5)].val.i_tkval)),(ps[(3) - (5)].val.opval), LOCATION((ps[(1) - (5)].val.i_tkval))), (ps[(4) - (5)].val.opval)), LOCATION((ps[(1) - (5)].val.i_tkval)) );
			  TOKEN_GETMAD((ps[(1) - (5)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),')');
                          APPEND_MADPROPS_PV("func", (yyval.opval), '>');
			;}
    break;

  case 70:
#line 609 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, scalar((ps[(1) - (6)].val.opval)), (ps[(5) - (6)].val.opval)),
				    newUNOP(OP_METHOD, 0, (ps[(3) - (6)].val.opval), (ps[(3) - (6)].val.opval)->op_location)), (ps[(3) - (6)].val.opval)->op_location);
			  TOKEN_GETMAD((ps[(2) - (6)].val.i_tkval),(yyval.opval),'A');
			  TOKEN_GETMAD((ps[(4) - (6)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(6) - (6)].val.i_tkval),(yyval.opval),')');
                          APPEND_MADPROPS_PV("method", (yyval.opval), '>');
			;}
    break;

  case 71:
#line 619 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST, scalar((ps[(1) - (3)].val.opval)),
				    newUNOP(OP_METHOD, 0, (ps[(3) - (3)].val.opval), (ps[(3) - (3)].val.opval)->op_location)), (ps[(3) - (3)].val.opval)->op_location);
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'A');
                          APPEND_MADPROPS_PV("method", (yyval.opval), '>');
			;}
    break;

  case 72:
#line 626 "perly.y"
    {
                            (yyval.opval) = convert(IVAL((ps[(1) - (2)].val.i_tkval)), 0, (ps[(2) - (2)].val.opval), LOCATION((ps[(1) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
                            APPEND_MADPROPS_PV("listop", (yyval.opval), '>');
			;}
    break;

  case 73:
#line 632 "perly.y"
    {
                            (yyval.opval) = newANONLIST((ps[(2) - (2)].val.opval), LOCATION((ps[(1) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'[');
			;}
    break;

  case 74:
#line 637 "perly.y"
    {
                            (yyval.opval) = convert(OP_ANONSCALAR, 0, scalar((ps[(2) - (2)].val.opval)), LOCATION((ps[(1) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'[');
			;}
    break;

  case 75:
#line 642 "perly.y"
    { 
                            (yyval.opval) = convert(IVAL((ps[(1) - (4)].val.i_tkval)), 0, (ps[(3) - (4)].val.opval), LOCATION((ps[(1) - (4)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'o');
                            TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'(');
                            TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
                            APPEND_MADPROPS_PV("func", (yyval.opval), '>');
			;}
    break;

  case 76:
#line 650 "perly.y"
    {
			  (yyval.opval) = newANONSUB((ps[(2) - (3)].val.ionlyval), 0, (ps[(3) - (3)].val.opval)); ;}
    break;

  case 77:
#line 653 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 append_elem(OP_LIST,
                                     prepend_elem(OP_LIST, (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)), (ps[(1) - (5)].val.opval)), (ps[(1) - (5)].val.opval)->op_location);
                          APPEND_MADPROPS_PV("listop", (yyval.opval), '>');
			;}
    break;

  case 80:
#line 669 "perly.y"
    {
                            (yyval.opval) = newBINOP(OP_GELEM, 0, (ps[(1) - (5)].val.opval), scalar((ps[(3) - (5)].val.opval)), (ps[(1) - (5)].val.opval)->op_location);
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (5)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 81:
#line 677 "perly.y"
    {
                            (yyval.opval) = newAVREF((ps[(1) - (2)].val.opval), LOCATION((ps[(2) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),'a');
                        ;}
    break;

  case 82:
#line 682 "perly.y"
    {
                            (yyval.opval) = newSVREF((ps[(1) - (2)].val.opval), LOCATION((ps[(2) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),'a');
                        ;}
    break;

  case 83:
#line 687 "perly.y"
    {
                            (yyval.opval) = newHVREF((ps[(1) - (2)].val.opval), LOCATION((ps[(2) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),'a');
                        ;}
    break;

  case 84:
#line 692 "perly.y"
    {
                            (yyval.opval) = newGVREF(0, (ps[(1) - (2)].val.opval), LOCATION((ps[(2) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),'a');
                        ;}
    break;

  case 85:
#line 697 "perly.y"
    {
                            (yyval.opval) = newCVREF(0, (ps[(1) - (2)].val.opval), LOCATION((ps[(2) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),'a');
                        ;}
    break;

  case 86:
#line 702 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0, scalar((ps[(1) - (4)].val.opval)), scalar((ps[(3) - (4)].val.opval)), LOCATION((ps[(2) - (4)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 87:
#line 707 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
                                ref(newAVREF((ps[(1) - (5)].val.opval), LOCATION((ps[(2) - (5)].val.i_tkval))),OP_RV2AV),
                                scalar((ps[(4) - (5)].val.opval)), LOCATION((ps[(3) - (5)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[(3) - (5)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 88:
#line 715 "perly.y"
    { (yyval.opval) = prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0, LOCATION((ps[(3) - (7)].val.i_tkval))),
                                newLISTOP(OP_HSLICE, 0,
                                    scalar((ps[(4) - (7)].val.opval)),
                                    ref(newHVREF((ps[(1) - (7)].val.opval), LOCATION((ps[(2) - (7)].val.i_tkval))), OP_HSLICE), LOCATION((ps[(3) - (7)].val.i_tkval))));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[(2) - (7)].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[(3) - (7)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(5) - (7)].val.i_tkval),(yyval.opval),'j');
			  TOKEN_GETMAD((ps[(6) - (7)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(7) - (7)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 89:
#line 728 "perly.y"
    { (yyval.opval) = prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0, LOCATION((ps[(3) - (6)].val.i_tkval))),
				    newLISTOP(OP_ASLICE, 0,
					scalar((ps[(4) - (6)].val.opval)),
					ref(newAVREF((ps[(1) - (6)].val.opval), LOCATION((ps[(2) - (6)].val.i_tkval))), OP_ASLICE), LOCATION((ps[(3) - (6)].val.i_tkval))));
			  TOKEN_GETMAD((ps[(2) - (6)].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[(3) - (6)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(5) - (6)].val.i_tkval),(yyval.opval),'j');
			  TOKEN_GETMAD((ps[(6) - (6)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 90:
#line 739 "perly.y"
    { (yyval.opval) = prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0, LOCATION((ps[(2) - (6)].val.i_tkval))),
				    newLISTOP(OP_HSLICE, 0,
					scalar((ps[(3) - (6)].val.opval)),
					ref((ps[(1) - (6)].val.opval), OP_HSLICE), LOCATION((ps[(2) - (6)].val.i_tkval))));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[(2) - (6)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (6)].val.i_tkval),(yyval.opval),'j');
			  TOKEN_GETMAD((ps[(5) - (6)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(6) - (6)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 91:
#line 751 "perly.y"
    { (yyval.opval) = prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0, LOCATION((ps[(2) - (5)].val.i_tkval))),
				    newLISTOP(OP_ASLICE, 0,
					scalar((ps[(3) - (5)].val.opval)),
					ref((ps[(1) - (5)].val.opval), OP_HSLICE), LOCATION((ps[(2) - (5)].val.i_tkval))));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[(4) - (5)].val.i_tkval),(yyval.opval),'j');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 92:
#line 762 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0, (ps[(1) - (5)].val.opval), scalar((ps[(3) - (5)].val.opval)), LOCATION((ps[(2) - (5)].val.i_tkval)));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(4) - (5)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 93:
#line 769 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
                                ref(newHVREF((ps[(1) - (6)].val.opval), LOCATION((ps[(2) - (6)].val.i_tkval))),OP_RV2HV),
                                scalar((ps[(4) - (6)].val.opval)), LOCATION((ps[(3) - (6)].val.i_tkval)));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[(2) - (6)].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[(3) - (6)].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[(5) - (6)].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[(6) - (6)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 94:
#line 779 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
                                newCVREF(0, scalar((ps[(1) - (4)].val.opval)), LOCATION((ps[(2) - (4)].val.i_tkval))), LOCATION((ps[(2) - (4)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[(3) - (4)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 95:
#line 786 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   append_elem(OP_LIST, (ps[(4) - (5)].val.opval),
				       newCVREF(0, scalar((ps[(1) - (5)].val.opval)), LOCATION((ps[(2) - (5)].val.i_tkval)))), LOCATION((ps[(2) - (5)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[(3) - (5)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(5) - (5)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 96:
#line 797 "perly.y"
    { 
                            (yyval.opval) = newASSIGNOP(OPf_STACKED, (ps[(1) - (3)].val.opval), IVAL((ps[(2) - (3)].val.i_tkval)), (ps[(3) - (3)].val.opval), LOCATION((ps[(2) - (3)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
                            APPEND_MADPROPS_PV("operator",(yyval.opval),'>');
			;}
    break;

  case 97:
#line 803 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)), LOCATION((ps[(2) - (3)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
                          APPEND_MADPROPS_PV("operator",(yyval.opval),'>');
			;}
    break;

  case 98:
#line 808 "perly.y"
    {   if (IVAL((ps[(2) - (3)].val.i_tkval)) != OP_REPEAT)
				scalar((ps[(1) - (3)].val.opval));
			    (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, (ps[(1) - (3)].val.opval), scalar((ps[(3) - (3)].val.opval)), LOCATION((ps[(2) - (3)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
                          APPEND_MADPROPS_PV("operator",(yyval.opval),'>');
			;}
    break;

  case 99:
#line 815 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)), LOCATION((ps[(2) - (3)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
                          APPEND_MADPROPS_PV("operator",(yyval.opval),'>');
			;}
    break;

  case 100:
#line 820 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)), LOCATION((ps[(2) - (3)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
                          APPEND_MADPROPS_PV("operator",(yyval.opval),'>');
			;}
    break;

  case 101:
#line 825 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)), LOCATION((ps[(2) - (3)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
                          APPEND_MADPROPS_PV("operator",(yyval.opval),'>');
			;}
    break;

  case 102:
#line 830 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)), LOCATION((ps[(2) - (3)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
                          APPEND_MADPROPS_PV("operator",(yyval.opval),'>');
			;}
    break;

  case 103:
#line 835 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)), LOCATION((ps[(2) - (3)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
                          APPEND_MADPROPS_PV("operator",(yyval.opval),'>');
			;}
    break;

  case 104:
#line 840 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[(2) - (3)].val.i_tkval)), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)), LOCATION((ps[(2) - (3)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
                          APPEND_MADPROPS_PV("operator",(yyval.opval),'>');
			;}
    break;

  case 105:
#line 845 "perly.y"
    {
			  (yyval.opval) = newRANGE(IVAL((ps[(2) - (3)].val.i_tkval)), scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval)));
			  DO_MAD({
			      UNOP *op;
			      op = (UNOP*)(yyval.opval);
			      op = (UNOP*)op->op_first;	/* get to flop */
			      op = (UNOP*)op->op_first;	/* get to flip */
			      op = (UNOP*)op->op_first;	/* get to range */
			      TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(OP*)op,'o');
			    })
			;}
    break;

  case 106:
#line 857 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval), LOCATION((ps[(2) - (3)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
                          APPEND_MADPROPS_PV("operator",(yyval.opval),'>');
			;}
    break;

  case 107:
#line 862 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval), LOCATION((ps[(2) - (3)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
                          APPEND_MADPROPS_PV("operator",(yyval.opval),'>');
			;}
    break;

  case 108:
#line 867 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval), LOCATION((ps[(2) - (3)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'o');
                          APPEND_MADPROPS_PV("operator",(yyval.opval),'>');
			;}
    break;

  case 109:
#line 872 "perly.y"
    { (yyval.opval) = bind_match(IVAL((ps[(2) - (3)].val.i_tkval)), (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),
				((yyval.opval)->op_type == OP_NOT
				    ? ((UNOP*)(yyval.opval))->op_first : (yyval.opval)),
				'~');
                          APPEND_MADPROPS_PV("bind_match",
				((yyval.opval)->op_type == OP_NOT
				    ? ((UNOP*)(yyval.opval))->op_first : (yyval.opval)),
                                             '>');
			;}
    break;

  case 110:
#line 886 "perly.y"
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((ps[(2) - (2)].val.opval)), LOCATION((ps[(1) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 111:
#line 890 "perly.y"
    { (yyval.opval) = IF_MAD(
                                newUNOP(OP_NULL, 0, (ps[(2) - (2)].val.opval), LOCATION((ps[(1) - (2)].val.i_tkval))),
				    (ps[(2) - (2)].val.opval)
				);
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'+');
                          APPEND_MADPROPS_PV("unary+",(yyval.opval),'>');
			;}
    break;

  case 112:
#line 898 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval)), LOCATION((ps[(1) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 113:
#line 902 "perly.y"
    { (yyval.opval) = newUNOP(OP_COMPLEMENT, 0, scalar((ps[(2) - (2)].val.opval)), LOCATION((ps[(1) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 114:
#line 906 "perly.y"
    { (yyval.opval) = newUNOP(OP_EXPAND, 0, scalar((ps[(2) - (2)].val.opval)), LOCATION((ps[(1) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 115:
#line 910 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTINC, 0,
                                mod(scalar((ps[(1) - (2)].val.opval)), OP_POSTINC), LOCATION((ps[(2) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 116:
#line 915 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTDEC, 0,
                                mod(scalar((ps[(1) - (2)].val.opval)), OP_POSTDEC), LOCATION((ps[(2) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 117:
#line 920 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
                                mod(scalar((ps[(2) - (2)].val.opval)), OP_PREINC), LOCATION((ps[(1) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 118:
#line 925 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
                                mod(scalar((ps[(2) - (2)].val.opval)), OP_PREDEC), LOCATION((ps[(1) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 119:
#line 935 "perly.y"
    {
			  (yyval.opval) = newANONSUB((ps[(2) - (4)].val.ionlyval), (ps[(3) - (4)].val.opval), (ps[(4) - (4)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'o');
			  OP_GETMAD((ps[(3) - (4)].val.opval),(yyval.opval),'s');
			;}
    break;

  case 120:
#line 945 "perly.y"
    { 
                            (yyval.opval) = dofile((ps[(2) - (2)].val.opval), IVAL((ps[(1) - (2)].val.i_tkval)), LOCATION((ps[(1) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 121:
#line 950 "perly.y"
    {
                            (yyval.opval) = newSTATEOP(0, NULL,
                                scope(newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
                                        LOCATION((ps[(1) - (2)].val.i_tkval)), (OP*)NULL, (ps[(2) - (2)].val.opval), NULL, 0)),
                                LOCATION((ps[(1) - (2)].val.i_tkval)));
                            (yyval.opval) = scope((yyval.opval));
                        ;}
    break;

  case 122:
#line 958 "perly.y"
    {
                            (yyval.opval) = newSTATEOP(0, PVAL((ps[(1) - (3)].val.p_tkval)),
                                scope(newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
                                        LOCATION((ps[(2) - (3)].val.i_tkval)), (OP*)NULL, (ps[(3) - (3)].val.opval), NULL, 0)),
                                LOCATION((ps[(2) - (3)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (3)].val.p_tkval),(yyval.opval),'L');
			;}
    break;

  case 127:
#line 972 "perly.y"
    { 
                            (yyval.opval) = newCONDOP(0, (ps[(1) - (5)].val.opval), (ps[(3) - (5)].val.opval), (ps[(5) - (5)].val.opval), LOCATION((ps[(2) - (5)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(2) - (5)].val.i_tkval),(yyval.opval),'?');
                            TOKEN_GETMAD((ps[(4) - (5)].val.i_tkval),(yyval.opval),':');
                            APPEND_MADPROPS_PV("?",(yyval.opval),'>');
			;}
    break;

  case 128:
#line 979 "perly.y"
    { (yyval.opval) = newUNOP(OP_SREFGEN, 0, mod(scalar((ps[(2) - (2)].val.opval)),OP_SREFGEN), LOCATION((ps[(1) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
                          APPEND_MADPROPS_PV("operator",(yyval.opval),'>');
			;}
    break;

  case 129:
#line 984 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 130:
#line 986 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),IVAL((ps[(1) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'k');
			;}
    break;

  case 131:
#line 990 "perly.y"
    {
                            (yyval.opval) = sawparens(IF_MAD(newUNOP(OP_NULL,0,(ps[(2) - (3)].val.opval), LOCATION((ps[(1) - (3)].val.i_tkval))), (ps[(2) - (3)].val.opval)));
                            APPEND_MADPROPS_PV("(", (yyval.opval), '>');
                            TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'(');
                            TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 132:
#line 997 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST());
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 133:
#line 1002 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 134:
#line 1004 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 135:
#line 1006 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 136:
#line 1008 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 137:
#line 1010 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 138:
#line 1012 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 139:
#line 1014 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[(1) - (1)].val.opval)), (ps[(1) - (1)].val.opval)->op_location);
                              APPEND_MADPROPS_PV("amper", (yyval.opval), '>');
                        ;}
    break;

  case 140:
#line 1018 "perly.y"
    {
                            (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (3)].val.opval)), (ps[(1) - (3)].val.opval)->op_location);
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
                          APPEND_MADPROPS_PV("amper", (yyval.opval), '>');
			;}
    break;

  case 141:
#line 1025 "perly.y"
    {
			  (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST, (ps[(3) - (4)].val.opval), scalar((ps[(1) - (4)].val.opval))), (ps[(1) - (4)].val.opval)->op_location);
			  DO_MAD({
			      OP* op = (yyval.opval);
			      if (op->op_type == OP_CONST) { /* defeat const fold */
				op = (OP*)op->op_madprop->mad_val;
			      }
			      TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),op,'(');
			      TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),op,')');
                              APPEND_MADPROPS_PV("amper", (yyval.opval), '>');
			  })
			;}
    break;

  case 142:
#line 1039 "perly.y"
    { 
                          (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
                              append_elem(OP_LIST, (ps[(3) - (3)].val.opval), scalar((ps[(2) - (3)].val.opval))), (ps[(2) - (3)].val.opval)->op_location);
			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'o');
                          APPEND_MADPROPS_PV("noamp", (yyval.opval), '>');
			;}
    break;

  case 143:
#line 1046 "perly.y"
    {
                            (yyval.opval) = newOP(IVAL((ps[(1) - (1)].val.i_tkval)), OPf_SPECIAL, LOCATION((ps[(1) - (1)].val.i_tkval)));
			    PL_hints |= HINT_BLOCK_SCOPE;
                            TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 144:
#line 1052 "perly.y"
    { (yyval.opval) = newLOOPEX(IVAL((ps[(1) - (2)].val.i_tkval)),(ps[(2) - (2)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 145:
#line 1056 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval)), LOCATION((ps[(1) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 146:
#line 1060 "perly.y"
    { 
                            (yyval.opval) = newOP(IVAL((ps[(1) - (1)].val.i_tkval)), 0, LOCATION((ps[(1) - (1)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'o');
                            APPEND_MADPROPS_PV("uniop", (yyval.opval), '>');
			;}
    break;

  case 147:
#line 1066 "perly.y"
    { (yyval.opval) = newUNOP(IVAL((ps[(1) - (2)].val.i_tkval)), 0, (ps[(2) - (2)].val.opval), LOCATION((ps[(1) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
                          APPEND_MADPROPS_PV("uniop", (yyval.opval), '>');
			;}
    break;

  case 148:
#line 1071 "perly.y"
    {
                            (yyval.opval) = newUNOP(IVAL((ps[(1) - (2)].val.i_tkval)), 0, (ps[(2) - (2)].val.opval), LOCATION((ps[(1) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
                            APPEND_MADPROPS_PV("uniop", (yyval.opval), '>');
			;}
    break;

  case 149:
#line 1077 "perly.y"
    {
                            (yyval.opval) = newOP(OP_REQUIRE, IVAL((ps[(1) - (1)].val.i_tkval)) ? OPf_SPECIAL : 0, LOCATION((ps[(1) - (1)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 150:
#line 1082 "perly.y"
    { (yyval.opval) = newUNOP(OP_REQUIRE, IVAL((ps[(1) - (2)].val.i_tkval)) ? OPf_SPECIAL : 0, (ps[(2) - (2)].val.opval), LOCATION((ps[(1) - (2)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 151:
#line 1086 "perly.y"
    { 
                            (yyval.opval) = newBINOP(OP_COMPSUB, 0, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval), (ps[(1) - (2)].val.opval)->op_location);
			;}
    break;

  case 152:
#line 1090 "perly.y"
    { 
                            (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval)), (ps[(1) - (1)].val.opval)->op_location); 
                            APPEND_MADPROPS_PV("uniop", (yyval.opval), '>');
                        ;}
    break;

  case 153:
#line 1095 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, (ps[(2) - (2)].val.opval), scalar((ps[(1) - (2)].val.opval))), (ps[(1) - (2)].val.opval)->op_location);
                          APPEND_MADPROPS_PV("uniop", (yyval.opval), '>');
                        ;}
    break;

  case 154:
#line 1100 "perly.y"
    { 
                            (yyval.opval) = newOP(IVAL((ps[(1) - (1)].val.i_tkval)), 0, LOCATION((ps[(1) - (1)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (1)].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 155:
#line 1105 "perly.y"
    {
                            (yyval.opval) = newOP(IVAL((ps[(1) - (3)].val.i_tkval)), 0, LOCATION((ps[(1) - (3)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'o');
                            TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'(');
                            TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 156:
#line 1112 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				scalar((ps[(1) - (1)].val.opval)), (ps[(1) - (1)].val.opval)->op_location); ;}
    break;

  case 157:
#line 1115 "perly.y"
    { (yyval.opval) = (IVAL((ps[(1) - (3)].val.i_tkval)) == OP_NOT)
                                ? newUNOP(IVAL((ps[(1) - (3)].val.i_tkval)), 0, newSVOP(OP_CONST, 0, newSViv(0), LOCATION((ps[(1) - (3)].val.i_tkval))), LOCATION((ps[(1) - (3)].val.i_tkval)))
                                : newOP(IVAL((ps[(1) - (3)].val.i_tkval)), OPf_SPECIAL, LOCATION((ps[(1) - (3)].val.i_tkval)));

			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(2) - (3)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
                          APPEND_MADPROPS_PV("func1", (yyval.opval), '>');
			;}
    break;

  case 158:
#line 1125 "perly.y"
    { (yyval.opval) = newUNOP(IVAL((ps[(1) - (4)].val.i_tkval)), 0, (ps[(3) - (4)].val.opval), LOCATION((ps[(1) - (4)].val.i_tkval)));
			  TOKEN_GETMAD((ps[(1) - (4)].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
                          APPEND_MADPROPS_PV("func1", (yyval.opval), '>');
			;}
    break;

  case 159:
#line 1132 "perly.y"
    { (yyval.opval) = pmruntime((ps[(1) - (4)].val.opval), (ps[(3) - (4)].val.opval), 1);
			  TOKEN_GETMAD((ps[(2) - (4)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(4) - (4)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 162:
#line 1142 "perly.y"
    { 
                            (yyval.opval) = localize((ps[(2) - (2)].val.opval),IVAL((ps[(1) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'d');
			;}
    break;

  case 163:
#line 1150 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval));
			  TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 164:
#line 1155 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST());
			  TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 165:
#line 1160 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 166:
#line 1162 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 167:
#line 1164 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 168:
#line 1168 "perly.y"
    { 
                            (yyval.opval) = newOP(OP_PADSV, 0, NULL);
                            (yyval.opval)->op_targ = allocmy("$_");
                        ;}
    break;

  case 169:
#line 1175 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 170:
#line 1177 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 171:
#line 1181 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 172:
#line 1183 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;

  case 173:
#line 1185 "perly.y"
    {
#ifdef MAD
			  OP* op = newNULLLIST();
			  TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),op,',');
			  (yyval.opval) = append_elem(OP_LIST, (ps[(1) - (2)].val.opval), op);
                          APPEND_MADPROPS_PV(",", op, '>');
#else
			  (yyval.opval) = (ps[(1) - (2)].val.opval);
#endif

			;}
    break;

  case 174:
#line 1201 "perly.y"
    { PL_parser->in_my = 0; (yyval.opval) = my((ps[(1) - (1)].val.opval)); ;}
    break;

  case 175:
#line 1205 "perly.y"
    { 
                            (yyval.opval) = newCVREF(IVAL((ps[(1) - (2)].val.i_tkval)),(ps[(2) - (2)].val.opval), LOCATION((ps[(1) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'&');
			;}
    break;

  case 176:
#line 1212 "perly.y"
    { 
                            (yyval.opval) = newSVREF((ps[(2) - (2)].val.opval), LOCATION((ps[(1) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'$');
			;}
    break;

  case 177:
#line 1217 "perly.y"
    { 
                            (yyval.opval) = convert(OP_ANONSCALAR, 0, scalar((ps[(2) - (3)].val.opval)), LOCATION((ps[(1) - (3)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'[');
                            TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),']');

                            if (PL_parser->lex_brackets <= 0)
                                yyerror("Unmatched right paren");
                            else
                                --PL_parser->lex_brackets;

                            if (PL_parser->lex_state == LEX_INTERPNORMAL) {
                                if ( PL_parser->lex_brackets == 0 )
                                    PL_parser->lex_state = LEX_INTERPEND;
                            }
			;}
    break;

  case 178:
#line 1236 "perly.y"
    { 
                            (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval), LOCATION((ps[(1) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'@');
			;}
    break;

  case 179:
#line 1241 "perly.y"
    {
                            (yyval.opval) = newANONLIST((ps[(2) - (3)].val.opval), LOCATION((ps[(1) - (3)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'[');
                            TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 180:
#line 1247 "perly.y"
    {
                            (yyval.opval) = newANONLIST((OP*)NULL, LOCATION((ps[(1) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'[');
                            TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 181:
#line 1255 "perly.y"
    {
                            (yyval.opval) = newHVREF((ps[(2) - (2)].val.opval), LOCATION((ps[(1) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'%');
			;}
    break;

  case 182:
#line 1260 "perly.y"
    { 
                            (yyval.opval) = newANONHASH((ps[(2) - (3)].val.opval), LOCATION((ps[(1) - (3)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (3)].val.i_tkval),(yyval.opval),'{');
                            TOKEN_GETMAD((ps[(3) - (3)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 183:
#line 1266 "perly.y"
    { 
                            (yyval.opval) = newANONHASH((OP*)NULL, LOCATION((ps[(1) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'{');
                            TOKEN_GETMAD((ps[(2) - (2)].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 184:
#line 1274 "perly.y"
    {
                            (yyval.opval) = newGVREF(0,(ps[(2) - (2)].val.opval), LOCATION((ps[(1) - (2)].val.i_tkval)));
                            TOKEN_GETMAD((ps[(1) - (2)].val.i_tkval),(yyval.opval),'*');
			;}
    break;

  case 185:
#line 1282 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); ;}
    break;

  case 186:
#line 1284 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); ;}
    break;

  case 187:
#line 1286 "perly.y"
    { (yyval.opval) = scope((ps[(1) - (1)].val.opval)); ;}
    break;

  case 188:
#line 1289 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); ;}
    break;


/* Line 1267 of yacc.c.  */

      default: break;
    
