case 2:
#line 133 "perly.y"
    { (yyval.ival) = (yyvsp[(1) - (2)].ival); newPROG(block_end((yyvsp[(1) - (2)].ival),(yyvsp[(2) - (2)].opval))); ;}
    break;

  case 3:
#line 138 "perly.y"
    { if (PL_copline > (line_t)IVAL((yyvsp[(1) - (4)].i_tkval)))
			      PL_copline = (line_t)IVAL((yyvsp[(1) - (4)].i_tkval));
			  (yyval.opval) = block_end((yyvsp[(2) - (4)].ival), (yyvsp[(3) - (4)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (4)].i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((yyvsp[(4) - (4)].i_tkval),(yyval.opval),'}');
			;}
    break;

  case 4:
#line 147 "perly.y"
    { (yyval.ival) = block_start(TRUE); ;}
    break;

  case 5:
#line 151 "perly.y"
    { (yyval.ival) = (I32) allocmy("$_"); ;}
    break;

  case 6:
#line 155 "perly.y"
    {
		    PL_expect = XSTATE; (yyval.ival) = block_start(TRUE);
		;}
    break;

  case 7:
#line 162 "perly.y"
    { if (PL_copline > (line_t)IVAL((yyvsp[(1) - (4)].i_tkval)))
			      PL_copline = (line_t)IVAL((yyvsp[(1) - (4)].i_tkval));
			  (yyval.opval) = block_end((yyvsp[(2) - (4)].ival), (yyvsp[(3) - (4)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (4)].i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((yyvsp[(4) - (4)].i_tkval),(yyval.opval),'}');
			;}
    break;

  case 8:
#line 171 "perly.y"
    { (yyval.ival) = block_start(FALSE); ;}
    break;

  case 9:
#line 175 "perly.y"
    { (yyval.ival) = PL_savestack_ix; ;}
    break;

  case 10:
#line 179 "perly.y"
    { (yyval.opval) = Nullop; ;}
    break;

  case 11:
#line 181 "perly.y"
    {
			(yyval.opval) = IF_MAD(
				append_list(OP_LINESEQ,
			    	    (LISTOP*)(yyvsp[(1) - (2)].opval), (LISTOP*)(yyvsp[(2) - (2)].opval)),
				(yyvsp[(1) - (2)].opval));
			;}
    break;

  case 12:
#line 188 "perly.y"
    {   LEAVE_SCOPE((yyvsp[(2) - (3)].ival));
			    (yyval.opval) = append_list(OP_LINESEQ,
				(LISTOP*)(yyvsp[(1) - (3)].opval), (LISTOP*)(yyvsp[(3) - (3)].opval));
			    PL_pad_reset_pending = TRUE;
			    if ((yyvsp[(1) - (3)].opval) && (yyvsp[(3) - (3)].opval)) PL_hints |= HINT_BLOCK_SCOPE; ;}
    break;

  case 13:
#line 197 "perly.y"
    { (yyval.opval) = newSTATEOP(0, PVAL((yyvsp[(1) - (2)].p_tkval)), (yyvsp[(2) - (2)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].p_tkval),((LISTOP*)(yyval.opval))->op_first,'L'); ;}
    break;

  case 15:
#line 201 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 16:
#line 203 "perly.y"
    { (yyval.opval) = newSTATEOP(0, PVAL((yyvsp[(1) - (2)].p_tkval)), (yyvsp[(2) - (2)].opval)); ;}
    break;

  case 17:
#line 205 "perly.y"
    {
			  if (PVAL((yyvsp[(1) - (2)].p_tkval))) {
			      (yyval.opval) = newSTATEOP(0, PVAL((yyvsp[(1) - (2)].p_tkval)), newOP(OP_NULL, 0));
			      TOKEN_GETMAD((yyvsp[(1) - (2)].p_tkval),(yyval.opval),'L');
			      TOKEN_GETMAD((yyvsp[(2) - (2)].i_tkval),((LISTOP*)(yyval.opval))->op_first,';');
			  }
			  else {
			      (yyval.opval) = IF_MAD(
					newOP(OP_NULL, 0),
					Nullop);
                              PL_copline = NOLINE;
			      TOKEN_FREE((yyvsp[(1) - (2)].p_tkval));
			      TOKEN_GETMAD((yyvsp[(2) - (2)].i_tkval),(yyval.opval),';');
			  }
			  PL_expect = XSTATE;
			;}
    break;

  case 18:
#line 222 "perly.y"
    {
			  (yyval.opval) = newSTATEOP(0, PVAL((yyvsp[(1) - (3)].p_tkval)), (yyvsp[(2) - (3)].opval));
			  PL_expect = XSTATE;
			  DO_MAD(
			      /* sideff might already have a nexstate */
			      OP* op = ((LISTOP*)(yyval.opval))->op_first;
			      if (op) {
				  while (op->op_sibling &&
				     op->op_sibling->op_type == OP_NEXTSTATE)
					op = op->op_sibling;
				  token_getmad((yyvsp[(1) - (3)].p_tkval),op,'L');
				  token_getmad((yyvsp[(3) - (3)].i_tkval),op,';');
			      }
			  )
			;}
    break;

  case 19:
#line 241 "perly.y"
    { (yyval.opval) = Nullop; ;}
    break;

  case 20:
#line 243 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 21:
#line 245 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (yyvsp[(3) - (3)].opval), (yyvsp[(1) - (3)].opval));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'i');
			;}
    break;

  case 22:
#line 249 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (yyvsp[(3) - (3)].opval), (yyvsp[(1) - (3)].opval));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'i');
			;}
    break;

  case 23:
#line 253 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((yyvsp[(3) - (3)].opval)), (yyvsp[(1) - (3)].opval));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'w');
			;}
    break;

  case 24:
#line 257 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (yyvsp[(3) - (3)].opval), (yyvsp[(1) - (3)].opval));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'w');
			;}
    break;

  case 25:
#line 261 "perly.y"
    { (yyval.opval) = newFOROP(0, Nullch, (line_t)IVAL((yyvsp[(2) - (3)].i_tkval)),
					Nullop, (yyvsp[(3) - (3)].opval), (yyvsp[(1) - (3)].opval), Nullop);
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),((LISTOP*)(yyval.opval))->op_first->op_sibling,'w');
			;}
    break;

  case 26:
#line 269 "perly.y"
    { (yyval.opval) = Nullop; ;}
    break;

  case 27:
#line 271 "perly.y"
    { ((yyvsp[(2) - (2)].opval))->op_flags |= OPf_PARENS; (yyval.opval) = scope((yyvsp[(2) - (2)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 28:
#line 275 "perly.y"
    { PL_copline = (line_t)IVAL((yyvsp[(1) - (6)].i_tkval));
			    (yyval.opval) = newCONDOP(0, (yyvsp[(3) - (6)].opval), scope((yyvsp[(5) - (6)].opval)), (yyvsp[(6) - (6)].opval));
			    PL_hints |= HINT_BLOCK_SCOPE;
			  TOKEN_GETMAD((yyvsp[(1) - (6)].i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((yyvsp[(2) - (6)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(4) - (6)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 29:
#line 286 "perly.y"
    { PL_copline = (line_t)IVAL((yyvsp[(1) - (7)].i_tkval));
			    (yyval.opval) = block_end((yyvsp[(3) - (7)].ival),
				   newCONDOP(0, (yyvsp[(4) - (7)].opval), scope((yyvsp[(6) - (7)].opval)), (yyvsp[(7) - (7)].opval)));
			  TOKEN_GETMAD((yyvsp[(1) - (7)].i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((yyvsp[(2) - (7)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(5) - (7)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 30:
#line 294 "perly.y"
    { PL_copline = (line_t)IVAL((yyvsp[(1) - (7)].i_tkval));
			    (yyval.opval) = block_end((yyvsp[(3) - (7)].ival),
				   newCONDOP(0, (yyvsp[(4) - (7)].opval), scope((yyvsp[(6) - (7)].opval)), (yyvsp[(7) - (7)].opval)));
			  TOKEN_GETMAD((yyvsp[(1) - (7)].i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((yyvsp[(2) - (7)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(5) - (7)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 31:
#line 305 "perly.y"
    { (yyval.opval) = block_end((yyvsp[(3) - (6)].ival),
		newWHENOP((yyvsp[(4) - (6)].opval), scope((yyvsp[(6) - (6)].opval)))); ;}
    break;

  case 32:
#line 308 "perly.y"
    { (yyval.opval) = newWHENOP(0, scope((yyvsp[(2) - (2)].opval))); ;}
    break;

  case 33:
#line 313 "perly.y"
    { (yyval.opval) = Nullop; ;}
    break;

  case 34:
#line 315 "perly.y"
    { (yyval.opval) = scope((yyvsp[(2) - (2)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 35:
#line 322 "perly.y"
    { OP *innerop;
			  PL_copline = (line_t)(yyvsp[(2) - (9)].i_tkval);
			    (yyval.opval) = block_end((yyvsp[(4) - (9)].ival),
				   newSTATEOP(0, PVAL((yyvsp[(1) - (9)].p_tkval)),
				     innerop = newWHILEOP(0, 1, (LOOP*)Nullop,
						IVAL((yyvsp[(2) - (9)].i_tkval)), (yyvsp[(5) - (9)].opval), (yyvsp[(8) - (9)].opval), (yyvsp[(9) - (9)].opval), (yyvsp[(7) - (9)].ival))));
			  TOKEN_GETMAD((yyvsp[(1) - (9)].p_tkval),innerop,'L');
			  TOKEN_GETMAD((yyvsp[(2) - (9)].i_tkval),innerop,'W');
			  TOKEN_GETMAD((yyvsp[(3) - (9)].i_tkval),innerop,'(');
			  TOKEN_GETMAD((yyvsp[(6) - (9)].i_tkval),innerop,')');
			;}
    break;

  case 36:
#line 335 "perly.y"
    { OP *innerop;
			  PL_copline = (line_t)(yyvsp[(2) - (9)].i_tkval);
			    (yyval.opval) = block_end((yyvsp[(4) - (9)].ival),
				   newSTATEOP(0, PVAL((yyvsp[(1) - (9)].p_tkval)),
				     innerop = newWHILEOP(0, 1, (LOOP*)Nullop,
						IVAL((yyvsp[(2) - (9)].i_tkval)), (yyvsp[(5) - (9)].opval), (yyvsp[(8) - (9)].opval), (yyvsp[(9) - (9)].opval), (yyvsp[(7) - (9)].ival))));
			  TOKEN_GETMAD((yyvsp[(1) - (9)].p_tkval),innerop,'L');
			  TOKEN_GETMAD((yyvsp[(2) - (9)].i_tkval),innerop,'W');
			  TOKEN_GETMAD((yyvsp[(3) - (9)].i_tkval),innerop,'(');
			  TOKEN_GETMAD((yyvsp[(6) - (9)].i_tkval),innerop,')');
			;}
    break;

  case 37:
#line 347 "perly.y"
    { OP *innerop;
			  (yyval.opval) = block_end((yyvsp[(4) - (10)].ival),
			     innerop = newFOROP(0, PVAL((yyvsp[(1) - (10)].p_tkval)), (line_t)IVAL((yyvsp[(2) - (10)].i_tkval)),
					    (yyvsp[(5) - (10)].opval), (yyvsp[(7) - (10)].opval), (yyvsp[(9) - (10)].opval), (yyvsp[(10) - (10)].opval)));
			  TOKEN_GETMAD((yyvsp[(1) - (10)].p_tkval),((LISTOP*)innerop)->op_first,'L');
			  TOKEN_GETMAD((yyvsp[(2) - (10)].i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'W');
			  TOKEN_GETMAD((yyvsp[(3) - (10)].i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'d');
			  TOKEN_GETMAD((yyvsp[(6) - (10)].i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'(');
			  TOKEN_GETMAD((yyvsp[(8) - (10)].i_tkval),((LISTOP*)innerop)->op_first->op_sibling,')');
			;}
    break;

  case 38:
#line 358 "perly.y"
    { OP *innerop;
			  (yyval.opval) = block_end((yyvsp[(5) - (9)].ival),
			     innerop = newFOROP(0, PVAL((yyvsp[(1) - (9)].p_tkval)), (line_t)IVAL((yyvsp[(2) - (9)].i_tkval)),
				    mod((yyvsp[(3) - (9)].opval), OP_ENTERLOOP), (yyvsp[(6) - (9)].opval), (yyvsp[(8) - (9)].opval), (yyvsp[(9) - (9)].opval)));
			  TOKEN_GETMAD((yyvsp[(1) - (9)].p_tkval),((LISTOP*)innerop)->op_first,'L');
			  TOKEN_GETMAD((yyvsp[(2) - (9)].i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'W');
			  TOKEN_GETMAD((yyvsp[(4) - (9)].i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'(');
			  TOKEN_GETMAD((yyvsp[(7) - (9)].i_tkval),((LISTOP*)innerop)->op_first->op_sibling,')');
			;}
    break;

  case 39:
#line 368 "perly.y"
    { OP *innerop;
			  (yyval.opval) = block_end((yyvsp[(4) - (8)].ival),
			     innerop = newFOROP(0, PVAL((yyvsp[(1) - (8)].p_tkval)), (line_t)IVAL((yyvsp[(2) - (8)].i_tkval)),
						    Nullop, (yyvsp[(5) - (8)].opval), (yyvsp[(7) - (8)].opval), (yyvsp[(8) - (8)].opval)));
			  TOKEN_GETMAD((yyvsp[(1) - (8)].p_tkval),((LISTOP*)innerop)->op_first,'L');
			  TOKEN_GETMAD((yyvsp[(2) - (8)].i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'W');
			  TOKEN_GETMAD((yyvsp[(3) - (8)].i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'(');
			  TOKEN_GETMAD((yyvsp[(6) - (8)].i_tkval),((LISTOP*)innerop)->op_first->op_sibling,')');
			;}
    break;

  case 40:
#line 380 "perly.y"
    { OP *forop;
			  PL_copline = (line_t)IVAL((yyvsp[(2) - (12)].i_tkval));
			  forop = newSTATEOP(0, PVAL((yyvsp[(1) - (12)].p_tkval)),
					    newWHILEOP(0, 1, (LOOP*)Nullop,
						IVAL((yyvsp[(2) - (12)].i_tkval)), scalar((yyvsp[(7) - (12)].opval)),
						(yyvsp[(12) - (12)].opval), (yyvsp[(10) - (12)].opval), (yyvsp[(9) - (12)].ival)));
#ifdef MAD
			  if (!(yyvsp[(5) - (12)].opval))
				(yyvsp[(5) - (12)].opval) = newOP(OP_NULL, 0);
			  forop = newUNOP(OP_NULL, 0, append_elem(OP_LINESEQ,
				newSTATEOP(0,
					   (((yyvsp[(1) - (12)].p_tkval))->tk_lval.pval
					   ?savepv(((yyvsp[(1) - (12)].p_tkval))->tk_lval.pval):Nullch),
					   (yyvsp[(5) - (12)].opval)),
				forop));

			  token_getmad((yyvsp[(2) - (12)].i_tkval),forop,'3');
			  token_getmad((yyvsp[(3) - (12)].i_tkval),forop,'(');
			  token_getmad((yyvsp[(6) - (12)].i_tkval),forop,'1');
			  token_getmad((yyvsp[(8) - (12)].i_tkval),forop,'2');
			  token_getmad((yyvsp[(11) - (12)].i_tkval),forop,')');
			  token_getmad((yyvsp[(1) - (12)].p_tkval),forop,'L');
#else
			  if ((yyvsp[(5) - (12)].opval)) {
				forop = append_elem(OP_LINESEQ,
                                        newSTATEOP(0, ((yyvsp[(1) - (12)].p_tkval)?savepv((yyvsp[(1) - (12)].p_tkval)):Nullch),
						   (yyvsp[(5) - (12)].opval)),
					forop);
			  }


#endif
			  (yyval.opval) = block_end((yyvsp[(4) - (12)].ival), forop); ;}
    break;

  case 41:
#line 414 "perly.y"
    { (yyval.opval) = newSTATEOP(0, PVAL((yyvsp[(1) - (3)].p_tkval)),
				 newWHILEOP(0, 1, (LOOP*)Nullop,
					    NOLINE, Nullop, (yyvsp[(2) - (3)].opval), (yyvsp[(3) - (3)].opval), 0));
			  TOKEN_GETMAD((yyvsp[(1) - (3)].p_tkval),((LISTOP*)(yyval.opval))->op_first,'L'); ;}
    break;

  case 42:
#line 422 "perly.y"
    { PL_copline = (line_t) (yyvsp[(2) - (8)].i_tkval);
			    (yyval.opval) = block_end((yyvsp[(4) - (8)].ival),
				newSTATEOP(0, PVAL((yyvsp[(1) - (8)].p_tkval)),
				    newGIVENOP((yyvsp[(6) - (8)].opval), scope((yyvsp[(8) - (8)].opval)),
					(PADOFFSET) (yyvsp[(5) - (8)].ival)) )); ;}
    break;

  case 43:
#line 431 "perly.y"
    { (yyval.ival) = (PL_min_intro_pending &&
			    PL_max_intro_pending >=  PL_min_intro_pending);
			  intro_my(); ;}
    break;

  case 44:
#line 437 "perly.y"
    { (yyval.opval) = Nullop; ;}
    break;

  case 46:
#line 443 "perly.y"
    { YYSTYPE tmplval;
			  (void)scan_num("1", &tmplval);
			  (yyval.opval) = tmplval.opval; ;}
    break;

  case 48:
#line 451 "perly.y"
    { (yyval.opval) = invert(scalar((yyvsp[(1) - (1)].opval))); ;}
    break;

  case 49:
#line 456 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); intro_my(); ;}
    break;

  case 50:
#line 460 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); intro_my(); ;}
    break;

  case 51:
#line 464 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); intro_my(); ;}
    break;

  case 52:
#line 469 "perly.y"
    {
#ifdef MAD
			  YYSTYPE tmplval;
			  tmplval.pval = Nullch;
			  (yyval.p_tkval) = newTOKEN(OP_NULL, tmplval, 0);
#else
			  (yyval.p_tkval) = Nullch;
#endif
			;}
    break;

  case 54:
#line 483 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 55:
#line 485 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 56:
#line 487 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 57:
#line 489 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 58:
#line 491 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 59:
#line 496 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 60:
#line 500 "perly.y"
    { (yyval.opval) = newOP(OP_NULL,0);
			  TOKEN_GETMAD((yyvsp[(1) - (1)].i_tkval),(yyval.opval),'p');
			;}
    break;

  case 61:
#line 506 "perly.y"
    { SvREFCNT_inc(PL_compcv);
#ifdef MAD
			  (yyval.opval) = newFORM((yyvsp[(2) - (4)].ival), (yyvsp[(3) - (4)].opval), (yyvsp[(4) - (4)].opval));
			  prepend_madprops((yyvsp[(1) - (4)].i_tkval)->tk_mad, (yyval.opval), 'F');
			  (yyvsp[(1) - (4)].i_tkval)->tk_mad = 0;
			  token_free((yyvsp[(1) - (4)].i_tkval));
#else
			  newFORM((yyvsp[(2) - (4)].ival), (yyvsp[(3) - (4)].opval), (yyvsp[(4) - (4)].opval));
			  (yyval.opval) = Nullop;
#endif
			;}
    break;

  case 62:
#line 519 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 63:
#line 520 "perly.y"
    { (yyval.opval) = Nullop; ;}
    break;

  case 64:
#line 525 "perly.y"
    { SvREFCNT_inc(PL_compcv);
#ifdef MAD
			  (yyval.opval) = newMYSUB((yyvsp[(2) - (6)].ival), (yyvsp[(3) - (6)].opval), (yyvsp[(4) - (6)].opval), (yyvsp[(5) - (6)].opval), (yyvsp[(6) - (6)].opval));
			  token_getmad((yyvsp[(1) - (6)].i_tkval),(yyval.opval),'d');
#else
			  newMYSUB((yyvsp[(2) - (6)].ival), (yyvsp[(3) - (6)].opval), (yyvsp[(4) - (6)].opval), (yyvsp[(5) - (6)].opval), (yyvsp[(6) - (6)].opval));
			  (yyval.opval) = Nullop;
#endif
			;}
    break;

  case 65:
#line 538 "perly.y"
    { SvREFCNT_inc(PL_compcv);
#ifdef MAD
			  OP* o = newSVOP(OP_ANONCODE, 0,
			    (SV*)newATTRSUB((yyvsp[(2) - (6)].ival), (yyvsp[(3) - (6)].opval), (yyvsp[(4) - (6)].opval), (yyvsp[(5) - (6)].opval), (yyvsp[(6) - (6)].opval)));
			  (yyval.opval) = newOP(OP_NULL,0);
			  op_getmad(o,(yyval.opval),'&');
			  op_getmad((yyvsp[(3) - (6)].opval),(yyval.opval),'n');
			  op_getmad((yyvsp[(4) - (6)].opval),(yyval.opval),'s');
			  op_getmad((yyvsp[(5) - (6)].opval),(yyval.opval),'a');
			  token_getmad((yyvsp[(1) - (6)].i_tkval),(yyval.opval),'d');
			  append_madprops((yyvsp[(6) - (6)].opval)->op_madprop, (yyval.opval), 0);
			  (yyvsp[(6) - (6)].opval)->op_madprop = 0;
#else
			  newATTRSUB((yyvsp[(2) - (6)].ival), (yyvsp[(3) - (6)].opval), (yyvsp[(4) - (6)].opval), (yyvsp[(5) - (6)].opval), (yyvsp[(6) - (6)].opval));
			  (yyval.opval) = Nullop;
#endif
			;}
    break;

  case 66:
#line 558 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, 0);
			    SAVEFREESV(PL_compcv); ;}
    break;

  case 67:
#line 564 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, CVf_ANON);
			    SAVEFREESV(PL_compcv); ;}
    break;

  case 68:
#line 569 "perly.y"
    { (yyval.ival) = start_subparse(TRUE, 0);
			    SAVEFREESV(PL_compcv); ;}
    break;

  case 69:
#line 574 "perly.y"
    { const char *const name = SvPV_nolen_const(((SVOP*)(yyvsp[(1) - (1)].opval))->op_sv);
			  if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT") || strEQ(name, "CHECK")
			      || strEQ(name, "UNITCHECK"))
			      CvSPECIAL_on(PL_compcv);
			  (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 70:
#line 584 "perly.y"
    { (yyval.opval) = Nullop; ;}
    break;

  case 72:
#line 590 "perly.y"
    { (yyval.opval) = Nullop; ;}
    break;

  case 73:
#line 592 "perly.y"
    { (yyval.opval) = (yyvsp[(2) - (2)].opval);
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),':');
			;}
    break;

  case 74:
#line 596 "perly.y"
    { (yyval.opval) = IF_MAD(
				    newOP(OP_NULL, 0),
				    Nullop
				);
			  TOKEN_GETMAD((yyvsp[(1) - (1)].i_tkval),(yyval.opval),':');
			;}
    break;

  case 75:
#line 606 "perly.y"
    { (yyval.opval) = (yyvsp[(2) - (2)].opval);
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),':');
			;}
    break;

  case 76:
#line 610 "perly.y"
    { (yyval.opval) = IF_MAD(
				    newOP(OP_NULL, 0),
				    Nullop
				);
			  TOKEN_GETMAD((yyvsp[(1) - (1)].i_tkval),(yyval.opval),':');
			;}
    break;

  case 77:
#line 619 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 78:
#line 620 "perly.y"
    { (yyval.opval) = IF_MAD(
				    newOP(OP_NULL,0),
				    Nullop
				);
			  PL_expect = XSTATE;
			  TOKEN_GETMAD((yyvsp[(1) - (1)].i_tkval),(yyval.opval),';');
			;}
    break;

  case 79:
#line 630 "perly.y"
    {
#ifdef MAD
			  (yyval.opval) = package((yyvsp[(2) - (3)].opval));
			  token_getmad((yyvsp[(1) - (3)].i_tkval),(yyval.opval),'o');
			  token_getmad((yyvsp[(3) - (3)].i_tkval),(yyval.opval),';');
#else
			  package((yyvsp[(2) - (3)].opval));
			  (yyval.opval) = Nullop;
#endif
			;}
    break;

  case 80:
#line 643 "perly.y"
    { CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ ;}
    break;

  case 81:
#line 645 "perly.y"
    { SvREFCNT_inc(PL_compcv);
#ifdef MAD
			  (yyval.opval) = utilize(IVAL((yyvsp[(1) - (7)].i_tkval)), (yyvsp[(2) - (7)].ival), (yyvsp[(4) - (7)].opval), (yyvsp[(5) - (7)].opval), (yyvsp[(6) - (7)].opval));
			  token_getmad((yyvsp[(1) - (7)].i_tkval),(yyval.opval),'o');
			  token_getmad((yyvsp[(7) - (7)].i_tkval),(yyval.opval),';');
			  if (PL_rsfp_filters && AvFILLp(PL_rsfp_filters) >= 0)
			      append_madprops(newMADPROP('!', MAD_PV, "", 0), (yyval.opval), 0);
#else
			  utilize(IVAL((yyvsp[(1) - (7)].i_tkval)), (yyvsp[(2) - (7)].ival), (yyvsp[(4) - (7)].opval), (yyvsp[(5) - (7)].opval), (yyvsp[(6) - (7)].opval));
			  (yyval.opval) = Nullop;
#endif
			;}
    break;

  case 82:
#line 661 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (yyvsp[(1) - (3)].opval), (yyvsp[(3) - (3)].opval));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 83:
#line 665 "perly.y"
    { (yyval.opval) = newLOGOP(IVAL((yyvsp[(2) - (3)].i_tkval)), 0, (yyvsp[(1) - (3)].opval), (yyvsp[(3) - (3)].opval));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 84:
#line 669 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (yyvsp[(1) - (3)].opval), (yyvsp[(3) - (3)].opval));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 86:
#line 677 "perly.y"
    {
#ifdef MAD
			  OP* op = newNULLLIST();
			  token_getmad((yyvsp[(2) - (2)].i_tkval),op,',');
			  (yyval.opval) = append_elem(OP_LIST, (yyvsp[(1) - (2)].opval), op);
#else
			  (yyval.opval) = (yyvsp[(1) - (2)].opval);
#endif
			;}
    break;

  case 87:
#line 687 "perly.y"
    { 
			  DO_MAD(
			      (yyvsp[(3) - (3)].opval) = newUNOP(OP_NULL, 0, (yyvsp[(3) - (3)].opval));
			      token_getmad((yyvsp[(2) - (3)].i_tkval),(yyvsp[(3) - (3)].opval),',');
			  )
			  (yyval.opval) = append_elem(OP_LIST, (yyvsp[(1) - (3)].opval), (yyvsp[(3) - (3)].opval));
			;}
    break;

  case 89:
#line 699 "perly.y"
    { (yyval.opval) = convert(IVAL((yyvsp[(1) - (3)].i_tkval)), OPf_STACKED,
				prepend_elem(OP_LIST, newGVREF(IVAL((yyvsp[(1) - (3)].i_tkval)),(yyvsp[(2) - (3)].opval)), (yyvsp[(3) - (3)].opval)) );
			  TOKEN_GETMAD((yyvsp[(1) - (3)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 90:
#line 704 "perly.y"
    { (yyval.opval) = convert(IVAL((yyvsp[(1) - (5)].i_tkval)), OPf_STACKED,
				prepend_elem(OP_LIST, newGVREF(IVAL((yyvsp[(1) - (5)].i_tkval)),(yyvsp[(3) - (5)].opval)), (yyvsp[(4) - (5)].opval)) );
			  TOKEN_GETMAD((yyvsp[(1) - (5)].i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((yyvsp[(2) - (5)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(5) - (5)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 91:
#line 711 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, scalar((yyvsp[(1) - (6)].opval)), (yyvsp[(5) - (6)].opval)),
				    newUNOP(OP_METHOD, 0, (yyvsp[(3) - (6)].opval))));
			  TOKEN_GETMAD((yyvsp[(2) - (6)].i_tkval),(yyval.opval),'A');
			  TOKEN_GETMAD((yyvsp[(4) - (6)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(6) - (6)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 92:
#line 720 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST, scalar((yyvsp[(1) - (3)].opval)),
				    newUNOP(OP_METHOD, 0, (yyvsp[(3) - (3)].opval))));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'A');
			;}
    break;

  case 93:
#line 726 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, (yyvsp[(2) - (3)].opval), (yyvsp[(3) - (3)].opval)),
				    newUNOP(OP_METHOD, 0, (yyvsp[(1) - (3)].opval))));
			;}
    break;

  case 94:
#line 732 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, (yyvsp[(2) - (5)].opval), (yyvsp[(4) - (5)].opval)),
				    newUNOP(OP_METHOD, 0, (yyvsp[(1) - (5)].opval))));
			  TOKEN_GETMAD((yyvsp[(3) - (5)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(5) - (5)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 95:
#line 740 "perly.y"
    { (yyval.opval) = convert(IVAL((yyvsp[(1) - (2)].i_tkval)), 0, (yyvsp[(2) - (2)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 96:
#line 744 "perly.y"
    { (yyval.opval) = convert(IVAL((yyvsp[(1) - (4)].i_tkval)), 0, (yyvsp[(3) - (4)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (4)].i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((yyvsp[(2) - (4)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(4) - (4)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 97:
#line 750 "perly.y"
    { SvREFCNT_inc(PL_compcv);
			  (yyvsp[(3) - (3)].opval) = newANONATTRSUB((yyvsp[(2) - (3)].ival), 0, Nullop, (yyvsp[(3) - (3)].opval)); ;}
    break;

  case 98:
#line 753 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 append_elem(OP_LIST,
				   prepend_elem(OP_LIST, (yyvsp[(3) - (5)].opval), (yyvsp[(5) - (5)].opval)), (yyvsp[(1) - (5)].opval)));
			;}
    break;

  case 101:
#line 768 "perly.y"
    { (yyval.opval) = newBINOP(OP_GELEM, 0, (yyvsp[(1) - (5)].opval), scalar((yyvsp[(3) - (5)].opval)));
			    PL_expect = XOPERATOR;
			  TOKEN_GETMAD((yyvsp[(2) - (5)].i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((yyvsp[(4) - (5)].i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((yyvsp[(5) - (5)].i_tkval),(yyval.opval),'}');
			;}
    break;

  case 102:
#line 775 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0, oopsAV((yyvsp[(1) - (4)].opval)), scalar((yyvsp[(3) - (4)].opval)));
			  TOKEN_GETMAD((yyvsp[(2) - (4)].i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((yyvsp[(4) - (4)].i_tkval),(yyval.opval),']');
			;}
    break;

  case 103:
#line 780 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((yyvsp[(1) - (5)].opval)),OP_RV2AV),
					scalar((yyvsp[(4) - (5)].opval)));
			  TOKEN_GETMAD((yyvsp[(2) - (5)].i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((yyvsp[(3) - (5)].i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((yyvsp[(5) - (5)].i_tkval),(yyval.opval),']');
			;}
    break;

  case 104:
#line 788 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((yyvsp[(1) - (4)].opval)),OP_RV2AV),
					scalar((yyvsp[(3) - (4)].opval)));
			  TOKEN_GETMAD((yyvsp[(2) - (4)].i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((yyvsp[(4) - (4)].i_tkval),(yyval.opval),']');
			;}
    break;

  case 105:
#line 795 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0, oopsHV((yyvsp[(1) - (5)].opval)), jmaybe((yyvsp[(3) - (5)].opval)));
			    PL_expect = XOPERATOR;
			  TOKEN_GETMAD((yyvsp[(2) - (5)].i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((yyvsp[(4) - (5)].i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((yyvsp[(5) - (5)].i_tkval),(yyval.opval),'}');
			;}
    break;

  case 106:
#line 802 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((yyvsp[(1) - (6)].opval)),OP_RV2HV),
					jmaybe((yyvsp[(4) - (6)].opval)));
			    PL_expect = XOPERATOR;
			  TOKEN_GETMAD((yyvsp[(2) - (6)].i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((yyvsp[(3) - (6)].i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((yyvsp[(5) - (6)].i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((yyvsp[(6) - (6)].i_tkval),(yyval.opval),'}');
			;}
    break;

  case 107:
#line 812 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((yyvsp[(1) - (5)].opval)),OP_RV2HV),
					jmaybe((yyvsp[(3) - (5)].opval)));
			    PL_expect = XOPERATOR;
			  TOKEN_GETMAD((yyvsp[(2) - (5)].i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((yyvsp[(4) - (5)].i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((yyvsp[(5) - (5)].i_tkval),(yyval.opval),'}');
			;}
    break;

  case 108:
#line 821 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((yyvsp[(1) - (4)].opval))));
			  TOKEN_GETMAD((yyvsp[(2) - (4)].i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((yyvsp[(3) - (4)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(4) - (4)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 109:
#line 828 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   append_elem(OP_LIST, (yyvsp[(4) - (5)].opval),
				       newCVREF(0, scalar((yyvsp[(1) - (5)].opval)))));
			  TOKEN_GETMAD((yyvsp[(2) - (5)].i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((yyvsp[(3) - (5)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(5) - (5)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 110:
#line 837 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   append_elem(OP_LIST, (yyvsp[(3) - (4)].opval),
					       newCVREF(0, scalar((yyvsp[(1) - (4)].opval)))));
			  TOKEN_GETMAD((yyvsp[(2) - (4)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(4) - (4)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 111:
#line 844 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((yyvsp[(1) - (3)].opval))));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(3) - (3)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 112:
#line 850 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (yyvsp[(5) - (6)].opval), (yyvsp[(2) - (6)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (6)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(3) - (6)].i_tkval),(yyval.opval),')');
			  TOKEN_GETMAD((yyvsp[(4) - (6)].i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((yyvsp[(6) - (6)].i_tkval),(yyval.opval),']');
			;}
    break;

  case 113:
#line 857 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (yyvsp[(4) - (5)].opval), Nullop);
			  TOKEN_GETMAD((yyvsp[(1) - (5)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(2) - (5)].i_tkval),(yyval.opval),')');
			  TOKEN_GETMAD((yyvsp[(3) - (5)].i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((yyvsp[(5) - (5)].i_tkval),(yyval.opval),']');
			;}
    break;

  case 114:
#line 867 "perly.y"
    { (yyval.opval) = newASSIGNOP(OPf_STACKED, (yyvsp[(1) - (3)].opval), IVAL((yyvsp[(2) - (3)].i_tkval)), (yyvsp[(3) - (3)].opval));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 115:
#line 871 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((yyvsp[(2) - (3)].i_tkval)), 0, scalar((yyvsp[(1) - (3)].opval)), scalar((yyvsp[(3) - (3)].opval)));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 116:
#line 875 "perly.y"
    {   if (IVAL((yyvsp[(2) - (3)].i_tkval)) != OP_REPEAT)
				scalar((yyvsp[(1) - (3)].opval));
			    (yyval.opval) = newBINOP(IVAL((yyvsp[(2) - (3)].i_tkval)), 0, (yyvsp[(1) - (3)].opval), scalar((yyvsp[(3) - (3)].opval)));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 117:
#line 881 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((yyvsp[(2) - (3)].i_tkval)), 0, scalar((yyvsp[(1) - (3)].opval)), scalar((yyvsp[(3) - (3)].opval)));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 118:
#line 885 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((yyvsp[(2) - (3)].i_tkval)), 0, scalar((yyvsp[(1) - (3)].opval)), scalar((yyvsp[(3) - (3)].opval)));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 119:
#line 889 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((yyvsp[(2) - (3)].i_tkval)), 0, scalar((yyvsp[(1) - (3)].opval)), scalar((yyvsp[(3) - (3)].opval)));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 120:
#line 893 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((yyvsp[(2) - (3)].i_tkval)), 0, scalar((yyvsp[(1) - (3)].opval)), scalar((yyvsp[(3) - (3)].opval)));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 121:
#line 897 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((yyvsp[(2) - (3)].i_tkval)), 0, scalar((yyvsp[(1) - (3)].opval)), scalar((yyvsp[(3) - (3)].opval)));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 122:
#line 901 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((yyvsp[(2) - (3)].i_tkval)), 0, scalar((yyvsp[(1) - (3)].opval)), scalar((yyvsp[(3) - (3)].opval)));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 123:
#line 905 "perly.y"
    {
			  (yyval.opval) = newRANGE(IVAL((yyvsp[(2) - (3)].i_tkval)), scalar((yyvsp[(1) - (3)].opval)), scalar((yyvsp[(3) - (3)].opval)));
			  DO_MAD(
			      UNOP *op;
			      op = (UNOP*)(yyval.opval);
			      op = (UNOP*)op->op_first;	/* get to flop */
			      op = (UNOP*)op->op_first;	/* get to flip */
			      op = (UNOP*)op->op_first;	/* get to range */
			      token_getmad((yyvsp[(2) - (3)].i_tkval),(OP*)op,'o');
			    )
			;}
    break;

  case 124:
#line 917 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (yyvsp[(1) - (3)].opval), (yyvsp[(3) - (3)].opval));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 125:
#line 921 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (yyvsp[(1) - (3)].opval), (yyvsp[(3) - (3)].opval));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 126:
#line 925 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (yyvsp[(1) - (3)].opval), (yyvsp[(3) - (3)].opval));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 127:
#line 929 "perly.y"
    { (yyval.opval) = bind_match(IVAL((yyvsp[(2) - (3)].i_tkval)), (yyvsp[(1) - (3)].opval), (yyvsp[(3) - (3)].opval));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),
				((yyval.opval)->op_type == OP_NOT
				    ? ((UNOP*)(yyval.opval))->op_first : (yyval.opval)),
				'~');
			;}
    break;

  case 128:
#line 939 "perly.y"
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((yyvsp[(2) - (2)].opval)));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 129:
#line 943 "perly.y"
    { (yyval.opval) = IF_MAD(
				    newUNOP(OP_NULL, 0, (yyvsp[(2) - (2)].opval)),
				    (yyvsp[(2) - (2)].opval)
				);
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'+');
			;}
    break;

  case 130:
#line 950 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((yyvsp[(2) - (2)].opval)));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 131:
#line 954 "perly.y"
    { (yyval.opval) = newUNOP(OP_COMPLEMENT, 0, scalar((yyvsp[(2) - (2)].opval)));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 132:
#line 958 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTINC, 0,
					mod(scalar((yyvsp[(1) - (2)].opval)), OP_POSTINC));
			  TOKEN_GETMAD((yyvsp[(2) - (2)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 133:
#line 963 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTDEC, 0,
					mod(scalar((yyvsp[(1) - (2)].opval)), OP_POSTDEC));
			  TOKEN_GETMAD((yyvsp[(2) - (2)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 134:
#line 968 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
					mod(scalar((yyvsp[(2) - (2)].opval)), OP_PREINC));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 135:
#line 973 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
					mod(scalar((yyvsp[(2) - (2)].opval)), OP_PREDEC));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 136:
#line 982 "perly.y"
    { (yyval.opval) = newANONLIST((yyvsp[(2) - (3)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (3)].i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((yyvsp[(3) - (3)].i_tkval),(yyval.opval),']');
			;}
    break;

  case 137:
#line 987 "perly.y"
    { (yyval.opval) = newANONLIST(Nullop);
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((yyvsp[(2) - (2)].i_tkval),(yyval.opval),']');
			;}
    break;

  case 138:
#line 992 "perly.y"
    { (yyval.opval) = newANONHASH((yyvsp[(2) - (4)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (4)].i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((yyvsp[(3) - (4)].i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((yyvsp[(4) - (4)].i_tkval),(yyval.opval),'}');
			;}
    break;

  case 139:
#line 998 "perly.y"
    { (yyval.opval) = newANONHASH(Nullop);
			  TOKEN_GETMAD((yyvsp[(1) - (3)].i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((yyvsp[(3) - (3)].i_tkval),(yyval.opval),'}');
			;}
    break;

  case 140:
#line 1004 "perly.y"
    { SvREFCNT_inc(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((yyvsp[(2) - (5)].ival), (yyvsp[(3) - (5)].opval), (yyvsp[(4) - (5)].opval), (yyvsp[(5) - (5)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (5)].i_tkval),(yyval.opval),'o');
			  OP_GETMAD((yyvsp[(3) - (5)].opval),(yyval.opval),'s');
			  OP_GETMAD((yyvsp[(4) - (5)].opval),(yyval.opval),'a');
			;}
    break;

  case 141:
#line 1015 "perly.y"
    { (yyval.opval) = dofile((yyvsp[(2) - (2)].opval), IVAL((yyvsp[(1) - (2)].i_tkval)));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 142:
#line 1019 "perly.y"
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, scope((yyvsp[(2) - (2)].opval)));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'D');
			;}
    break;

  case 143:
#line 1023 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB,
			    OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				scalar(newCVREF(
				    (OPpENTERSUB_AMPER<<8),
				    scalar((yyvsp[(2) - (4)].opval))
				)),Nullop)); dep();
			  TOKEN_GETMAD((yyvsp[(1) - (4)].i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((yyvsp[(3) - (4)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(4) - (4)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 144:
#line 1035 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB,
			    OPf_SPECIAL|OPf_STACKED,
			    append_elem(OP_LIST,
				(yyvsp[(4) - (5)].opval),
				scalar(newCVREF(
				    (OPpENTERSUB_AMPER<<8),
				    scalar((yyvsp[(2) - (5)].opval))
				)))); dep();
			  TOKEN_GETMAD((yyvsp[(1) - (5)].i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((yyvsp[(3) - (5)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(5) - (5)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 145:
#line 1048 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				scalar(newCVREF(0,scalar((yyvsp[(2) - (4)].opval)))), Nullop)); dep();
			  TOKEN_GETMAD((yyvsp[(1) - (4)].i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((yyvsp[(3) - (4)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(4) - (4)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 146:
#line 1056 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				(yyvsp[(4) - (5)].opval),
				scalar(newCVREF(0,scalar((yyvsp[(2) - (5)].opval)))))); dep();
			  TOKEN_GETMAD((yyvsp[(1) - (5)].i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((yyvsp[(3) - (5)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(5) - (5)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 151:
#line 1072 "perly.y"
    { (yyval.opval) = newCONDOP(0, (yyvsp[(1) - (5)].opval), (yyvsp[(3) - (5)].opval), (yyvsp[(5) - (5)].opval));
			  TOKEN_GETMAD((yyvsp[(2) - (5)].i_tkval),(yyval.opval),'?');
			  TOKEN_GETMAD((yyvsp[(4) - (5)].i_tkval),(yyval.opval),':');
			;}
    break;

  case 152:
#line 1077 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, mod((yyvsp[(2) - (2)].opval),OP_REFGEN));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 153:
#line 1081 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 154:
#line 1083 "perly.y"
    { (yyval.opval) = localize((yyvsp[(2) - (2)].opval),IVAL((yyvsp[(1) - (2)].i_tkval)));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'d');
			;}
    break;

  case 155:
#line 1087 "perly.y"
    { (yyval.opval) = sawparens(IF_MAD(newUNOP(OP_NULL,0,(yyvsp[(2) - (3)].opval)), (yyvsp[(2) - (3)].opval)));
			  TOKEN_GETMAD((yyvsp[(1) - (3)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(3) - (3)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 156:
#line 1092 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST());
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(2) - (2)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 157:
#line 1097 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 158:
#line 1099 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 159:
#line 1101 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 160:
#line 1103 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 161:
#line 1105 "perly.y"
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((yyvsp[(1) - (1)].opval), OP_AV2ARYLEN));;}
    break;

  case 162:
#line 1107 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 163:
#line 1109 "perly.y"
    { (yyval.opval) = prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list((yyvsp[(3) - (4)].opval)),
					ref((yyvsp[(1) - (4)].opval), OP_ASLICE)));
			  TOKEN_GETMAD((yyvsp[(2) - (4)].i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((yyvsp[(4) - (4)].i_tkval),(yyval.opval),']');
			;}
    break;

  case 164:
#line 1118 "perly.y"
    { (yyval.opval) = prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list((yyvsp[(3) - (5)].opval)),
					ref(oopsHV((yyvsp[(1) - (5)].opval)), OP_HSLICE)));
			    PL_expect = XOPERATOR;
			  TOKEN_GETMAD((yyvsp[(2) - (5)].i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((yyvsp[(4) - (5)].i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((yyvsp[(5) - (5)].i_tkval),(yyval.opval),'}');
			;}
    break;

  case 165:
#line 1129 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 166:
#line 1131 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((yyvsp[(1) - (1)].opval))); ;}
    break;

  case 167:
#line 1133 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((yyvsp[(1) - (3)].opval)));
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(3) - (3)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 168:
#line 1138 "perly.y"
    {
			  (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST, (yyvsp[(3) - (4)].opval), scalar((yyvsp[(1) - (4)].opval))));
			  DO_MAD(
			      OP* op = (yyval.opval);
			      if (op->op_type == OP_CONST) { /* defeat const fold */
				op = (OP*)op->op_madprop->mad_val;
			      }
			      token_getmad((yyvsp[(2) - (4)].i_tkval),op,'(');
			      token_getmad((yyvsp[(4) - (4)].i_tkval),op,')');
			  )
			;}
    break;

  case 169:
#line 1151 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, (yyvsp[(3) - (3)].opval), scalar((yyvsp[(2) - (3)].opval))));
			  TOKEN_GETMAD((yyvsp[(1) - (3)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 170:
#line 1156 "perly.y"
    { (yyval.opval) = newOP(IVAL((yyvsp[(1) - (1)].i_tkval)), OPf_SPECIAL);
			    PL_hints |= HINT_BLOCK_SCOPE;
			  TOKEN_GETMAD((yyvsp[(1) - (1)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 171:
#line 1161 "perly.y"
    { (yyval.opval) = newLOOPEX(IVAL((yyvsp[(1) - (2)].i_tkval)),(yyvsp[(2) - (2)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 172:
#line 1165 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((yyvsp[(2) - (2)].opval)));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 173:
#line 1169 "perly.y"
    { (yyval.opval) = newOP(IVAL((yyvsp[(1) - (1)].i_tkval)), 0);
			  TOKEN_GETMAD((yyvsp[(1) - (1)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 174:
#line 1173 "perly.y"
    { (yyval.opval) = newUNOP(IVAL((yyvsp[(1) - (2)].i_tkval)), 0, (yyvsp[(2) - (2)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 175:
#line 1177 "perly.y"
    { (yyval.opval) = newUNOP(IVAL((yyvsp[(1) - (2)].i_tkval)), 0, (yyvsp[(2) - (2)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 176:
#line 1181 "perly.y"
    { (yyval.opval) = newOP(OP_REQUIRE, (yyvsp[(1) - (1)].i_tkval) ? OPf_SPECIAL : 0); ;}
    break;

  case 177:
#line 1183 "perly.y"
    { (yyval.opval) = newUNOP(OP_REQUIRE, (yyvsp[(1) - (2)].i_tkval) ? OPf_SPECIAL : 0, (yyvsp[(2) - (2)].opval)); ;}
    break;

  case 178:
#line 1185 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((yyvsp[(1) - (1)].opval))); ;}
    break;

  case 179:
#line 1187 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, (yyvsp[(2) - (2)].opval), scalar((yyvsp[(1) - (2)].opval)))); ;}
    break;

  case 180:
#line 1190 "perly.y"
    { (yyval.opval) = newOP(IVAL((yyvsp[(1) - (1)].i_tkval)), 0);
			  TOKEN_GETMAD((yyvsp[(1) - (1)].i_tkval),(yyval.opval),'o');
			;}
    break;

  case 181:
#line 1194 "perly.y"
    { (yyval.opval) = newOP(IVAL((yyvsp[(1) - (3)].i_tkval)), 0);
			  TOKEN_GETMAD((yyvsp[(1) - (3)].i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(3) - (3)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 182:
#line 1200 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				scalar((yyvsp[(1) - (1)].opval))); ;}
    break;

  case 183:
#line 1203 "perly.y"
    { (yyval.opval) = (IVAL((yyvsp[(1) - (3)].i_tkval)) == OP_NOT)
			    ? newUNOP(IVAL((yyvsp[(1) - (3)].i_tkval)), 0, newSVOP(OP_CONST, 0, newSViv(0)))
			    : newOP(IVAL((yyvsp[(1) - (3)].i_tkval)), OPf_SPECIAL);

			  TOKEN_GETMAD((yyvsp[(1) - (3)].i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((yyvsp[(2) - (3)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(3) - (3)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 184:
#line 1212 "perly.y"
    { (yyval.opval) = newUNOP(IVAL((yyvsp[(1) - (4)].i_tkval)), 0, (yyvsp[(3) - (4)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (4)].i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((yyvsp[(2) - (4)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(4) - (4)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 185:
#line 1218 "perly.y"
    { (yyval.opval) = pmruntime((yyvsp[(1) - (4)].opval), (yyvsp[(3) - (4)].opval), 1);
			  TOKEN_GETMAD((yyvsp[(2) - (4)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(4) - (4)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 188:
#line 1228 "perly.y"
    { (yyval.opval) = my_attrs((yyvsp[(2) - (3)].opval),(yyvsp[(3) - (3)].opval));
			  DO_MAD(
			      token_getmad((yyvsp[(1) - (3)].i_tkval),(yyval.opval),'d');
			      append_madprops((yyvsp[(3) - (3)].opval)->op_madprop, (yyval.opval), 'a');
			      (yyvsp[(3) - (3)].opval)->op_madprop = 0;
			  )
			;}
    break;

  case 189:
#line 1236 "perly.y"
    { (yyval.opval) = localize((yyvsp[(2) - (2)].opval),IVAL((yyvsp[(1) - (2)].i_tkval)));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'d');
			;}
    break;

  case 190:
#line 1243 "perly.y"
    { (yyval.opval) = sawparens((yyvsp[(2) - (3)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (3)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(3) - (3)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 191:
#line 1248 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST());
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((yyvsp[(2) - (2)].i_tkval),(yyval.opval),')');
			;}
    break;

  case 192:
#line 1253 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 193:
#line 1255 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 194:
#line 1257 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 195:
#line 1262 "perly.y"
    { (yyval.opval) = Nullop; ;}
    break;

  case 196:
#line 1264 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 197:
#line 1268 "perly.y"
    { (yyval.opval) = Nullop; ;}
    break;

  case 198:
#line 1270 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;

  case 199:
#line 1272 "perly.y"
    {
#ifdef MAD
			  OP* op = newNULLLIST();
			  token_getmad((yyvsp[(2) - (2)].i_tkval),op,',');
			  (yyval.opval) = append_elem(OP_LIST, (yyvsp[(1) - (2)].opval), op);
#else
			  (yyval.opval) = (yyvsp[(1) - (2)].opval);
#endif

			;}
    break;

  case 200:
#line 1287 "perly.y"
    { PL_in_my = 0; (yyval.opval) = my((yyvsp[(1) - (1)].opval)); ;}
    break;

  case 201:
#line 1291 "perly.y"
    { (yyval.opval) = newCVREF(IVAL((yyvsp[(1) - (2)].i_tkval)),(yyvsp[(2) - (2)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'&');
			;}
    break;

  case 202:
#line 1297 "perly.y"
    { (yyval.opval) = newSVREF((yyvsp[(2) - (2)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'$');
			;}
    break;

  case 203:
#line 1303 "perly.y"
    { (yyval.opval) = newAVREF((yyvsp[(2) - (2)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'@');
			;}
    break;

  case 204:
#line 1309 "perly.y"
    { (yyval.opval) = newHVREF((yyvsp[(2) - (2)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'%');
			;}
    break;

  case 205:
#line 1315 "perly.y"
    { (yyval.opval) = newAVREF((yyvsp[(2) - (2)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'l');
			;}
    break;

  case 206:
#line 1321 "perly.y"
    { (yyval.opval) = newGVREF(0,(yyvsp[(2) - (2)].opval));
			  TOKEN_GETMAD((yyvsp[(1) - (2)].i_tkval),(yyval.opval),'*');
			;}
    break;

  case 207:
#line 1328 "perly.y"
    { (yyval.opval) = scalar((yyvsp[(1) - (1)].opval)); ;}
    break;

  case 208:
#line 1330 "perly.y"
    { (yyval.opval) = scalar((yyvsp[(1) - (1)].opval)); ;}
    break;

  case 209:
#line 1332 "perly.y"
    { (yyval.opval) = scope((yyvsp[(1) - (1)].opval)); ;}
    break;

  case 210:
#line 1335 "perly.y"
    { (yyval.opval) = (yyvsp[(1) - (1)].opval); ;}
    break;


/* Line 1267 of yacc.c.  */

      default: break;
    
