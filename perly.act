case 2:
#line 142 "perly.y"
    { (yyval.ival) = (ps[-1].val.ival); newPROG(block_end((ps[-1].val.ival),(ps[0].val.opval))); ;}
    break;

  case 3:
#line 147 "perly.y"
    { if (PL_parser->copline > (line_t)IVAL((ps[-3].val.i_tkval)))
			      PL_parser->copline = (line_t)IVAL((ps[-3].val.i_tkval));
			  (yyval.opval) = block_end((ps[-2].val.ival), (ps[-1].val.opval));
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 4:
#line 156 "perly.y"
    { (yyval.ival) = block_start(TRUE); ;}
    break;

  case 5:
#line 160 "perly.y"
    { (yyval.ival) = (I32) allocmy("$_"); ;}
    break;

  case 6:
#line 164 "perly.y"
    {
		    PL_parser->expect = XSTATE; (yyval.ival) = block_start(TRUE);
		;}
    break;

  case 7:
#line 171 "perly.y"
    { if (PL_parser->copline > (line_t)IVAL((ps[-3].val.i_tkval)))
			      PL_parser->copline = (line_t)IVAL((ps[-3].val.i_tkval));
			  (yyval.opval) = block_end((ps[-2].val.ival), (ps[-1].val.opval));
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 8:
#line 180 "perly.y"
    { (yyval.ival) = block_start(FALSE); ;}
    break;

  case 9:
#line 185 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 10:
#line 187 "perly.y"
    {
			(yyval.opval) = IF_MAD(
				append_list(OP_LINESEQ,
			    	    (LISTOP*)(ps[-1].val.opval), (LISTOP*)(ps[0].val.opval)),
				(ps[-1].val.opval));
			;}
    break;

  case 11:
#line 194 "perly.y"
    {   (yyval.opval) = append_list(OP_LINESEQ,
				(LISTOP*)(ps[-1].val.opval), (LISTOP*)(ps[0].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[-1].val.opval) && (ps[0].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			;}
    break;

  case 12:
#line 204 "perly.y"
    { (yyval.opval) = newSTATEOP(0, PVAL((ps[-1].val.p_tkval)), (ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.p_tkval),((LISTOP*)(yyval.opval))->op_first,'L'); ;}
    break;

  case 14:
#line 208 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 15:
#line 210 "perly.y"
    { (yyval.opval) = newSTATEOP(0, PVAL((ps[-1].val.p_tkval)), (ps[0].val.opval)); ;}
    break;

  case 16:
#line 212 "perly.y"
    {
			  if (PVAL((ps[-1].val.p_tkval))) {
			      (yyval.opval) = newSTATEOP(0, PVAL((ps[-1].val.p_tkval)), newOP(OP_NULL, 0));
			      TOKEN_GETMAD((ps[-1].val.p_tkval),((LISTOP*)(yyval.opval))->op_first,'L');
			      TOKEN_GETMAD((ps[0].val.i_tkval),((LISTOP*)(yyval.opval))->op_first,';');
			  }
			  else {
			      (yyval.opval) = IF_MAD(
					newOP(OP_NULL, 0),
					(OP*)NULL);
                              PL_parser->copline = NOLINE;
			      TOKEN_FREE((ps[-1].val.p_tkval));
			      TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),';');
			      append_madprops_pv("nullstatement",(yyval.opval),'>');
			  }
			  PL_parser->expect = XSTATE;
			;}
    break;

  case 17:
#line 230 "perly.y"
    {
			  (yyval.opval) = newSTATEOP(0, PVAL((ps[-2].val.p_tkval)), (ps[-1].val.opval));
			  PL_parser->expect = XSTATE;
			  DO_MAD({
			      /* sideff might already have a nexstate */
			      OP* op = ((LISTOP*)(yyval.opval))->op_first;
			      if (op) {
				  while (op->op_sibling &&
				     op->op_sibling->op_type == OP_NEXTSTATE)
					op = op->op_sibling;
				  token_getmad((ps[-2].val.p_tkval),op,'L');
				  token_getmad((ps[0].val.i_tkval),op,';');
			      }
			  })
			;}
    break;

  case 18:
#line 249 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 19:
#line 251 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 20:
#line 253 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[0].val.opval), (ps[-2].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'i');
                          append_madprops_pv("modif", (yyval.opval), '>');
			;}
    break;

  case 21:
#line 258 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[0].val.opval), (ps[-2].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'i');
                          append_madprops_pv("modif", (yyval.opval), '>');
			;}
    break;

  case 22:
#line 263 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[0].val.opval)), (ps[-2].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'w');
			;}
    break;

  case 23:
#line 267 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (ps[0].val.opval), (ps[-2].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'w');
			;}
    break;

  case 24:
#line 271 "perly.y"
    { (yyval.opval) = newFOROP(0, NULL, (line_t)IVAL((ps[-1].val.i_tkval)),
					(OP*)NULL, (ps[0].val.opval), (ps[-2].val.opval), (OP*)NULL);
			  TOKEN_GETMAD((ps[-1].val.i_tkval),((LISTOP*)(yyval.opval))->op_first->op_sibling,'w');
			;}
    break;

  case 25:
#line 279 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 26:
#line 281 "perly.y"
    { ((ps[0].val.opval))->op_flags |= OPf_PARENS; (yyval.opval) = scope((ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 27:
#line 285 "perly.y"
    { PL_parser->copline = (line_t)IVAL((ps[-5].val.i_tkval));
			    (yyval.opval) = newCONDOP(0, newSTATEOP(OPf_SPECIAL,NULL,(ps[-3].val.opval)), scope((ps[-1].val.opval)), (ps[0].val.opval));
			    PL_hints |= HINT_BLOCK_SCOPE;
			  TOKEN_GETMAD((ps[-5].val.i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((ps[-4].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),')');
                          append_madprops_pv("if", (yyval.opval), '>');
			;}
    break;

  case 28:
#line 297 "perly.y"
    { PL_parser->copline = (line_t)IVAL((ps[-6].val.i_tkval));
			    (yyval.opval) = block_end((ps[-4].val.ival),
				   newCONDOP(0, (ps[-3].val.opval), scope((ps[-1].val.opval)), (ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-6].val.i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((ps[-5].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),')');
                          append_madprops_pv("if", (yyval.opval), '>');
			;}
    break;

  case 29:
#line 306 "perly.y"
    { PL_parser->copline = (line_t)IVAL((ps[-6].val.i_tkval));
			    (yyval.opval) = block_end((ps[-4].val.ival),
				   newCONDOP(0, (ps[-3].val.opval), scope((ps[-1].val.opval)), (ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-6].val.i_tkval),(yyval.opval),'I');
			  TOKEN_GETMAD((ps[-5].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),')');
                          append_madprops_pv("if", (yyval.opval), '>');
			;}
    break;

  case 30:
#line 318 "perly.y"
    { (yyval.opval) = block_end((ps[-3].val.ival),
		newWHENOP((ps[-2].val.opval), scope((ps[0].val.opval)))); ;}
    break;

  case 31:
#line 321 "perly.y"
    { (yyval.opval) = newWHENOP(0, scope((ps[0].val.opval))); ;}
    break;

  case 32:
#line 326 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 33:
#line 328 "perly.y"
    { (yyval.opval) = scope((ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 34:
#line 335 "perly.y"
    { OP *innerop;
			  PL_parser->copline = (line_t)(ps[-7].val.i_tkval);
			    (yyval.opval) = block_end((ps[-5].val.ival),
				   newSTATEOP(0, PVAL((ps[-8].val.p_tkval)),
				     innerop = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
						IVAL((ps[-7].val.i_tkval)), (ps[-4].val.opval), (ps[-1].val.opval), (ps[0].val.opval), (ps[-2].val.ival))));
			  TOKEN_GETMAD((ps[-8].val.p_tkval),innerop,'L');
			  TOKEN_GETMAD((ps[-7].val.i_tkval),innerop,'W');
			  TOKEN_GETMAD((ps[-6].val.i_tkval),innerop,'(');
			  TOKEN_GETMAD((ps[-3].val.i_tkval),innerop,')');
			;}
    break;

  case 35:
#line 348 "perly.y"
    { OP *innerop;
			  PL_parser->copline = (line_t)(ps[-7].val.i_tkval);
			    (yyval.opval) = block_end((ps[-5].val.ival),
				   newSTATEOP(0, PVAL((ps[-8].val.p_tkval)),
				     innerop = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
						IVAL((ps[-7].val.i_tkval)), (ps[-4].val.opval), (ps[-1].val.opval), (ps[0].val.opval), (ps[-2].val.ival))));
			  TOKEN_GETMAD((ps[-8].val.p_tkval),innerop,'L');
			  TOKEN_GETMAD((ps[-7].val.i_tkval),innerop,'W');
			  TOKEN_GETMAD((ps[-6].val.i_tkval),innerop,'(');
			  TOKEN_GETMAD((ps[-3].val.i_tkval),innerop,')');
			;}
    break;

  case 36:
#line 360 "perly.y"
    { OP *innerop;
			  (yyval.opval) = block_end((ps[-6].val.ival),
			     innerop = newFOROP(0, PVAL((ps[-9].val.p_tkval)), (line_t)IVAL((ps[-8].val.i_tkval)),
					    (ps[-5].val.opval), (ps[-3].val.opval), (ps[-1].val.opval), (ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-9].val.p_tkval),((LISTOP*)innerop)->op_first,'L');
			  TOKEN_GETMAD((ps[-8].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'W');
			  TOKEN_GETMAD((ps[-7].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'d');
			  TOKEN_GETMAD((ps[-4].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'(');
			  TOKEN_GETMAD((ps[-2].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,')');
			;}
    break;

  case 37:
#line 371 "perly.y"
    { OP *innerop;
			  (yyval.opval) = block_end((ps[-4].val.ival),
			     innerop = newFOROP(0, PVAL((ps[-8].val.p_tkval)), (line_t)IVAL((ps[-7].val.i_tkval)),
				    mod((ps[-6].val.opval), OP_ENTERLOOP), (ps[-3].val.opval), (ps[-1].val.opval), (ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-8].val.p_tkval),((LISTOP*)innerop)->op_first,'L');
			  TOKEN_GETMAD((ps[-7].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'W');
			  TOKEN_GETMAD((ps[-5].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'(');
			  TOKEN_GETMAD((ps[-2].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,')');
			;}
    break;

  case 38:
#line 381 "perly.y"
    { OP *innerop;
			  (yyval.opval) = block_end((ps[-4].val.ival),
			     innerop = newFOROP(0, PVAL((ps[-7].val.p_tkval)), (line_t)IVAL((ps[-6].val.i_tkval)),
						    (OP*)NULL, (ps[-3].val.opval), (ps[-1].val.opval), (ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-7].val.p_tkval),((LISTOP*)innerop)->op_first,'L');
			  TOKEN_GETMAD((ps[-6].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'W');
			  TOKEN_GETMAD((ps[-5].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,'(');
			  TOKEN_GETMAD((ps[-2].val.i_tkval),((LISTOP*)innerop)->op_first->op_sibling,')');
			;}
    break;

  case 39:
#line 393 "perly.y"
    { OP *forop;
			  PL_parser->copline = (line_t)IVAL((ps[-10].val.i_tkval));
			  forop = newSTATEOP(0, PVAL((ps[-11].val.p_tkval)),
					    newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
						IVAL((ps[-10].val.i_tkval)), scalar((ps[-5].val.opval)),
						(ps[0].val.opval), (ps[-2].val.opval), (ps[-3].val.ival)));
#ifdef MAD
			  forop = newUNOP(OP_NULL, 0, append_elem(OP_LINESEQ,
				newSTATEOP(0,
					   CopLABEL_alloc(((ps[-11].val.p_tkval))->tk_lval.pval),
					   ((ps[-7].val.opval) ? (ps[-7].val.opval) : newOP(OP_NULL, 0)) ),
				forop));

			  token_getmad((ps[-10].val.i_tkval),forop,'3');
			  token_getmad((ps[-9].val.i_tkval),forop,'(');
			  token_getmad((ps[-6].val.i_tkval),forop,'1');
			  token_getmad((ps[-4].val.i_tkval),forop,'2');
			  token_getmad((ps[-1].val.i_tkval),forop,')');
			  token_getmad((ps[-11].val.p_tkval),forop,'L');
                          append_madprops_pv("cfor", forop, '>');
#else
			  if ((ps[-7].val.opval)) {
				forop = append_elem(OP_LINESEQ,
                                        newSTATEOP(0, CopLABEL_alloc((ps[-11].val.p_tkval)), (ps[-7].val.opval)),
					forop);
			  }


#endif
			  (yyval.opval) = block_end((ps[-8].val.ival), forop); ;}
    break;

  case 40:
#line 424 "perly.y"
    { (yyval.opval) = newSTATEOP(0, PVAL((ps[-2].val.p_tkval)),
				 newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
					    NOLINE, (OP*)NULL, (ps[-1].val.opval), (ps[0].val.opval), 0));
			  TOKEN_GETMAD((ps[-2].val.p_tkval),((LISTOP*)(yyval.opval))->op_first,'L'); ;}
    break;

  case 41:
#line 432 "perly.y"
    { PL_parser->copline = (line_t) (ps[-6].val.i_tkval);
			    (yyval.opval) = block_end((ps[-4].val.ival),
				newSTATEOP(0, PVAL((ps[-7].val.p_tkval)),
				    newGIVENOP((ps[-2].val.opval), scope((ps[0].val.opval)),
					(PADOFFSET) (ps[-3].val.ival)) )); ;}
    break;

  case 42:
#line 441 "perly.y"
    { (yyval.ival) = (PL_min_intro_pending &&
			    PL_max_intro_pending >=  PL_min_intro_pending);
			  intro_my(); ;}
    break;

  case 43:
#line 447 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 45:
#line 453 "perly.y"
    { YYSTYPE tmplval;
			  (void)scan_num("1", &tmplval);
			  (yyval.opval) = tmplval.opval; ;}
    break;

  case 47:
#line 461 "perly.y"
    { (yyval.opval) = invert(scalar((ps[0].val.opval))); ;}
    break;

  case 48:
#line 466 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); intro_my(); ;}
    break;

  case 49:
#line 470 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); intro_my(); ;}
    break;

  case 50:
#line 474 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); intro_my(); ;}
    break;

  case 51:
#line 479 "perly.y"
    {
#ifdef MAD
			  YYSTYPE tmplval;
			  tmplval.pval = NULL;
			  (yyval.p_tkval) = newMADTOKEN(OP_NULL, tmplval, 0);
#else
			  (yyval.p_tkval) = NULL;
#endif
			;}
    break;

  case 53:
#line 493 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 54:
#line 495 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 55:
#line 497 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 56:
#line 499 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 57:
#line 501 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 58:
#line 506 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 59:
#line 510 "perly.y"
    { (yyval.opval) = newOP(OP_NULL,0);
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),'p');
                          append_madprops_pv("peg",(yyval.opval),'>');
			;}
    break;

  case 60:
#line 517 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
#ifdef MAD
			  (yyval.opval) = newFORM((ps[-2].val.ival), (ps[-1].val.opval), (ps[0].val.opval));
			  prepend_madprops((ps[-3].val.i_tkval)->tk_mad, (yyval.opval), 'F');
                          append_madprops_pv("format", (yyval.opval), '>');
			  (ps[-3].val.i_tkval)->tk_mad = 0;
			  token_free((ps[-3].val.i_tkval));
#else
			  newFORM((ps[-2].val.ival), (ps[-1].val.opval), (ps[0].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
			;}
    break;

  case 61:
#line 531 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 62:
#line 532 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 63:
#line 537 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
#ifdef MAD
			  (yyval.opval) = newMYSUB((ps[-4].val.ival), (ps[-3].val.opval), (ps[-2].val.opval), (ps[-1].val.opval), (ps[0].val.opval));
			  token_getmad((ps[-5].val.i_tkval),(yyval.opval),'d');
#else
			  newMYSUB((ps[-4].val.ival), (ps[-3].val.opval), (ps[-2].val.opval), (ps[-1].val.opval), (ps[0].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
			;}
    break;

  case 64:
#line 550 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
#ifdef MAD
			  {
			      OP* o = newSVOP(OP_ANONCODE, 0,
				(SV*)newATTRSUB((ps[-4].val.ival), (ps[-3].val.opval), (ps[-2].val.opval), (ps[-1].val.opval), (ps[0].val.opval)));
			      (yyval.opval) = newOP(OP_NULL,0);
			      op_getmad(o,(yyval.opval),'&');
			      op_getmad((ps[-3].val.opval),(yyval.opval),'n');
			      op_getmad((ps[-2].val.opval),(yyval.opval),'s');
			      op_getmad((ps[-1].val.opval),(yyval.opval),'h');
			      token_getmad((ps[-5].val.i_tkval),(yyval.opval),'d');
			      append_madprops((ps[0].val.opval)->op_madprop, (yyval.opval), 0);
                              append_madprops_pv("sub", (yyval.opval), '<');
			      (ps[0].val.opval)->op_madprop = 0;
			    }
#else
			  newATTRSUB((ps[-4].val.ival), (ps[-3].val.opval), (ps[-2].val.opval), (ps[-1].val.opval), (ps[0].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
			;}
    break;

  case 65:
#line 573 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, 0);
			    SAVEFREESV(PL_compcv); ;}
    break;

  case 66:
#line 579 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, CVf_ANON);
			    SAVEFREESV(PL_compcv); ;}
    break;

  case 67:
#line 584 "perly.y"
    { (yyval.ival) = start_subparse(TRUE, 0);
			    SAVEFREESV(PL_compcv); ;}
    break;

  case 68:
#line 589 "perly.y"
    { const char *const name = SvPV_nolen_const(((SVOP*)(ps[0].val.opval))->op_sv);
			  if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT") || strEQ(name, "CHECK")
			      || strEQ(name, "UNITCHECK"))
			      CvSPECIAL_on(PL_compcv);
			  (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 69:
#line 599 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 71:
#line 605 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 72:
#line 607 "perly.y"
    { (yyval.opval) = (ps[0].val.opval);
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),':');
                          append_madprops_pv("attrlist",(yyval.opval),'>');
			;}
    break;

  case 73:
#line 612 "perly.y"
    { (yyval.opval) = IF_MAD(
				    newOP(OP_NULL, 0),
				    (OP*)NULL
				);
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),':');
                          append_madprops_pv("attrlist",(yyval.opval),'>');
			;}
    break;

  case 74:
#line 623 "perly.y"
    { (yyval.opval) = (ps[0].val.opval);
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),':');
                          append_madprops_pv("attrlist",(yyval.opval),'>');
			;}
    break;

  case 75:
#line 628 "perly.y"
    { (yyval.opval) = IF_MAD(
				    newOP(OP_NULL, 0),
				    (OP*)NULL
				);
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),':');
                          append_madprops_pv("attrlist",(yyval.opval),'>');
			;}
    break;

  case 76:
#line 638 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 77:
#line 639 "perly.y"
    { (yyval.opval) = IF_MAD(
				    newOP(OP_NULL,0),
				    (OP*)NULL
				);
			  PL_parser->expect = XSTATE;
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),';');
			;}
    break;

  case 78:
#line 649 "perly.y"
    {
#ifdef MAD
			  (yyval.opval) = package((ps[-1].val.opval));
			  token_getmad((ps[-2].val.i_tkval),(yyval.opval),'o');
			  token_getmad((ps[0].val.i_tkval),(yyval.opval),';');
                          append_madprops_pv("package",(yyval.opval),'>');
#else
			  package((ps[-1].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
			;}
    break;

  case 79:
#line 663 "perly.y"
    { CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ ;}
    break;

  case 80:
#line 665 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
#ifdef MAD
			  (yyval.opval) = utilize(IVAL((ps[-6].val.i_tkval)), (ps[-5].val.ival), (ps[-3].val.opval), (ps[-2].val.opval), (ps[-1].val.opval));
			  token_getmad((ps[-6].val.i_tkval),(yyval.opval),'o');
			  token_getmad((ps[0].val.i_tkval),(yyval.opval),';');
			  if (PL_parser->rsfp_filters &&
				      AvFILLp(PL_parser->rsfp_filters) >= 0)
			      append_madprops_pv("sourcefilter", (yyval.opval), '!');
#else
			  utilize(IVAL((ps[-6].val.i_tkval)), (ps[-5].val.ival), (ps[-3].val.opval), (ps[-2].val.opval), (ps[-1].val.opval));
			  (yyval.opval) = (OP*)NULL;
#endif
			;}
    break;

  case 81:
#line 682 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[-2].val.opval), (ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
                          append_madprops_pv("operator",(yyval.opval),'>');
			;}
    break;

  case 82:
#line 687 "perly.y"
    { (yyval.opval) = newLOGOP(IVAL((ps[-1].val.i_tkval)), 0, (ps[-2].val.opval), (ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
                          append_madprops_pv("operator",(yyval.opval),'>');
			;}
    break;

  case 83:
#line 692 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[-2].val.opval), (ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
                          append_madprops_pv("operator",(yyval.opval),'>');
			;}
    break;

  case 85:
#line 701 "perly.y"
    {
#ifdef MAD
			  OP* op = newNULLLIST();
			  token_getmad((ps[0].val.i_tkval),op,',');
			  (yyval.opval) = append_elem(OP_LIST, (ps[-1].val.opval), op);
                          append_madprops_pv(",", op, '>');
#else
			  (yyval.opval) = (ps[-1].val.opval);
#endif
			;}
    break;

  case 86:
#line 712 "perly.y"
    { 
			  OP* term = (ps[0].val.opval);
			  DO_MAD(
			      term = newUNOP(OP_NULL, 0, term);
			      token_getmad((ps[-1].val.i_tkval),term,',');
                              append_madprops_pv(",", term, '>');
			  )
			  (yyval.opval) = append_elem(OP_LIST, (ps[-2].val.opval), term);
			;}
    break;

  case 88:
#line 726 "perly.y"
    { (yyval.opval) = convert(IVAL((ps[-2].val.i_tkval)), OPf_STACKED,
				prepend_elem(OP_LIST, newGVREF(IVAL((ps[-2].val.i_tkval)),(ps[-1].val.opval)), (ps[0].val.opval)) );
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 89:
#line 731 "perly.y"
    { (yyval.opval) = convert(IVAL((ps[-4].val.i_tkval)), OPf_STACKED,
				prepend_elem(OP_LIST, newGVREF(IVAL((ps[-4].val.i_tkval)),(ps[-2].val.opval)), (ps[-1].val.opval)) );
			  TOKEN_GETMAD((ps[-4].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 90:
#line 738 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, scalar((ps[-5].val.opval)), (ps[-1].val.opval)),
				    newUNOP(OP_METHOD, 0, (ps[-3].val.opval))));
			  TOKEN_GETMAD((ps[-4].val.i_tkval),(yyval.opval),'A');
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 91:
#line 747 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST, scalar((ps[-2].val.opval)),
				    newUNOP(OP_METHOD, 0, (ps[0].val.opval))));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'A');
			;}
    break;

  case 92:
#line 753 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, (ps[-1].val.opval), (ps[0].val.opval)),
				    newUNOP(OP_METHOD, 0, (ps[-2].val.opval))));
			;}
    break;

  case 93:
#line 759 "perly.y"
    { (yyval.opval) = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, (ps[-3].val.opval), (ps[-1].val.opval)),
				    newUNOP(OP_METHOD, 0, (ps[-4].val.opval))));
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 94:
#line 767 "perly.y"
    { (yyval.opval) = convert(IVAL((ps[-1].val.i_tkval)), 0, (ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 95:
#line 771 "perly.y"
    { (yyval.opval) = convert(IVAL((ps[-3].val.i_tkval)), 0, (ps[-1].val.opval));
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 96:
#line 777 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[-1].val.ival), 0, (OP*)NULL, (ps[0].val.opval)); ;}
    break;

  case 97:
#line 780 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 append_elem(OP_LIST,
				   prepend_elem(OP_LIST, (ps[-1].val.opval), (ps[0].val.opval)), (ps[-4].val.opval)));
			;}
    break;

  case 100:
#line 795 "perly.y"
    { (yyval.opval) = newBINOP(OP_GELEM, 0, (ps[-4].val.opval), scalar((ps[-2].val.opval)));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 101:
#line 802 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0, oopsAV((ps[-3].val.opval)), scalar((ps[-1].val.opval)));
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 102:
#line 807 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[-4].val.opval)),OP_RV2AV),
					scalar((ps[-1].val.opval)));
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 103:
#line 815 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[-3].val.opval)),OP_RV2AV),
					scalar((ps[-1].val.opval)));
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 104:
#line 822 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0, oopsHV((ps[-4].val.opval)), jmaybe((ps[-2].val.opval)));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 105:
#line 829 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[-5].val.opval)),OP_RV2HV),
					jmaybe((ps[-2].val.opval)));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[-4].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 106:
#line 839 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[-4].val.opval)),OP_RV2HV),
					jmaybe((ps[-2].val.opval)));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 107:
#line 848 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[-3].val.opval))));
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 108:
#line 855 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   append_elem(OP_LIST, (ps[-1].val.opval),
				       newCVREF(0, scalar((ps[-4].val.opval)))));
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),'a');
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 109:
#line 864 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   append_elem(OP_LIST, (ps[-1].val.opval),
					       newCVREF(0, scalar((ps[-3].val.opval)))));
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 110:
#line 871 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[-2].val.opval))));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 111:
#line 877 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[-1].val.opval), (ps[-4].val.opval));
			  TOKEN_GETMAD((ps[-5].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),')');
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 112:
#line 884 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[-1].val.opval), (OP*)NULL);
			  TOKEN_GETMAD((ps[-4].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),')');
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 113:
#line 894 "perly.y"
    { (yyval.opval) = newASSIGNOP(OPf_STACKED, (ps[-2].val.opval), IVAL((ps[-1].val.i_tkval)), (ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
                          append_madprops_pv("operator",(yyval.opval),'>');
			;}
    break;

  case 114:
#line 899 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[-1].val.i_tkval)), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
                          append_madprops_pv("operator",(yyval.opval),'>');
			;}
    break;

  case 115:
#line 904 "perly.y"
    {   if (IVAL((ps[-1].val.i_tkval)) != OP_REPEAT)
				scalar((ps[-2].val.opval));
			    (yyval.opval) = newBINOP(IVAL((ps[-1].val.i_tkval)), 0, (ps[-2].val.opval), scalar((ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
                          append_madprops_pv("operator",(yyval.opval),'>');
			;}
    break;

  case 116:
#line 911 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[-1].val.i_tkval)), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
                          append_madprops_pv("operator",(yyval.opval),'>');
			;}
    break;

  case 117:
#line 916 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[-1].val.i_tkval)), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
                          append_madprops_pv("operator",(yyval.opval),'>');
			;}
    break;

  case 118:
#line 921 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[-1].val.i_tkval)), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
                          append_madprops_pv("operator",(yyval.opval),'>');
			;}
    break;

  case 119:
#line 926 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[-1].val.i_tkval)), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
                          append_madprops_pv("operator",(yyval.opval),'>');
			;}
    break;

  case 120:
#line 931 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[-1].val.i_tkval)), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
                          append_madprops_pv("operator",(yyval.opval),'>');
			;}
    break;

  case 121:
#line 936 "perly.y"
    { (yyval.opval) = newBINOP(IVAL((ps[-1].val.i_tkval)), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
                          append_madprops_pv("operator",(yyval.opval),'>');
			;}
    break;

  case 122:
#line 941 "perly.y"
    {
			  (yyval.opval) = newRANGE(IVAL((ps[-1].val.i_tkval)), scalar((ps[-2].val.opval)), scalar((ps[0].val.opval)));
			  DO_MAD({
			      UNOP *op;
			      op = (UNOP*)(yyval.opval);
			      op = (UNOP*)op->op_first;	/* get to flop */
			      op = (UNOP*)op->op_first;	/* get to flip */
			      op = (UNOP*)op->op_first;	/* get to range */
			      token_getmad((ps[-1].val.i_tkval),(OP*)op,'o');
			    })
			;}
    break;

  case 123:
#line 953 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[-2].val.opval), (ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
                          append_madprops_pv("operator",(yyval.opval),'>');
			;}
    break;

  case 124:
#line 958 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[-2].val.opval), (ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
                          append_madprops_pv("operator",(yyval.opval),'>');
			;}
    break;

  case 125:
#line 963 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[-2].val.opval), (ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
                          append_madprops_pv("operator",(yyval.opval),'>');
			;}
    break;

  case 126:
#line 968 "perly.y"
    { (yyval.opval) = bind_match(IVAL((ps[-1].val.i_tkval)), (ps[-2].val.opval), (ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),
				((yyval.opval)->op_type == OP_NOT
				    ? ((UNOP*)(yyval.opval))->op_first : (yyval.opval)),
				'~');
                          append_madprops_pv("bind_match",
                                             ((yyval.opval)->op_type == OP_NOT ? ((UNOP*)(yyval.opval))->op_first : (yyval.opval)),
                                             '>');
			;}
    break;

  case 127:
#line 981 "perly.y"
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 128:
#line 985 "perly.y"
    { (yyval.opval) = IF_MAD(
				    newUNOP(OP_NULL, 0, (ps[0].val.opval)),
				    (ps[0].val.opval)
				);
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'+');
                          append_madprops_pv("unary+",(yyval.opval),'>');
			;}
    break;

  case 129:
#line 993 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 130:
#line 997 "perly.y"
    { (yyval.opval) = newUNOP(OP_COMPLEMENT, 0, scalar((ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 131:
#line 1001 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTINC, 0,
					mod(scalar((ps[-1].val.opval)), OP_POSTINC));
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 132:
#line 1006 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTDEC, 0,
					mod(scalar((ps[-1].val.opval)), OP_POSTDEC));
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 133:
#line 1011 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
					mod(scalar((ps[0].val.opval)), OP_PREINC));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 134:
#line 1016 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
					mod(scalar((ps[0].val.opval)), OP_PREDEC));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 135:
#line 1025 "perly.y"
    { (yyval.opval) = newANONLIST((ps[-1].val.opval));
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 136:
#line 1030 "perly.y"
    { (yyval.opval) = newANONLIST((OP*)NULL);
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 137:
#line 1035 "perly.y"
    { (yyval.opval) = newANONHASH((ps[-2].val.opval));
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 138:
#line 1041 "perly.y"
    { (yyval.opval) = newANONHASH((OP*)NULL);
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 139:
#line 1047 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[-3].val.ival), (ps[-2].val.opval), (ps[-1].val.opval), (ps[0].val.opval));
			  TOKEN_GETMAD((ps[-4].val.i_tkval),(yyval.opval),'o');
			  OP_GETMAD((ps[-2].val.opval),(yyval.opval),'s');
			  OP_GETMAD((ps[-1].val.opval),(yyval.opval),'h');
			;}
    break;

  case 140:
#line 1058 "perly.y"
    { (yyval.opval) = dofile((ps[0].val.opval), IVAL((ps[-1].val.i_tkval)));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 141:
#line 1062 "perly.y"
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, scope((ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'D');
                          append_madprops_pv("do",(yyval.opval),'>');
			;}
    break;

  case 142:
#line 1067 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB,
			    OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				scalar(newCVREF(
				    (OPpENTERSUB_AMPER<<8),
				    scalar((ps[-2].val.opval))
				)),(OP*)NULL)); dep();
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 143:
#line 1079 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB,
			    OPf_SPECIAL|OPf_STACKED,
			    append_elem(OP_LIST,
				(ps[-1].val.opval),
				scalar(newCVREF(
				    (OPpENTERSUB_AMPER<<8),
				    scalar((ps[-3].val.opval))
				)))); dep();
			  TOKEN_GETMAD((ps[-4].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 144:
#line 1092 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				scalar(newCVREF(0,scalar((ps[-2].val.opval)))), (OP*)NULL)); dep();
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 145:
#line 1100 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				(ps[-1].val.opval),
				scalar(newCVREF(0,scalar((ps[-3].val.opval)))))); dep();
			  TOKEN_GETMAD((ps[-4].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 150:
#line 1116 "perly.y"
    { (yyval.opval) = newCONDOP(0, (ps[-4].val.opval), (ps[-2].val.opval), (ps[0].val.opval));
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),'?');
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),':');
                          append_madprops_pv("?",(yyval.opval),'>');
			;}
    break;

  case 151:
#line 1122 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, mod((ps[0].val.opval),OP_REFGEN));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
                          append_madprops_pv("operator",(yyval.opval),'>');
			;}
    break;

  case 152:
#line 1127 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 153:
#line 1129 "perly.y"
    { (yyval.opval) = localize((ps[0].val.opval),IVAL((ps[-1].val.i_tkval)));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'k');
			;}
    break;

  case 154:
#line 1133 "perly.y"
    { (yyval.opval) = sawparens(IF_MAD(newUNOP(OP_NULL,0,(ps[-1].val.opval)), (ps[-1].val.opval)));
                          append_madprops_pv("(", (yyval.opval), '>');
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 155:
#line 1139 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST());
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 156:
#line 1144 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 157:
#line 1146 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 158:
#line 1148 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 159:
#line 1150 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 160:
#line 1152 "perly.y"
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[0].val.opval), OP_AV2ARYLEN));;}
    break;

  case 161:
#line 1154 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 162:
#line 1156 "perly.y"
    { (yyval.opval) = prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list((ps[-1].val.opval)),
					ref((ps[-3].val.opval), OP_ASLICE)));
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'[');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),']');
			;}
    break;

  case 163:
#line 1165 "perly.y"
    { (yyval.opval) = prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list((ps[-2].val.opval)),
					ref(oopsHV((ps[-4].val.opval)), OP_HSLICE)));
			    PL_parser->expect = XOPERATOR;
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),'{');
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),';');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),'}');
			;}
    break;

  case 164:
#line 1176 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 165:
#line 1178 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[0].val.opval))); ;}
    break;

  case 166:
#line 1180 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[-2].val.opval)));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 167:
#line 1185 "perly.y"
    {
			  (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST, (ps[-1].val.opval), scalar((ps[-3].val.opval))));
			  DO_MAD({
			      OP* op = (yyval.opval);
			      if (op->op_type == OP_CONST) { /* defeat const fold */
				op = (OP*)op->op_madprop->mad_val;
			      }
			      token_getmad((ps[-2].val.i_tkval),op,'(');
			      token_getmad((ps[0].val.i_tkval),op,')');
			  })
			;}
    break;

  case 168:
#line 1198 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, (ps[0].val.opval), scalar((ps[-1].val.opval))));
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 169:
#line 1203 "perly.y"
    { (yyval.opval) = newOP(IVAL((ps[0].val.i_tkval)), OPf_SPECIAL);
			    PL_hints |= HINT_BLOCK_SCOPE;
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 170:
#line 1208 "perly.y"
    { (yyval.opval) = newLOOPEX(IVAL((ps[-1].val.i_tkval)),(ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 171:
#line 1212 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[0].val.opval)));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 172:
#line 1216 "perly.y"
    { (yyval.opval) = newOP(IVAL((ps[0].val.i_tkval)), 0);
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 173:
#line 1220 "perly.y"
    { (yyval.opval) = newUNOP(IVAL((ps[-1].val.i_tkval)), 0, (ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 174:
#line 1224 "perly.y"
    { (yyval.opval) = newUNOP(IVAL((ps[-1].val.i_tkval)), 0, (ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 175:
#line 1228 "perly.y"
    { (yyval.opval) = newOP(OP_REQUIRE, (ps[0].val.i_tkval) ? OPf_SPECIAL : 0);
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 176:
#line 1232 "perly.y"
    { (yyval.opval) = newUNOP(OP_REQUIRE, (ps[-1].val.i_tkval) ? OPf_SPECIAL : 0, (ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 177:
#line 1236 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[0].val.opval))); ;}
    break;

  case 178:
#line 1238 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, (ps[0].val.opval), scalar((ps[-1].val.opval)))); ;}
    break;

  case 179:
#line 1241 "perly.y"
    { (yyval.opval) = newOP(IVAL((ps[0].val.i_tkval)), 0);
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),'o');
			;}
    break;

  case 180:
#line 1245 "perly.y"
    { (yyval.opval) = newOP(IVAL((ps[-2].val.i_tkval)), 0);
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 181:
#line 1251 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				scalar((ps[0].val.opval))); ;}
    break;

  case 182:
#line 1254 "perly.y"
    { (yyval.opval) = (IVAL((ps[-2].val.i_tkval)) == OP_NOT)
			    ? newUNOP(IVAL((ps[-2].val.i_tkval)), 0, newSVOP(OP_CONST, 0, newSViv(0)))
			    : newOP(IVAL((ps[-2].val.i_tkval)), OPf_SPECIAL);

			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 183:
#line 1263 "perly.y"
    { (yyval.opval) = newUNOP(IVAL((ps[-3].val.i_tkval)), 0, (ps[-1].val.opval));
			  TOKEN_GETMAD((ps[-3].val.i_tkval),(yyval.opval),'o');
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 184:
#line 1269 "perly.y"
    { (yyval.opval) = pmruntime((ps[-3].val.opval), (ps[-1].val.opval), 1);
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 187:
#line 1276 "perly.y"
    {
			  (yyval.opval) = newLISTOP(OP_DIE, 0, newOP(OP_PUSHMARK, 0),
				newSVOP(OP_CONST, 0, newSVpvs("Unimplemented")));
			;}
    break;

  case 188:
#line 1284 "perly.y"
    { (yyval.opval) = my_attrs((ps[-1].val.opval),(ps[0].val.opval));
			  DO_MAD(
			      token_getmad((ps[-2].val.i_tkval),(yyval.opval),'d');
			      append_madprops((ps[0].val.opval)->op_madprop, (yyval.opval), 'h');
			      (ps[0].val.opval)->op_madprop = 0;
			  )
			;}
    break;

  case 189:
#line 1292 "perly.y"
    { (yyval.opval) = localize((ps[0].val.opval),IVAL((ps[-1].val.i_tkval)));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'d');
			;}
    break;

  case 190:
#line 1299 "perly.y"
    { (yyval.opval) = sawparens((ps[-1].val.opval));
			  TOKEN_GETMAD((ps[-2].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 191:
#line 1304 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST());
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'(');
			  TOKEN_GETMAD((ps[0].val.i_tkval),(yyval.opval),')');
			;}
    break;

  case 192:
#line 1309 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 193:
#line 1311 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 194:
#line 1313 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 195:
#line 1318 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 196:
#line 1320 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 197:
#line 1324 "perly.y"
    { (yyval.opval) = (OP*)NULL; ;}
    break;

  case 198:
#line 1326 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;

  case 199:
#line 1328 "perly.y"
    {
#ifdef MAD
			  OP* op = newNULLLIST();
			  token_getmad((ps[0].val.i_tkval),op,',');
			  (yyval.opval) = append_elem(OP_LIST, (ps[-1].val.opval), op);
                          append_madprops_pv(",", op, '>');
#else
			  (yyval.opval) = (ps[-1].val.opval);
#endif

			;}
    break;

  case 200:
#line 1344 "perly.y"
    { PL_parser->in_my = 0; (yyval.opval) = my((ps[0].val.opval)); ;}
    break;

  case 201:
#line 1348 "perly.y"
    { (yyval.opval) = newCVREF(IVAL((ps[-1].val.i_tkval)),(ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'&');
			;}
    break;

  case 202:
#line 1354 "perly.y"
    { (yyval.opval) = newSVREF((ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'$');
			;}
    break;

  case 203:
#line 1360 "perly.y"
    { (yyval.opval) = newAVREF((ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'@');
			;}
    break;

  case 204:
#line 1366 "perly.y"
    { (yyval.opval) = newHVREF((ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'%');
			;}
    break;

  case 205:
#line 1372 "perly.y"
    { (yyval.opval) = newAVREF((ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'l');
			;}
    break;

  case 206:
#line 1378 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[0].val.opval));
			  TOKEN_GETMAD((ps[-1].val.i_tkval),(yyval.opval),'*');
			;}
    break;

  case 207:
#line 1385 "perly.y"
    { (yyval.opval) = scalar((ps[0].val.opval)); ;}
    break;

  case 208:
#line 1387 "perly.y"
    { (yyval.opval) = scalar((ps[0].val.opval)); ;}
    break;

  case 209:
#line 1389 "perly.y"
    { (yyval.opval) = scope((ps[0].val.opval)); ;}
    break;

  case 210:
#line 1392 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); ;}
    break;


      default: break;
    
