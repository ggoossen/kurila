: BEGIN {die "You meant to run embed.pl"} # Stop early if fed to perl.
:
: Lines are of the form:
:    flags|return_type|function_name|arg1|arg2|...|argN
:
: A line may be continued on another by ending it with a backslash.
: Leading and trailing whitespace will be ignored in each component.
:
: flags are single letters with following meanings:
:	A		member of public API
:	m		Implemented as a macro - no export, no
:			proto, no #define
:       S               Has Cv, Hv, Av, Gv macros
:       i               function is inline
:	d		function has documentation with its source
:	s		static function, should have an S_ prefix in
:			source file; for macros (m), suffix the usage
:			example with a semicolon
:	n		has no implicit interpreter/thread context argument
:	p		function has a Perl_ prefix
:	f		function takes printf style format string, varargs
:	r		function never returns
:	o		has no compatibility macro (#define foo Perl_foo)
:	x		not exported
:	X		explicitly exported
:	M		may change
:	E		visible to extensions included in the Perl core
:	b		binary backward compatibility; function is a macro
:			but has also Perl_ implementation (which is exported)
:	U		suppress usage example in autogenerated documentation
:	a		allocates memory a la malloc/calloc.  Is also "R".
:	R		Return value must not be ignored.
:	P		pure function: no effects except the return value;
:			return value depends only on parms and/or globals
: (see also L<perlguts/Internal Functions> for those flags.)
:
: Pointer parameters that must not be passed NULLs should be prefixed with NN.
:
: Pointer parameters that may be NULL should be prefixed with NULLOK.  This has
: no effect on output yet.  It's a notation for the maintainers to know "I have
: defined whether NULL is OK or not" rather than having neither NULL or NULLOK,
: which is ambiguous.
:
: Individual flags may be separated by whitespace.

START_EXTERN_C

#if defined(PERL_IMPLICIT_SYS)
Ano	|PerlInterpreter*|perl_alloc_using \
				|NN struct IPerlMem *ipM \
				|NN struct IPerlMem *ipMS \
				|NN struct IPerlMem *ipMP \
				|NN struct IPerlEnv *ipE \
				|NN struct IPerlStdIO *ipStd \
				|NN struct IPerlLIO *ipLIO \
				|NN struct IPerlDir *ipD \
				|NN struct IPerlSock *ipS \
				|NN struct IPerlProc *ipP
#endif
Anod	|PerlInterpreter*	|perl_alloc
Anod	|void	|perl_construct	|NN PerlInterpreter *my_perl
Anod	|int	|perl_destruct	|NN PerlInterpreter *my_perl
Anod	|void	|perl_free	|NN PerlInterpreter *my_perl
Anod	|int	|perl_run	|NN PerlInterpreter *my_perl
Anod	|int	|perl_parse	|NN PerlInterpreter *my_perl|XSINIT_t xsinit \
				|int argc|NULLOK char** argv|NULLOK char** env
AnpR	|bool	|doing_taint	|int argc|NULLOK char** argv|NULLOK char** env

Aanop	|Malloc_t|malloc	|MEM_SIZE nbytes
Aanop	|Malloc_t|calloc	|MEM_SIZE elements|MEM_SIZE size
Aanop	|Malloc_t|realloc	|Malloc_t where|MEM_SIZE nbytes
Anop	|Free_t	|mfree		|Malloc_t where
#if defined(MYMALLOC)
npR	|MEM_SIZE|malloced_size	|NN void *p
npR	|MEM_SIZE|malloc_good_size	|size_t nbytes
#endif

AnpR	|void*	|get_context
Anp	|void	|set_context	|NN void *t

END_EXTERN_C

/* functions with flag 'n' should come before here */
START_EXTERN_C
Aip	|SV*	|hvTsv	|NULLOK HV *hv
Aip	|SV*	|avTsv	|NULLOK AV *av
Aip	|SV*	|cvTsv	|NULLOK CV *cv
Aip	|SV*	|gvTsv	|NULLOK GV *gv
Aip	|SV*	|ioTsv	|NULLOK struct io *io
Aip	|SV*	|reTsv	|NULLOK REGEXP *re
Aip	|SV**	|avpTsvp	|NULLOK AV **avp
Aip	|SV**	|hvpTsvp	|NULLOK HV **hvp
Aip	|SV**	|cvpTsvp	|NULLOK CV **cvp
Aip	|SV**	|gvpTsvp	|NULLOK GV **gvp
Aip	|SV**	|iopTsvp	|NULLOK struct io **iop
Aip	|SV**	|repTsvp	|NULLOK REGEXP **rep
Aip	|AV*	|svTav	|NULLOK SV *sv
Aip	|HV*	|svThv	|NULLOK SV *sv
Aip	|CV*	|svTcv	|NULLOK SV *sv
Aip	|GV*	|svTgv	|NULLOK SV *sv
Aip	|IO*	|svTio	|NULLOK SV *sv
Aip	|REGEXP*	|svTre	|NULLOK SV *sv

Aip	|const char*	|SvPVX_const	|NN SV *sv
Aip	|char*	|SvPVX_mutable	|NN SV *sv
AipS	|void	|SvREFCNT_dec	|NULLOK XV *sv
AipS	|SV*	|SvREFCNT_inc	|NULLOK XV *sv
AipS	|void	|SvTMPREFCNT_inc	|NULLOK XV *sv
Ap	|void	|del_body_allocated	|NN char* p|svtype sv_type
AipS	|void	|sv_cp_replace	|NN XV **sv_d|NULLOK XV *sv_s
Aip	|IV	|SvIV	|NN SV *sv
Aip	|UV	|SvUV	|NN SV *sv
Aip	|NV	|SvNV	|NN SV *sv
Aip	|STRLEN	|SvCUR	|NN SV *sv
Aip	|void	|SvCUR_set	|NN SV *sv|STRLEN len
Aip	|char *	|SvPVx_nolen	|NN SV *sv
Aip	|const char *	|SvPVx_nolen_const	|NN SV *sv
Aip	|bool	|SvTRUE	|NN SV *sv
Aip	|void	|SvIOKp_on	|NN SV *sv
Aip	|SV*	|loc_desc	|NULLOK SV *loc
Aip	|SV*	|loc_name	|NULLOK SV *loc
Aip	|SV*	|SvNAME	|NN SV *sv
Aip	|SV*	|LocationFilename	|NULLOK SV *location

Aip     |PERL_CONTEXT* |push_block  |U8 t|NN SV** sp|U8 gimme
Aip     |PERL_CONTEXT* |pop_block
Aip     |void |push_stack  |I32 type|NN SV*** spp
Aip     |void |pop_stack
Aip     |void |cx_free_eval		|NN PERL_CONTEXT* cx

#  include "pp_proto.h"
p	|OP*	|append_elem	|I32 optype|NULLOK OP* first|NULLOK OP* last
p	|OP*	|append_list	|I32 optype|NULLOK LISTOP* first|NULLOK LISTOP* last
p	|I32	|apply		|I32 type|NN SV** mark|NN SV** sp
Apd	|void	|av_clear	|NN AV *av
Apd	|SV*	|av_delete	|NN AV *av|I32 key|I32 flags
ApdR	|bool	|av_exists	|NN AV *av|I32 key
Apd	|void	|av_extend	|NN AV *av|I32 key
pR	|AV*	|av_fake	|I32 size|NN SV **strp
ApdR	|SV**	|av_fetch	|NN AV *av|I32 key|I32 lval
Apd	|void	|av_fill	|NN AV *av|I32 fill
ApdR	|I32	|av_len		|NN AV *av
ApdR	|AV*	|av_make	|I32 size|NN SV **strp
Apd	|SV*	|av_pop		|NN AV *av
ApdoxM	|void	|av_create_and_push|NN AV **const avp|NN SV *const val
Apd	|void	|av_push	|NN AV *av|NN SV *val
EXp	|void	|av_reify	|NN AV *av
ApdR	|SV*	|av_shift	|NN AV *av
Apd	|SV**	|av_store	|NN AV *av|I32 key|NULLOK SV *val
Apd	|void	|av_undef	|NN AV *av
Apd	|void	|av_tmprefcnt	|NN AV *av
ApdoxM	|SV**	|av_create_and_unshift_one|NN AV **const avp|NN SV *const val
Apd	|void	|av_unshift	|NN AV *av|I32 num
pR	|OP*	|bind_match	|I32 type|NN OP *left|NN OP *right
pR	|OP*	|block_end	|I32 floor|NULLOK OP* seq
ApR	|I32	|block_gimme
pR	|int	|block_start	|int full
p	|void	|boot_core_UNIVERSAL
p	|void	|boot_core_error
p	|void	|boot_core_version
p	|void	|boot_core_utf8
p	|void	|boot_core_Internals
p	|void	|boot_core_signals
p	|void	|boot_core_env
p	|void	|boot_core_PerlIO
Ap	|void	|call_list	|I32 oldscope|NN AV *paramList
pR	|bool	|cando		|Mode_t mode|bool effective|NN const Stat_t* statbufp
ApR	|U32	|cast_ulong	|NV f
ApR	|I32	|cast_i32	|NV f
ApR	|IV	|cast_iv	|NV f
ApR	|UV	|cast_uv	|NV f
#if !defined(HAS_TRUNCATE) && !defined(HAS_CHSIZE) && defined(F_FREESP)
ApR	|I32	|my_chsize	|int fd|Off_t length
#endif
pR	|OP*	|convert	|I32 optype|OPFLAGS flags|NULLOK OP* o|NULLOK SV* location
pM	|PERL_CONTEXT*	|create_eval_scope|U32 flags
: croak()'s first parm can be NULL.  Otherwise, mod_perl breaks.
Afprd	|void	|croak		|NULLOK const char* pat|...
Afprd	|void	|croak_at	|NULLOK SV* location|NULLOK const char* pat|...
Apr	|void	|vcroak		|NULLOK const char* pat|NULLOK va_list* args
Aprd	|void	|croak_xs_usage	|NN const CV *const cv \
				|NN const char *const params

#if defined(PERL_IMPLICIT_CONTEXT)
Afnrp	|void	|croak_nocontext|NN const char* pat|...
Afnp	|void	|die_nocontext	|NN const char* pat|...
Afnp	|void	|deb_nocontext	|NN const char* pat|...
Afnp	|char*	|form_nocontext	|NN const char* pat|...
Anp	|void	|load_module_nocontext|U32 flags|NN SV* name|NULLOK SV* ver|...
Afnp	|SV*	|mess_nocontext	|NN const char* pat|...
Afnp	|void	|warn_nocontext	|NN const char* pat|...
Afnp	|void	|warner_nocontext|U32 err|NN const char* pat|...
Afnp	|SV*	|newSVpvf_nocontext|NN const char *const pat|...
Afnp	|void	|sv_catpvf_nocontext|NN SV *const sv|NN const char *const pat|...
Afnp	|void	|sv_setpvf_nocontext|NN SV *const sv|NN const char *const pat|...
Afnp	|void	|sv_catpvf_mg_nocontext|NN SV *const sv|NN const char *const pat|...
Afnp	|void	|sv_setpvf_mg_nocontext|NN SV *const sv|NN const char *const pat|...
Afnp	|int	|fprintf_nocontext|NN PerlIO *stream|NN const char *format|...
Afnp	|int	|printf_nocontext|NN const char *format|...
#endif
pd	|void	|cv_clone_anon	|NN CV* dst|NN CV* src
ApdR	|SV*	|cv_const_sv	|NULLOK const CV* const cv
Api	|bool	|cv_assignarg_flag	|NN CV* cv
Api	|bool	|cv_optassignarg_flag	|NN CV* cv
Apd	|void	|cv_undef	|NN CV* cv
Apd	|void	|cv_tmprefcnt	|NN CV* cv
Ap	|void	|cx_dump	|NN PERL_CONTEXT* cx
Ap	|void	|cx_tmprefcnt	|NN PERL_CONTEXT* cx
Ap	|SV*	|filter_add	|NULLOK filter_t funcp|NULLOK SV* datasv
Ap	|void	|filter_del	|NN filter_t funcp
ApR	|I32	|filter_read	|int idx|NN SV *buf_sv|int maxlen
ApPR	|char**	|get_op_descs
ApPR	|char**	|get_op_names
pPR	|const char*	|get_no_modify
pPR	|U32*	|get_opargs
ApPR	|PPADDR_t*|get_ppaddr
EXpR	|I32	|cxinc
Afp	|void	|deb		|NN const char* pat|...
Ap	|void	|vdeb		|NN const char* pat|NULLOK va_list* args
Ap	|void	|debprofdump
Ap	|I32	|debop		|NN const OP* o
Ap	|I32	|debstack
Ap	|I32	|debstackptrs
Ap	|char*	|delimcpy	|NN char* to|NN const char* toend|NN const char* from \
				|NN const char* fromend|int delim|NN I32* retlen
pM	|void	|delete_eval_scope
p	|void	|deprecate	|NN const char *const s
p	|void	|deprecate_old	|NN const char *const s
Afp	|OP*	|die		|NULLOK const char* pat|...
sr	|void	|vdie		|NULLOK const char* pat|NULLOK va_list* args
pr	|void	|die_where	|NN SV *msv
Ap	|void	|dounwind	|I32 cxix
pmb	|bool	|do_aexec	|NULLOK SV* really|NN SV* const * mark|NN SV* const * sp
p	|bool	|do_aexec5	|NULLOK SV* really|NN SV* const * mark|NN SV* const * sp|int fd|int do_report
Ap	|int	|do_binmode	|NN PerlIO *fp|int iotype|int mode
p	|void	|do_chop	|NN SV *astr|NN SV *sv
Ap	|bool	|do_close	|NN GV* gv|bool not_implicit
p	|bool	|do_eof		|NN GV* gv

#ifdef PERL_DEFAULT_DO_EXEC3_IMPLEMENTATION
pmb	|bool	|do_exec	|NN const char* cmd
#else
p	|bool	|do_exec	|NN const char* cmd
#endif

#if defined(WIN32) || defined(__SYMBIAN32__) || defined(VMS)
Ap	|int	|do_aspawn	|NULLOK SV* really|NN SV** mark|NN SV** sp
Ap	|int	|do_spawn	|NN char* cmd
Ap	|int	|do_spawn_nowait|NN char* cmd
#endif
#if !defined(WIN32)
p	|bool	|do_exec3	|NN const char *incmd|int fd|int do_report
#endif
p	|void	|do_execfree
#ifdef PERL_IN_DOIO_C
s	|void	|exec_failed	|NN const char *cmd|int fd|int do_report
#endif
#if defined(HAS_MSG) || defined(HAS_SEM) || defined(HAS_SHM)
p	|I32	|do_ipcctl	|I32 optype|NN SV** mark|NN SV** sp
p	|I32	|do_ipcget	|I32 optype|NN SV** mark|NN SV** sp
p	|I32	|do_msgrcv	|NN SV** mark|NN SV** sp
p	|I32	|do_msgsnd	|NN SV** mark|NN SV** sp
p	|I32	|do_semop	|NN SV** mark|NN SV** sp
p	|I32	|do_shmio	|I32 optype|NN SV** mark|NN SV** sp
#endif
Ap	|void	|do_join	|NN SV *sv|NN SV *delim|NN SV *av
p	|OP*	|do_kv
p	|void	|bad_arg	|I32 n|NN const char* t|NN const char* name|NN SV *arg
p	|void	|do_arg_check	|NN SV** base	
Apmb	|bool	|do_open	|NN IO* io|NN const char* name|I32 len|int as_raw \
				|int rawmode|int rawperm|NULLOK PerlIO* supplied_fp
Ap	|bool	|do_openn	|NN IO* io|NN const char *oname|I32 len|int as_raw \
				|int rawmode|int rawperm|NULLOK PerlIO *supplied_fp \
				|NULLOK SV * const *svp|I32 num
p	|bool	|do_print	|NULLOK SV* sv|NN PerlIO* fp
pR	|OP*	|do_readline    |NN GV* gv
p	|I32	|do_chomp	|NN SV* sv
p	|bool	|do_seek	|NULLOK GV* gv|Off_t pos|int whence
Ap	|void	|do_sprintf	|NN SV* sv|I32 len|NN SV** sarg
p	|Off_t	|do_sysseek	|NN GV* gv|Off_t pos|int whence
pR	|Off_t	|do_tell	|NN GV* gv
p	|UV	|do_vecget	|NN SV* sv|I32 offset|I32 size
p	|void	|do_vecset
p	|void	|do_vop		|I32 optype|NN SV* sv|NN SV* left|NN SV* right
ApR	|I32	|dowantarray
Ap	|void	|dump_all
Ap	|void	|dump_eval
#if defined(DUMP_FDS)
Ap	|void	|dump_fds	|NN char* s
#endif
Ap	|void	|gv_dump	|NN GV* gv
Ap	|void	|op_dump	|NN const OP *o
Ap	|void	|pmop_dump	|NULLOK PMOP* pm
Ap	|void	|dump_packsubs	|NN const HV* stash
Ap	|void	|dump_sub	|NN const GV* gv
Apd	|void	|fbm_compile	|NN SV* sv|U32 flags
ApdR	|char*	|fbm_instr	|NN char* big|NN char* bigend \
				|NN SV* littlestr|U32 flags
p	|char*	|find_script	|NN const char *scriptname|bool dosearch \
				|NULLOK const char *const *const search_ext|I32 flags
p	|OP*	|force_list	|NULLOK OP* arg
p	|OP*	|fold_constants	|NN OP *o
Afpd	|char*	|form		|NN const char* pat|...
Ap	|char*	|vform		|NN const char* pat|NULLOK va_list* args
Ap	|void	|free_tmps
p	|OP*	|gen_constant_list|NULLOK OP* o
#if !defined(HAS_GETENV_LEN)
p	|char*	|getenv_len	|NN const char *env_elem|NN unsigned long *len
#endif
pox	|void	|get_db_sub	|NULLOK SV **svp|NN CV *cv
Ap	|void	|gp_free	|NULLOK GV* gv
Ap	|void	|gp_tmprefcnt	|NN GP* gp
Ap	|GP*	|gp_ref		|NULLOK GP* gp
Ap	|GV*	|gv_AVadd	|NN GV* gv
Ap	|GV*	|gv_HVadd	|NN GV* gv
Ap	|GV*	|gv_IOadd	|NN GV* gv
ApPi	|IO*	|gv_io	|NN GV* gv
Ap	|void	|gv_check	|NN const HV* stash
Ap	|void	|gv_efullname3	|NN SV* sv|NN const GV* gv|NULLOK const char* prefix
Ap	|GV*	|gv_fetchfile	|NN const char* name
Ap	|GV*	|gv_fetchfile_flags|NN const char *const name|const STRLEN len\
				|const U32 flags
Apd	|CV*	|gv_fetchmeth	|NULLOK HV* stash|NN const char* name|STRLEN len|I32 level
Apd	|CV*	|gv_fetchmethod	|NULLOK HV* stash|NN const char* name
ApdM	|CV*	|gv_fetchmethod_flags|NN HV* stash|NN const char* name \
				|U32 flags
Ap	|GV*	|gv_fetchpv	|NN const char* nambeg|I32 add|const svtype sv_type
Ap	|void	|gv_fullname3	|NN SV* sv|NN const GV* gv|NULLOK const char* prefix
pMox	|GP *	|newGP		|NN GV *const gv
Ap	|void	|gv_init	|NN GV* gv|NULLOK HV* stash|NN const char* name|STRLEN len|int multi
Ap	|void	|gv_name_set	|NN GV* gv|NN const char *name|U32 len|U32 flags
Apd	|HV*	|gv_stashpv	|NN const char* name|I32 flags
Apd	|HV*	|gv_stashpvn	|NN const char* name|U32 namelen|I32 flags
Apd	|HV*	|gv_stashsv	|NN SV* sv|I32 flags
Apd	|void	|hv_clear	|NULLOK HV *hv
Ap	|void	|hv_delayfree_ent|NN HV *hv|NULLOK HE *entry
Abmd	|SV*	|hv_delete	|NULLOK HV *hv|NN const char *key|I32 klen \
				|I32 flags
Abmd	|SV*	|hv_delete_ent	|NULLOK HV *hv|NN SV *keysv|I32 flags|U32 hash
AbmdR	|bool	|hv_exists	|NULLOK HV *hv|NN const char *key|I32 klen
AbmdR	|bool	|hv_exists_ent	|NULLOK HV *hv|NN SV *keysv|U32 hash
Abmd	|SV**	|hv_fetch	|NULLOK HV *hv|NN const char *key|I32 klen \
				|I32 lval
Abmd	|HE*	|hv_fetch_ent	|NULLOK HV *hv|NN SV *keysv|I32 lval|U32 hash
Ap	|void*	|hv_common	|NULLOK HV *hv|NULLOK SV *keysv \
				|NULLOK const char* key|STRLEN klen|int flags \
				|int action|NULLOK SV *val|U32 hash
Ap	|void*	|hv_common_key_len|NULLOK HV *hv|NN const char *key \
				|I32 klen_i32|const int action|NULLOK SV *val \
				|const U32 hash
Ap	|void	|hv_free_ent	|NN HV *hv|NULLOK HE *entryK
Apd	|I32	|hv_iterinit	|NN HV *hv
ApdR	|char*	|hv_iterkey	|NN HE* entry|NN I32* retlen
ApdR	|SV*	|hv_iterkeysv	|NN HE* entry
ApdRbm	|HE*	|hv_iternext	|NN HV *hv
ApdR	|SV*	|hv_iternextsv	|NN HV *hv|NN char **key|NN I32 *retlen
ApMdR	|HE*	|hv_iternext_flags|NN HV *hv|I32 flags
ApdR	|SV*	|hv_iterval	|NN HV *hv|NN HE *entry
Ap	|void	|hv_ksplit	|NN HV *hv|IV newmax
Apdbm	|void	|hv_magic	|NN HV *hv|NULLOK GV *gv|int how
Aip	|void	|hv_store	|NULLOK HV *hv|NULLOK const char *key \
				|I32 klen|NULLOK SV *val|U32 hash
Aip	|void	|hv_store_ent	|NULLOK HV *hv|NULLOK SV *key|NULLOK SV *val\
				|U32 hash
Aip	|void	|hv_store_flags	|NULLOK HV *hv|NULLOK const char *key \
				|I32 klen|NULLOK SV *val|U32 hash|int flags
Apd	|void	|hv_undef	|NULLOK HV *hv
Apd	|void	|hv_tmprefcnt	|NN HV *hv
ApP	|I32	|ibcmp		|NN const char* a|NN const char* b|I32 len
ApP	|I32	|ibcmp_locale	|NN const char* a|NN const char* b|I32 len
Apd	|I32	|ibcmp_utf8	|NN const char* s1|NULLOK char **pe1|UV l1 \
				|NN const char* s2|NULLOK char **pe2|UV l2
#if defined(PERL_IN_DOIO_C)
sR	|bool	|ingroup	|Gid_t testgid|bool effective
#endif
p	|void	|init_argv_symbols|int argc|NN char **argv
p	|void	|init_debugger
Ap	|void	|init_stacks
Ap	|void	|init_tm	|NN struct tm *ptm
pd	|U32	|intro_my
ApPR	|char*	|instr		|NN const char* big|NN const char* little
p	|bool	|io_close	|NN IO* io|bool not_implicit
pR	|OP*	|invert		|NULLOK OP* cmd
ApPR	|U32	|to_uni_upper_lc|U32 c
ApPR	|U32	|to_uni_title_lc|U32 c
ApPR	|U32	|to_uni_lower_lc|U32 c
ApPR	|bool	|is_uni_alnum	|UV c
ApPR	|bool	|is_uni_alnumc	|UV c
ApPR	|bool	|is_uni_idfirst	|UV c
ApPR	|bool	|is_uni_alpha	|UV c
ApPR	|bool	|is_uni_ascii	|UV c
ApPR	|bool	|is_uni_space	|UV c
ApPR	|bool	|is_uni_cntrl	|UV c
ApPR	|bool	|is_uni_graph	|UV c
ApPR	|bool	|is_uni_digit	|UV c
ApPR	|bool	|is_uni_upper	|UV c
ApPR	|bool	|is_uni_lower	|UV c
ApPR	|bool	|is_uni_print	|UV c
ApPR	|bool	|is_uni_punct	|UV c
ApPR	|bool	|is_uni_xdigit	|UV c
Ap	|UV	|to_uni_upper	|UV c|NN char *p|NN STRLEN *lenp
Ap	|UV	|to_uni_title	|UV c|NN char *p|NN STRLEN *lenp
Ap	|UV	|to_uni_lower	|UV c|NN char *p|NN STRLEN *lenp
Ap	|UV	|to_uni_fold	|UV c|NN char *p|NN STRLEN *lenp
ApPR	|bool	|is_uni_alnum_lc|UV c
ApPR	|bool	|is_uni_alnumc_lc|UV c
ApPR	|bool	|is_uni_idfirst_lc|UV c
ApPR	|bool	|is_uni_alpha_lc|UV c
ApPR	|bool	|is_uni_ascii_lc|UV c
ApPR	|bool	|is_uni_space_lc|UV c
ApPR	|bool	|is_uni_cntrl_lc|UV c
ApPR	|bool	|is_uni_graph_lc|UV c
ApPR	|bool	|is_uni_digit_lc|UV c
ApPR	|bool	|is_uni_upper_lc|UV c
ApPR	|bool	|is_uni_lower_lc|UV c
ApPR	|bool	|is_uni_print_lc|UV c
ApPR	|bool	|is_uni_punct_lc|UV c
ApPR	|bool	|is_uni_xdigit_lc|UV c
Apd	|STRLEN	|is_utf8_char	|NN const char *s
Apd	|bool	|is_utf8_string	|NN const char *s|STRLEN len
Apdmb	|bool	|is_utf8_string_loc|NN const char *s|STRLEN len|NULLOK const char **p
Apd	|bool	|is_utf8_string_loclen|NN const char *s|STRLEN len|NULLOK const char **ep|NULLOK STRLEN *el
ApR	|bool	|is_utf8_alnum	|NN const char *p
ApR	|bool	|is_utf8_alnumc	|NN const char *p
ApR	|bool	|is_utf8_idfirst|NN const char *p
ApR	|bool	|is_utf8_idcont	|NN const char *p
ApR	|bool	|is_utf8_alpha	|NN const char *p
ApR	|bool	|is_utf8_ascii	|NN const char *p
ApR	|bool	|is_utf8_space	|NN const char *p
ApR	|bool	|is_utf8_cntrl	|NN const char *p
ApR	|bool	|is_utf8_digit	|NN const char *p
ApR	|bool	|is_utf8_graph	|NN const char *p
ApR	|bool	|is_utf8_upper	|NN const char *p
ApR	|bool	|is_utf8_lower	|NN const char *p
ApR	|bool	|is_utf8_print	|NN const char *p
ApR	|bool	|is_utf8_punct	|NN const char *p
ApR	|bool	|is_utf8_xdigit	|NN const char *p
ApR	|bool	|is_utf8_mark	|NN const char *p
pP	|I32	|keyword	|NN const char* name|I32 len
Ap	|void	|leave_scope	|I32 base
Ap	|void	|scope_tmprefcnt
EXp	|void	|lex_end
p	|void	|lex_start	|NULLOK SV* line|NULLOK PerlIO *rsfp|bool new_filter
Ap	|void	|op_null	|NN OP* o
EXp	|void	|op_clear	|NN OP* o
Ap	|void	|op_refcnt_lock
Ap	|void	|op_refcnt_unlock
s	|OP*	|linklist	|NN OP *o
p	|OP*	|list		|NULLOK OP* o
p	|OP*	|listkids	|NULLOK OP* o
Apd	|void	|load_module|U32 flags|NN SV* name|NULLOK SV* ver|...
Ap	|void	|vload_module|U32 flags|NN SV* name|NULLOK SV* ver|NULLOK va_list* args
p	|OP*	|localize	|NN OP *o|I32 lex
ApdR	|I32	|looks_like_number|NN SV *const sv
Apd	|UV	|grok_bin	|NN const char* start|NN STRLEN* len_p|NN I32* flags|NULLOK NV *result
Apd	|UV	|grok_hex	|NN const char* start|NN STRLEN* len_p|NN I32* flags|NULLOK NV *result
Apd	|int	|grok_number	|NN const char *pv|STRLEN len|NULLOK UV *valuep
ApdR	|bool	|grok_numeric_radix|NN const char **sp|NN const char *send
Apd	|UV	|grok_oct	|NN const char* start|NN STRLEN* len_p|NN I32* flags|NULLOK NV *result
p	|int	|magic_clearisa	|NN SV* sv|NN MAGIC* mg
p	|bool	|is_magicsv	|NN const char* name
p	|void	|magic_get	|NN const char* name|NN SV* sv
p	|int	|magic_getuvar	|NN SV* sv|NN MAGIC* mg
p	|U32	|magic_regdata_cnt|NN SV* sv|NN MAGIC* mg
p	|int	|magic_regdatum_get|NN SV* sv|NN MAGIC* mg
pr	|int	|magic_regdatum_set|NN SV* sv|NN MAGIC* mg
p	|void	|magic_set	|NN const char* name|NN SV* sv
p	|int	|magic_setdbline|NN SV* sv|NN MAGIC* mg
p	|int	|magic_setisa	|NN SV* sv|NN MAGIC* mg
#ifndef NO_MATHOMS
p	|int	|magic_setglob	|NN SV* sv|NN MAGIC* mg
#endif
p	|int	|magic_setmglob	|NN SV* sv|NN MAGIC* mg
p	|int	|magic_setregexp|NN SV* sv|NN MAGIC* mg
p	|int	|magic_setuvar	|NN SV* sv|NN MAGIC* mg
p	|int	|magic_setutf8	|NN SV* sv|NN MAGIC* mg
Ap	|void	|markstack_grow
Afp	|SV*	|mess		|NN const char* pat|...
Ap	|SV*	|vmess		|NN const char* pat|NULLOK va_list* args
EXp	|void	|qerror		|NN SV* err
Apd	|void	|sortsv		|NULLOK SV** array|size_t num_elts|NN SVCOMPARE_t cmp
Apd	|void	|sortsv_flags	|NULLOK SV** array|size_t num_elts|NN SVCOMPARE_t cmp|U32 flags
Apd	|int	|mg_clear	|NN SV* sv
Apd	|int	|mg_copy	|NN SV *sv|NN SV *nsv|NULLOK const char *key \
				|I32 klen
pd	|void	|mg_localize	|NN SV* sv|NN SV* nsv
ApdR	|MAGIC*	|mg_find	|NULLOK const SV* sv|int type
Apd	|int	|mg_free	|NN SV* sv
Apd	|void	|mg_tmprefcnt	|NN SV* sv
Apd	|void	|mg_magical	|NN SV* sv
Apd	|int	|mg_set		|NN SV* sv
Ap	|void	|mini_mktime	|NN struct tm *ptm
EXp	|OP*	|mod		|NULLOK OP* o|I32 type
p	|OP*	|assign		|NN OP* o|bool partial|NN I32 *min_modcount|NN I32 *max_modcount
p	|OP*	|op_assign		|NN OP** po|I32 optype
p	|int	|mode_from_discipline|NULLOK const char* s|STRLEN len
Ap	|const char*	|moreswitches	|NN const char* s
p	|OP*	|my		|NN OP* o
Ap	|NV	|my_atof	|NN const char *s
#if (!defined(HAS_MEMCPY) && !defined(HAS_BCOPY)) || (!defined(HAS_MEMMOVE) && !defined(HAS_SAFE_MEMCPY) && !defined(HAS_SAFE_BCOPY))
Anp	|char*	|my_bcopy	|NN const char* from|NN char* to|I32 len
#endif
#if !defined(HAS_BZERO) && !defined(HAS_MEMSET)
Anp	|char*	|my_bzero	|NN char* loc|I32 len
#endif
Apr	|void	|my_exit	|U32 status
Apr	|void	|my_failure_exit
Ap	|I32	|my_fflush_all
Anp	|Pid_t	|my_fork
Anp	|void	|atfork_lock
Anp	|void	|atfork_unlock
Ap	|I32	|my_lstat
#if !defined(HAS_MEMCMP) || !defined(HAS_SANE_MEMCMP)
AnpP	|I32	|my_memcmp	|NN const char* s1|NN const char* s2|I32 len
#endif
#if !defined(HAS_MEMSET)
Anp	|void*	|my_memset	|NN char* loc|I32 ch|I32 len
#endif
Ap	|I32	|my_pclose	|NULLOK PerlIO* ptr
Ap	|PerlIO*|my_popen	|NN const char* cmd|NN const char* mode
Ap	|PerlIO*|my_popen_list	|NN const char* mode|int n|NN SV * const * args
Ap	|void	|my_setenv	|NULLOK const char* nam|NULLOK const char* val
Ap	|I32	|my_stat
Ap	|char *	|my_strftime	|NN const char *fmt|int sec|int min|int hour|int mday|int mon|int year|int wday|int yday|int isdst
#if defined(MYSWAP)
ApPa	|short	|my_swap	|short s
ApPa	|long	|my_htonl	|long l
ApPa	|long	|my_ntohl	|long l
#endif
p	|void	|my_unexec
Apa	|OP*	|newANONARRAY	|NULLOK OP* o|NULLOK SV* location
Apa	|OP*	|newANONHASH	|NULLOK OP* o|NULLOK SV* location
Ap	|OP*	|newANONSUB	|I32 floor|NULLOK OP* proto|NULLOK OP* block
Apa	|OP*	|newASSIGNOP	|OPFLAGS flags|NULLOK OP* left|I32 optype|NULLOK OP* right|NULLOK SV* location
Apa	|OP*	|newCONDOP	|OPFLAGS flags|NN OP* first|NULLOK OP* trueop|NULLOK OP* falseop|NULLOK SV* location
Apd	|CV*	|newCONSTSUB	|NULLOK const char* name|NULLOK SV* sv
Apa	|OP*	|newFOROP	|OPFLAGS flags|NULLOK char* label \
				|NULLOK OP* sv|NN OP* expr|NULLOK OP* block|NULLOK OP* cont|NULLOK SV* location
Apa	|OP*	|newLOGOP	|I32 optype|OPFLAGS flags|NN OP *first|NN OP *other|NULLOK SV* location
Apa	|OP*	|newLOOPEX	|I32 type|NN OP* label
Apa	|OP*	|newPRIVATEVAROP	|NN const char* varname|NULLOK SV* location
Apa	|OP*	|newLOOPOP	|OPFLAGS flags|I32 debuggable|NULLOK OP* expr|NULLOK OP* block|bool once|NULLOK SV* location
Apa	|OP*	|newNULLLIST	|NULLOK SV *location
Apa	|OP*	|newOP		|I32 optype|OPFLAGS flags|NULLOK SV* location
Ap	|void	|newPROG	|NN OP* o
Apa	|OP*	|newSLICEOP	|OPFLAGS flags|NULLOK OP* subscript|NULLOK OP* listop
Apa	|OP*	|newSTATEOP	|OPFLAGS flags|NULLOK char* label|NULLOK OP* o|NULLOK SV* location
Ap	|CV*	|newSUB		|I32 floor|NULLOK OP* proto|NULLOK OP* block
Ap	|void	|process_special_block	|const I32 key|NN CV *const cv
Ap	|CV*	|newNAMEDSUB		|I32 floor|NULLOK OP* o|NULLOK OP* proto|NULLOK OP* block
ApM	|CV *	|newXS_flags	|NULLOK const char *name|NN XSUBADDR_t subaddr\
				|NN const char *const filename \
				|NULLOK const char *const proto|U32 flags
Apd	|CV*	|newXS		|NULLOK const char *name|NN XSUBADDR_t subaddr\
				|NN const char *filename
AmdbR	|AV*	|newAV
Apa	|OP*	|newAVREF	|NN OP* o|NULLOK SV* location
Apa	|OP*	|newBINOP	|I32 type|OPFLAGS flags|NULLOK OP* first|NULLOK OP* last|NULLOK SV* location
Apa	|OP*	|newCVREF	|OPFLAGS flags|NULLOK OP* o|NULLOK SV* location
Apa	|OP*	|newGVOP	|I32 type|OPFLAGS flags|NN GV* gv|NULLOK SV* location
Apa	|GV*	|newGVgen	|NN const char* pack
Apa	|OP*	|newGVREF	|I32 type|NULLOK OP* o|NULLOK SV* location
ApaR	|OP*	|newHVREF	|NN OP* o|NULLOK SV* location
AmdbR	|HV*	|newHV
ApaR	|HV*	|newHVhv	|NULLOK HV *hv
Ap	|void	|hv_sethv	|NN HV *dstr|NN HV *sstr
Apa	|IO*	|newIO
Apa	|OP*	|newLISTOP	|I32 type|OPFLAGS flags|NULLOK OP* first|NULLOK OP* last|NULLOK SV* location
Apa	|OP*	|newPMOP	|I32 type|OPFLAGS flags|NULLOK SV* location
Apa	|OP*	|newPVOP	|I32 type|OPFLAGS flags|NULLOK char* pv|NULLOK SV* location
Apa	|SV*	|newRV		|NN SV *const sv
Apda	|SV*	|newRV_noinc	|NN SV *const sv
Apda	|SV*	|newSV		|const STRLEN len
Apa	|OP*	|newSVREF	|NN OP* o|NULLOK SV* location
Apa	|OP*	|newSVOP	|I32 type|OPFLAGS flags|NN SV* sv|NULLOK SV* location
Apda	|SV*	|newSViv	|const IV i
Apda	|SV*	|newSVuv	|const UV u
Apda	|SV*	|newSVnv	|const NV n
Apda	|SV*	|newSVpv	|NULLOK const char *const s|const STRLEN len
Apda	|SV*	|newSVpvn	|NULLOK const char *const s|const STRLEN len
Apda	|SV*	|newSVpvn_flags	|NULLOK const char *const s|const STRLEN len|const U32 flags
Apda	|SV*	|newSVhek	|NULLOK const HEK *const hek
Apda	|SV*	|newSVpvn_share	|NULLOK const char* s|I32 len|U32 hash
Afpda	|SV*	|newSVpvf	|NN const char *const pat|...
Apa	|SV*	|vnewSVpvf	|NN const char *const pat|NULLOK va_list *const args
Apd	|SV*	|newSVrv	|NN SV *const rv|NULLOK const char *const classname
Apda	|SV*	|newSVsv	|NULLOK SV *const old
Apda	|SV*	|newSV_type	|const svtype type
Apa	|OP*	|newUNOP	|I32 type|OPFLAGS flags|NULLOK OP* first|NULLOK SV* location
Apa	|OP*	|newWHILEOP	|OPFLAGS flags|I32 debuggable|NULLOK LOOP* loop \
				|NULLOK SV* location|NULLOK OP* expr|NULLOK OP* block|NULLOK OP* cont \
				|I32 has_my
Apa	|PERL_SI*|new_stackinfo|I32 stitems|I32 cxitems
Ap	|char*	|scan_vstring	|NN const char *s|NN const char *const e \
				|NN SV *sv
Apd	|const char*	|scan_version	|NN const char *s|NN SV *rv|bool qv
Apd	|SV*	|new_version	|NN SV *ver
Apd	|SV*	|upg_version	|NN SV *ver|bool qv
Apd	|bool	|vverify	|NN SV *vs
Apd	|SV*	|vnumify	|NN SV *vs
Apd	|SV*	|vnormal	|NN SV *vs
Apd	|SV*	|vstringify	|NN SV *vs
Apd	|int	|vcmp		|NN SV *lhv|NN SV *rhv
p	|PerlIO*|nextargv	|NN GV* gv
ApP	|char*	|ninstr		|NN const char* big|NN const char* bigend \
				|NN const char* little|NN const char* lend
pr	|OP*	|oopsCV		|NN OP* o
Ap	|ROOTOP*	|newROOTOP	|NN OP* main|NULLOK SV* location
Ap	|void	|rootop_ll_tmprefcnt
Ap	|void	|op_free	|NULLOK OP* arg
Api	|OP*	|RootopOp	|NULLOK ROOTOP* o
Api	|LISTOP*	|opTlistop	|NULLOK OP* o
Api	|void	|rootop_refcnt_dec	|NN ROOTOP* o
Api	|void	|rootop_refcnt_inc	|NN ROOTOP* o
Ap	|void	|op_tmprefcnt	|NULLOK OP* arg
#ifdef PERL_MAD
p	|OP*	|package	|NN OP* o
#else
p	|void	|package	|NN OP* o
#endif
pd	|PADOFFSET|pad_alloc	|I32 optype|U32 tmptype
p	|PADOFFSET|allocmy	|NN const char *const name
pdR	|PADOFFSET|pad_findmy	|NN const char* name
Ap	|PADOFFSET|find_rundefsvoffset	|
pi	|void	|pad_set_cur_nosave	|NN AV* padlist|I32 nth
pd	|void	|pad_leavemy
Apd	|SV*	|pad_sv		|PADOFFSET po
pd	|void	|pad_free	|PADOFFSET po
pd	|void	|pad_reset
pd	|void	|pad_swipe	|PADOFFSET po|bool refadjust
p	|void	|peep		|NULLOK OP* o
#if defined(USE_REENTRANT_API)
Ap	|void	|reentrant_size
Ap	|void	|reentrant_init
Ap	|void	|reentrant_free
Anp	|void*	|reentrant_retry|NN const char *f|...
#endif
Ap	|void	|call_atexit	|ATEXIT_t fn|NULLOK void *ptr
Apd	|SV*	|call_argv	|NN const char* sub_name|I32 flags|NN char** argv
Apd	|SV*	|call_method	|NN const char* methname|I32 flags
Apd	|SV*	|call_pv	|NN const char* sub_name|I32 flags
Apd	|SV*	|call_sv	|NN SV* sv|VOL I32 flags
Ap	|void	|despatch_signals
Ap	|OP *	|doref		|NN OP *o|I32 type|bool set_op_ref
Apd	|SV*	|eval_pv	|NN const char* p|I32 croak_on_error
Apd	|I32	|eval_sv	|NN SV* sv|I32 flags
Apd	|SV*	|get_sv		|NN const char* name|I32 create
Apd	|AV*	|get_av		|NN const char* name|I32 create
Apd	|HV*	|get_hv		|NN const char* name|I32 create
Apd	|CV*	|get_cv		|NN const char* name|I32 flags
Apd	|CV*	|get_cvn_flags	|NN const char* name|STRLEN len|I32 flags
Ap	|int	|init_i18nl10n	|int printwarn
Ap	|void	|new_ctype	|NN const char* newctype
Ap	|void	|new_numeric	|NULLOK const char* newcoll
Ap	|void	|set_numeric_local
Ap	|void	|set_numeric_radix
Ap	|void	|set_numeric_standard
Apd	|void	|require_pv	|NN const char* pv
Apd	|void	|pack_cat	|NN SV *cat|NN const char *pat|NN const char *patend \
				|NN SV **beglist|NN SV **endlist|NN SV ***next_in_list|U32 flags
Apd	|void	|packlist 	|NN SV *cat|NN const char *pat|NN const char *patend|NN SV **beglist|NN SV **endlist
#ifdef PERL_USES_PL_PIDSTATUS
p	|void	|pidgone	|Pid_t pid|int status
#endif
Ap	|void	|pmflag		|NN U32* pmfl|int ch
p	|OP*	|pmruntime	|NN OP *o|NN OP *expr|bool isreg
Ap	|void	|pop_scope
p	|OP*	|prepend_elem	|I32 optype|NULLOK OP* head|NULLOK OP* tail
Ap	|void	|push_scope
Amb	|OP*	|ref		|NULLOK OP* o|I32 type
p	|OP*	|refkids	|NULLOK OP* o|I32 type
Ap	|void	|regdump	|NN const regexp* r
Ap	|I32	|pregexec	|NN REGEXP * const prog|NN char* stringarg \
				|NN char* strend|NN char* strbeg|I32 minend \
				|NN SV* screamer|U32 nosave
Ap	|void	|pregfree	|NULLOK REGEXP* r
Ap	|void	|pregfree2	|NN REGEXP *rx
Ap	|void	|preg_tmprefcnt	|NN REGEXP *rx
EXp	|REGEXP*|reg_temp_copy	|NN REGEXP* r
Ap	|void	|regfree_internal|NN REGEXP *const rx
Ap	|void	|reg_tmprefcnt_internal|NN REGEXP *const rx
Ap	|REGEXP*|pregcomp	|NN SV * const pattern|const U32 flags
Ap	|REGEXP*|re_compile	|NN const SV * const pattern|U32 flags
Ap	|char*	|re_intuit_start|NN REGEXP * const rx|NULLOK SV* sv|NN char* strpos \
				|NN char* strend|const U32 flags \
				|NULLOK re_scream_pos_data *data
Ap	|SV*	|re_intuit_string|NN REGEXP  *const r
Ap	|I32	|regexec_flags	|NN REGEXP *const rx|NN char *stringarg \
				|NN char *strend|NN char *strbeg|I32 minend \
				|NN SV *sv|NULLOK void *data|U32 flags
ApR	|regnode*|regnext	|NULLOK regnode* p

EXp |SV*|reg_named_buff          |NN REGEXP * const rx|NULLOK SV * const key \
                                 |NULLOK SV * const value|const U32 flags
EXp |SV*|reg_named_buff_iter     |NN REGEXP * const rx|NULLOK const SV * const lastkey \
                                 |const U32 flags
Ap |SV*|reg_named_buff_fetch    |NN REGEXP * const rx|NN SV * const namesv|const U32 flags
Ap |bool|reg_named_buff_exists  |NN REGEXP * const rx|NN SV * const key|const U32 flags
Ap |SV*|reg_named_buff_firstkey |NN REGEXP * const rx|const U32 flags
Ap |SV*|reg_named_buff_nextkey  |NN REGEXP * const rx|const U32 flags
Ap |SV*|reg_named_buff_scalar   |NN REGEXP * const rx|const U32 flags
Ap |SV*|reg_named_buff_all      |NN REGEXP * const rx|const U32 flags

EXp	|void|reg_numbered_buff_fetch|NN REGEXP * const rx|const I32 paren|NULLOK SV * const sv
EXp	|void|reg_numbered_buff_store|NN REGEXP * const rx|const I32 paren|NULLOK SV const * const value
EXp	|I32|reg_numbered_buff_length|NN REGEXP * const rx|NN const SV * const sv|const I32 paren

EXp	|SV*|reg_qr_package|NN REGEXP * const rx

Ep	|void	|regprop	|NULLOK const regexp *prog|NN SV* sv|NN const regnode* o
Ap	|void	|repeatcpy	|NN char* to|NN const char* from|I32 len|I32 count
ApP	|char*	|rninstr	|NN const char* big|NN const char* bigend \
				|NN const char* little|NN const char* lend
Ap	|Sighandler_t|rsignal	|int i|Sighandler_t t
p	|int	|rsignal_restore|int i|NULLOK Sigsave_t* t
p	|int	|rsignal_save	|int i|Sighandler_t t1|NN Sigsave_t* save
Ap	|Sighandler_t|rsignal_state|int i
p	|void	|rxres_free	|NN void** rsp
p	|void	|rxres_restore	|NN void **rsp|NN REGEXP *rx
p	|void	|rxres_save	|NN void **rsp|NN REGEXP *rx
#if !defined(HAS_RENAME)
p	|I32	|same_dirent	|NN const char* a|NN const char* b
#endif
Apda	|char*	|savepv		|NULLOK const char* pv
Apda	|char*	|savepvn	|NULLOK const char* pv|I32 len
Apda	|char*	|savesharedpv	|NULLOK const char* pv
Apda	|char*	|savesharedpvn	|NN const char *const pv|const STRLEN len
Apda	|char*	|savesvpv	|NN SV* sv
Ap	|void	|savestack_grow
Ap	|void	|savestack_grow_cnt	|I32 need
Ap	|void	|save_aelem	|NN AV* av|I32 idx|NN SV **sptr
Ap	|I32	|save_alloc	|I32 size|I32 pad
Ap	|void	|save_aptr	|NN AV** aptr
Ap	|AV*	|save_ary	|NN GV* gv
Ap	|void	|save_bool	|NN bool* boolp
Ap	|void	|save_clearsv	|NN SV** svp
Ap	|void	|save_delete	|NN HV *hv|NN char *key|I32 klen
Ap	|void	|save_destructor|DESTRUCTORFUNC_NOCONTEXT_t f|NN void* p
Ap	|void	|save_destructor_x|DESTRUCTORFUNC_t f|NULLOK void* p
Ap	|void	|save_freesv	|NULLOK SV* sv
p	|void	|save_freeop	|NULLOK OP* o
Ap	|void	|save_freepv	|NULLOK char* pv
Ap	|void	|save_generic_svref|NN SV** sptr
Ap	|void	|save_generic_pvref|NN char** str
Ap	|void	|save_shared_pvref|NN char** str
Ap      |void   |save_gp        |NN GV* gv|I32 empty
Ap	|HV*	|save_hash	|NN GV* gv
Api	|void	|save_hints
Ap	|void	|save_helem	|NN HV *hv|NN SV *key|NN SV **sptr
Ap	|void	|save_hptr	|NN HV** hptr
Ap	|void	|save_I16	|NN I16* intp
Ap	|void	|save_I32	|NN I32* intp
Ap	|void	|save_I8	|NN I8* bytep
Ap	|void	|save_int	|NN int* intp
Ap	|void	|save_item	|NN SV* item
Ap	|void	|save_iv	|NN IV *ivp
Ap	|void	|save_list	|NN SV** sarg|I32 maxsarg
Ap	|void	|save_long	|NN long* longp
Ap	|void	|save_mortalizesv|NN SV* sv
Ap	|void	|save_nogv	|NN GV* gv
p	|void	|save_op
Ap	|SV*	|save_scalar	|NN GV* gv
Ap	|void	|save_call_sv	|NN AV* args|NN SV* new_value
Ap	|void	|save_pptr	|NN char** pptr
Ap	|void	|save_vptr	|NN void *ptr
Ap	|void	|save_re_context
Ap	|void	|save_padsv_and_mortalize|PADOFFSET off
Ap	|void	|save_set_magicsv	|NN SV* name
Ap	|void	|save_sptr	|NN SV** sptr
Ap	|SV*	|save_svref	|NN SV** sptr
p	|OP*	|sawparens	|NULLOK OP* o
p	|OP*	|scalar		|NULLOK OP* o
p	|OP*	|scalarboolean	|NN OP *o
p	|OP*	|modkids	|NULLOK OP *o|I32 type
p	|OP*	|scalarkids	|NULLOK OP* o
p	|OP*	|scalarseq	|NULLOK OP* o
p	|OP*	|scalarvoid	|NN OP* o
p	|OP*	|op_mod_assign	|NN OP* operator|NN OP** operandp|I32 type
Apd	|NV	|scan_bin	|NN const char* start|STRLEN len|NN STRLEN* retlen
Apd	|NV	|scan_hex	|NN const char* start|STRLEN len|NN STRLEN* retlen
Ap	|char*	|scan_num	|NN const char* s|NN YYSTYPE *lvalp
Apd	|NV	|scan_oct	|NN const char* start|STRLEN len|NN STRLEN* retlen
Apd     |const char*  |parse_escape   |NN const char *s|NN char *d|NN STRLEN *l|NN const char *send
p	|OP*	|scope		|NULLOK OP* o
Ap	|char*	|screaminstr	|NN SV *bigstr|NN SV *littlestr|I32 start_shift \
				|I32 end_shift|NN I32 *old_posp|I32 last
#if !defined(VMS)
p	|I32	|setenv_getix	|NN const char* nam
#endif
Ap	|HEK*	|share_hek	|NN const char* str|I32 len|U32 hash
#if defined(HAS_SIGACTION) && defined(SA_SIGINFO)
np	|Signal_t |sighandler	|int sig|NULLOK siginfo_t *info|NULLOK void *uap
Anp	|Signal_t |csighandler	|int sig|NULLOK siginfo_t *info|NULLOK void *uap
#else
np	|Signal_t |sighandler	|int sig
Anp	|Signal_t |csighandler	|int sig
#endif
Ap	|SV**	|stack_grow	|NN SV** sp|NN SV** p|int n
Ap	|I32	|start_subparse	|U32 flags
p	|void	|sub_crush_depth|NN CV* cv
Apd	|bool	|sv_2bool	|NN SV *const sv
Apd	|CV*	|sv_2cv		|NN SV* sv|NN GV **const gvp|const I32 lref
Apd	|IO*	|sv_2io		|NN SV *const sv
Apd	|IV	|sv_2iv		|NULLOK SV *const sv
ApdS	|SV*	|sv_2mortal	|NN XV *const sv
Apd	|NV	|sv_2nv		|NULLOK SV *const sv
pMd	|SV*	|sv_2num	|NN SV *const sv
Amb	|char*	|sv_2pv		|NULLOK SV *sv|NULLOK STRLEN *lp
Apd	|char*	|sv_2pv_flags	|NULLOK SV *const sv|NULLOK STRLEN *const lp|const I32 flags
Apd	|char*	|sv_2pvutf8	|NN SV *const sv|NULLOK STRLEN *const lp
Apd	|char*	|sv_2pvbyte	|NN SV *const sv|NULLOK STRLEN *const lp
Ap	|char*	|sv_pvn_nomg	|NN SV* sv|NULLOK STRLEN* lp
Apd	|UV	|sv_2uv	|NULLOK SV *const sv
Apd	|IV	|sv_iv		|NN SV* sv
Apd	|UV	|sv_uv		|NN SV* sv
Apd	|NV	|sv_nv		|NN SV* sv
Apd	|char*	|sv_pvn		|NN SV *sv|NN STRLEN *lp
Apd	|char*	|sv_pvutf8n	|NN SV *sv|NN STRLEN *lp
pd	|void	|sv_add_arena	|NN char *const ptr|const U32 size|const U32 flags
Apd	|int	|sv_backoff	|NN SV *const sv
Apd	|SV*	|sv_bless	|NN SV *const sv|NN HV *const stash
Afpd	|void	|sv_catpvf	|NN SV *const sv|NN const char *const pat|...
Apd	|void	|sv_vcatpvf	|NN SV *const sv|NN const char *const pat \
				|NULLOK va_list *const args
Apd	|void	|sv_catpv	|NN SV *const sv|NULLOK const char* ptr
Amdb	|void	|sv_catpvn	|NN SV *dsv|NN const char *sstr|STRLEN len
Amdb	|void	|sv_catsv	|NN SV *dstr|NULLOK SV *sstr
Apd	|void	|sv_chop	|NN SV *const sv|NULLOK const char *const ptr
Apd	|void	|call_destructors
Apd	|void	|sv_clear	|NN SV *const sv
p	|void	|sv_clear_body	|NN SV *const sv
Apd	|I32	|sv_cmp		|NULLOK SV *const sv1|NULLOK SV *const sv2
Ap	|OP*	|sv_compile_2op	|NN SV *sv|NN ROOTOP **rootopp \
				|NN const char *code|NN PAD **padp
Apd	|int	|getcwd_sv	|NN SV* sv
Apd	|void	|sv_dec		|NULLOK SV *const sv
Ap	|void	|sv_dump	|NN SV* sv
ApdR	|bool	|sv_derived_from|NN SV* sv|NN const char *const name
ApdR	|bool	|sv_does	|NN SV* sv|NN const char *const name
Apd	|I32	|sv_eq		|NULLOK SV* sv1|NULLOK SV* sv2
Apd	|void	|sv_free	|NULLOK SV *const sv
poMX	|void	|sv_free2	|NN SV *const sv
pd	|void	|sv_free_arenas
Apd	|char*	|sv_gets	|NN SV *const sv|NN PerlIO *const fp|I32 append
Apd	|char*	|sv_grow	|NN SV *const sv|STRLEN newlen
Apd	|void	|sv_inc		|NULLOK SV *const sv
Amdb	|void	|sv_insert	|NN SV *const bigstr|const STRLEN offset \
				|const STRLEN len|NN const char *const little \
				|const STRLEN littlelen
Apd	|void	|sv_insert_flags|NN SV *const bigstr|const STRLEN offset|const STRLEN len \
				|NN const char *const little|const STRLEN littlelen|const U32 flags
Apd	|int	|sv_isa		|NULLOK SV* sv|NN const char *const name
Apd	|int	|sv_isobject	|NULLOK SV* sv
Apd	|STRLEN	|sv_len		|NULLOK SV *const sv
Apd	|STRLEN	|sv_len_utf8	|NULLOK SV *const sv
Apd	|void	|sv_magic	|NN SV *const sv|NULLOK SV *const obj|const int how \
				|NULLOK const char *const name|const I32 namlen
Apd	|MAGIC *|sv_magicext	|NN SV *const sv|NULLOK SV *const obj|const int how \
				|NULLOK const MGVTBL *const vtbl|NULLOK const char *const name \
				|const I32 namlen
ApdaRS	|SV*	|sv_mortalcopy	|NULLOK XV *const oldsv
ApdR	|SV*	|sv_newmortal
Apd	|SV*	|sv_newref	|NULLOK SV *const sv
Ap	|const char*	|sv_peek	|NULLOK SV* sv
Apd	|void	|sv_pos_u2b	|NULLOK SV *const sv|NN I32 *const offsetp|NULLOK I32 *const lenp
Apd	|void	|sv_pos_b2u	|NULLOK SV *const sv|NN I32 *const offsetp
Amdb	|char*	|sv_pvn_force	|NN SV* sv|NULLOK STRLEN* lp
Apd	|char*	|sv_pvutf8n_force|NN SV *const sv|NULLOK STRLEN *const lp
Apd	|char*	|sv_recode_to_utf8	|NN SV* sv|NN SV *encoding
ApdR	|const char*	|sv_reftype	|NN const SV *const sv|const int ob
Apd	|void	|sv_replace	|NN SV *const sv|NN SV *const nsv
Apd	|void	|sv_report_used
Afpd	|void	|sv_setpvf	|NN SV *const sv|NN const char *const pat|...
Apd	|void	|sv_vsetpvf	|NN SV *const sv|NN const char *const pat|NULLOK va_list *const args
Apd	|void	|sv_setrv	|NN SV *const sv|NN SV* dst
Apd	|void	|sv_setrv_mg	|NN SV *const sv|NN SV* dst
Apd	|void	|sv_setiv	|NN SV *const sv|const IV num
Apdb	|void	|sv_setpviv	|NN SV *const sv|const IV num
Apd	|void	|sv_setuv	|NN SV *const sv|const UV num
Apd	|void	|sv_setnv	|NN SV *const sv|const NV num
Apd	|SV*	|sv_setref_iv	|NN SV *const rv|NULLOK const char *const classname|const IV iv
Apd	|SV*	|sv_setref_uv	|NN SV *const rv|NULLOK const char *const classname|const UV uv
Apd	|SV*	|sv_setref_nv	|NN SV *const rv|NULLOK const char *const classname|const NV nv
Apd	|SV*	|sv_setref_pv	|NN SV *const rv|NULLOK const char *const classname \
				|NULLOK void *const pv
Apd	|SV*	|sv_setref_pvn	|NN SV *const rv|NULLOK const char *const classname \
				|NN const char *const pv|const STRLEN n
Apd	|void	|sv_setpv	|NN SV *const sv|NULLOK const char *const ptr
Apd	|void	|sv_setpvn	|NN SV *const sv|NULLOK const char *const ptr|const STRLEN len
Amdb	|void	|sv_setsv	|NN SV *dstr|NULLOK SV *sstr
Apd	|int	|sv_unmagic	|NN SV *const sv|const int type
Apdmb	|void	|sv_unref	|NN SV* sv
Apd	|void	|sv_unref_flags	|NN SV *const ref|const U32 flags
Apd	|void	|sv_upgrade	|NN SV *const sv|svtype new_type
Apdmb	|void	|sv_usepvn	|NN SV* sv|NULLOK char* ptr|STRLEN len
Apd	|void	|sv_usepvn_flags|NN SV *const sv|NULLOK char* ptr|const STRLEN len\
				|const U32 flags
Apd	|void	|sv_vcatpvfn	|NN SV *const sv|NN const char *const pat|const STRLEN patlen \
				|NULLOK va_list *const args|NULLOK SV **const svargs|const I32 svmax \
				|NULLOK bool *const maybe_tainted
Apd	|void	|sv_vsetpvfn	|NN SV *const sv|NN const char *const pat|const STRLEN patlen \
				|NULLOK va_list *const args|NULLOK SV **const svargs \
				|const I32 svmax|NULLOK bool *const maybe_tainted
Ap	|SV*	|swash_init	|NN const char* pkg|NN const char* name|NN SV* listsv|I32 minbits|I32 none
Ap	|UV	|swash_fetch	|NN SV *swash|NN const char *ptr|bool do_utf8
Apd	|UV	|to_utf8_case	|NN const char *p|NN char* ustrp|NULLOK STRLEN *lenp \
				|NN SV **swashp|NN const char *normal|NN const char *special
Apd	|UV	|to_utf8_lower	|NN const char *p|NN char* ustrp|NULLOK STRLEN *lenp
Apd	|UV	|to_utf8_upper	|NN const char *p|NN char* ustrp|NULLOK STRLEN *lenp
Apd	|UV	|to_utf8_title	|NN const char *p|NN char* ustrp|NULLOK STRLEN *lenp
Apd	|UV	|to_utf8_fold	|NN const char *p|NN char* ustrp|NULLOK STRLEN *lenp
#if defined(UNLINK_ALL_VERSIONS)
Ap	|I32	|unlnk		|NN const char* f
#endif
Apd	|I32	|unpack_str	|NN const char *pat|NN const char *patend|NN const char *s \
				|NULLOK const char *strbeg|NN const char *strend|NULLOK char **new_s \
				|I32 ocnt|U32 flags
Apd	|I32	|unpackstring	|NN const char *pat|NN const char *patend|NN const char *s \
				|NN const char *strend|U32 flags
Ap	|void	|unsharepvn	|NULLOK const char* sv|I32 len|U32 hash
p	|void	|unshare_hek	|NULLOK HEK* hek
#ifdef PERL_MAD
p	|OP *	|utilize	|int aver|I32 floor|NULLOK OP* version \
				|NN OP* idop|NULLOK OP* arg
#else
p	|CV*	|utilize	|int aver|I32 floor|NULLOK OP* version|NN OP* idop|NULLOK OP* arg
#endif
Ap	|char*	|utf16_to_utf8	|NN const char* p|NN char *d|I32 bytelen|NN I32 *newlen
Ap	|char*	|utf16_to_utf8_reversed|NN char* p|NN char *d|I32 bytelen|NN I32 *newlen
AdpPR	|STRLEN	|utf8_length	|NN const char* s|NN const char *e
ApdPR	|IV	|utf8_distance	|NN const char *a|NN const char *b
ApdPR	|char*	|utf8_hop	|NN const char *s|I32 off
ApMd	|char*	|utf8_to_bytes	|NN char *s|NN STRLEN *len
ApMd	|char*	|bytes_from_utf8|NN const char *s|NN STRLEN *len|NULLOK bool *is_utf8
ApMd	|char*	|bytes_to_utf8	|NN const char *s|NN STRLEN *len
Apd	|UV	|utf8_to_uvchr	|NN const char *s|NULLOK STRLEN *retlen
Apd	|UV	|utf8_to_uvuni	|NN const char *s|NULLOK STRLEN *retlen

#ifdef EBCDIC
Adp	|UV	|utf8n_to_uvchr	|NN const char *s|STRLEN curlen|NULLOK STRLEN *retlen|U32 flags
#else
Adpbm	|UV	|utf8n_to_uvchr	|NN const char *s|STRLEN curlen|NULLOK STRLEN *retlen|U32 flags
#endif

Adp	|UV	|utf8n_to_uvuni	|NN const char *s|STRLEN curlen|NULLOK STRLEN *retlen|U32 flags

#ifdef EBCDIC
Apd	|char*	|uvchr_to_utf8	|NN char *d|UV uv
#else
Apdbm	|char*	|uvchr_to_utf8	|NN char *d|UV uv
#endif

Apbm	|char*	|uvuni_to_utf8	|NN char *d|UV uv
Ap	|char*	|uvchr_to_utf8_flags	|NN char *d|UV uv|UV flags
Apd	|char*	|uvuni_to_utf8_flags	|NN char *d|UV uv|UV flags
Apd	|char*	|pv_uni_display	|NN SV *dsv|NN const char *spv|STRLEN len|STRLEN pvlim|UV flags
ApdR	|char*	|sv_uni_display	|NN SV *dsv|NN SV *ssv|STRLEN pvlim|UV flags
p	|I32	|wait4pid	|Pid_t pid|NN int* statusp|int flags
p	|U32	|parse_unicode_opts|NN const char **popt
Ap	|U32	|seed
pR	|UV	|get_hash_seed
p	|void	|report_evil_fh	|NULLOK IO *io|I32 op
XEpd	|void	|report_uninit	|NULLOK const SV *uninit_sv
Afpd	|void	|warn		|NN const char* pat|...
Afp	|void	|warner		|U32 err|NN const char* pat|...
Afp	|void	|warner_at	|NULLOK SV* location|U32 err|NN const char* pat|...
Ap	|void	|vwarner	|U32 err|NN const char* pat|NULLOK va_list* args
Ap	|void	|vwarner_at	|NULLOK SV* location|U32 err|NN const char* pat|NULLOK va_list* args
p	|void	|watch		|NN char** addr
Ap	|I32	|whichsig	|NN const char* sig
p	|void	|write_to_stderr|NN const char* message|int msglen
p	|int	|yyerror	|NN const char *const s
p	|void	|yyerror_at	|NN SV* location|NN const char *const s
EXp	|int	|yylex
p	|int	|yyparse
p	|void	|parser_free	|NN const yy_parser *parser
p	|void	|parser_tmprefcnt	|NN const yy_parser *parser
p	|int	|yywarn		|NN const char *const s
#if defined(MYMALLOC)
Ap	|void	|dump_mstats	|NN const char* s
Ap	|int	|get_mstats	|NN perl_mstats_t *buf|int buflen|int level
#endif
Anpa	|Malloc_t|safesysmalloc	|MEM_SIZE nbytes
Anpa	|Malloc_t|safesyscalloc	|MEM_SIZE elements|MEM_SIZE size
Anpa	|Malloc_t|safesysrealloc|Malloc_t where|MEM_SIZE nbytes
Anp	|Free_t	|safesysfree	|Malloc_t where
#if defined(PERL_GLOBAL_STRUCT)
Ap	|struct perl_vars *|GetVars
Ap	|struct perl_vars*|init_global_struct
Ap	|void	|free_global_struct|NN struct perl_vars *plvarsp
#endif
Ap	|int	|runops_standard
Ap	|int	|runops_debug
Afpd	|void	|sv_catpvf_mg	|NN SV *const sv|NN const char *const pat|...
Apd	|void	|sv_vcatpvf_mg	|NN SV *const sv|NN const char *const pat \
				|NULLOK va_list *const args
Apd	|void	|sv_catpv_mg	|NN SV *const sv|NULLOK const char *const ptr
Apdbm	|void	|sv_catpvn_mg	|NN SV *sv|NN const char *ptr|STRLEN len
Apdbm	|void	|sv_catsv_mg	|NN SV *dsv|NULLOK SV *ssv
Afpd	|void	|sv_setpvf_mg	|NN SV *const sv|NN const char *const pat|...
Apd	|void	|sv_vsetpvf_mg	|NN SV *const sv|NN const char *const pat \
				|NULLOK va_list *const args
Apd	|void	|sv_setiv_mg	|NN SV *const sv|const IV i
Apdb	|void	|sv_setpviv_mg	|NN SV *const sv|const IV iv
Apd	|void	|sv_setuv_mg	|NN SV *const sv|const UV u
Apd	|void	|sv_setnv_mg	|NN SV *const sv|const NV num
Apd	|void	|sv_setpv_mg	|NN SV *const sv|NULLOK const char *const ptr
Apd	|void	|sv_setpvn_mg	|NN SV *const sv|NN const char *const ptr|const STRLEN len
Apd	|void	|sv_setsv_mg	|NN SV *const dstr|NULLOK SV *const sstr
Apdbm	|void	|sv_usepvn_mg	|NN SV *sv|NULLOK char *ptr|STRLEN len
ApR	|MGVTBL*|get_vtbl	|int vtbl_id
Apd	|const char*	|pv_display	|NN SV *dsv|NN const char *pv|STRLEN cur|STRLEN len \
				|STRLEN pvlim
Apd	|const char*	|pv_escape	|NN SV *dsv|NN char const * const str\
                                |const STRLEN count|const STRLEN max\
                                |NULLOK STRLEN * const escaped\
                                |const U32 flags				
Apd     |const char*  |pv_pretty      |NN SV *dsv|NN char const * const str\
                                |const STRLEN count|const STRLEN max\
                                |NULLOK char const * const start_color\
                                |NULLOK char const * const end_color\
                                |const U32 flags				
Afp	|void	|dump_indent	|I32 level|NN PerlIO *file|NN const char* pat|...
Ap	|void	|dump_vindent	|I32 level|NN PerlIO *file|NN const char* pat \
				|NULLOK va_list *args
Ap	|void	|do_gv_dump	|I32 level|NN PerlIO *file|NN const char *name\
				|NULLOK GV *sv
Ap	|void	|do_gvgv_dump	|I32 level|NN PerlIO *file|NN const char *name\
				|NULLOK GV *sv
Ap	|void	|do_hv_dump	|I32 level|NN PerlIO *file|NN const char *name\
				|NULLOK HV *sv
Ap	|void	|do_magic_dump	|I32 level|NN PerlIO *file|NN const MAGIC *mg|I32 nest \
				|I32 maxnest|bool dumpops|STRLEN pvlim
Ap	|void	|do_op_dump	|I32 level|NN PerlIO *file|NULLOK const OP *o
Ap	|void	|do_pmop_dump	|I32 level|NN PerlIO *file|NULLOK const PMOP *pm
Ap	|void	|do_sv_dump	|I32 level|NN PerlIO *file|NULLOK SV *sv|I32 nest \
				|I32 maxnest|bool dumpops|STRLEN pvlim
Ap	|void	|magic_dump	|NULLOK const MAGIC *mg
Ap	|void	|reginitcolors
ApdRmb	|char*	|sv_2pv_nolen	|NN SV* sv
ApdRmb	|char*	|sv_2pvutf8_nolen|NN SV* sv
ApdRmb	|char*	|sv_2pvbyte_nolen|NN SV* sv
AmdbR	|char*	|sv_pv		|NN SV *sv
AmdbR	|char*	|sv_pvutf8	|NN SV *sv
Apd	|void	|sv_utf8_encode |NN SV *const sv
ApdM	|bool	|sv_utf8_decode |NN SV *const sv
Apdmb	|void	|sv_force_normal|NN SV *sv
Apd	|void	|sv_force_normal_flags|NN SV *const sv|const U32 flags
Ap	|void	|tmps_grow	|I32 n
Apd	|SV*	|sv_rvweaken	|NN SV *const sv
p	|int	|magic_killbackrefs|NN SV *sv|NN MAGIC *mg
#ifdef PERL_MAD
Apr	|OP *	|newMYSUB	|I32 floor|NULLOK OP *o|NULLOK OP *proto \
				|NULLOK OP *attrs|NULLOK OP *block
#else
Apr	|void	|newMYSUB	|I32 floor|NULLOK OP *o|NULLOK OP *proto|NULLOK OP *attrs|NULLOK OP *block
#endif
p	|void	|boot_core_xsutils
Apa	|PTR_TBL_t*|ptr_table_new
ApR	|void*	|ptr_table_fetch|NN PTR_TBL_t *const tbl|NULLOK const void *const sv
Ap	|void	|ptr_table_store|NN PTR_TBL_t *const tbl|NULLOK const void *const oldsv \
				|NN void *const newsv
Ap	|void	|ptr_table_split|NN PTR_TBL_t *const tbl
Ap	|void	|ptr_table_clear|NULLOK PTR_TBL_t *const tbl
Ap	|void	|ptr_table_free|NULLOK PTR_TBL_t *const tbl
#if defined(HAVE_INTERP_INTERN)
Ap	|void	|sys_intern_clear
Ap	|void	|sys_intern_init
#endif

ApR	|const char *	|custom_op_name	|NN const OP *o
ApR	|const char *	|custom_op_desc	|NN const OP *o

Adp	|void	|sv_nosharing	|NULLOK SV *sv
Adpbm	|void	|sv_nolocking	|NULLOK SV *sv
#ifdef NO_MATHOMS
Adpbm	|void	|sv_nounlocking	|NULLOK SV *sv
#else
Adpb	|void	|sv_nounlocking	|NULLOK SV *sv
#endif
Adp	|int	|nothreadhook

END_EXTERN_C

#if defined(PERL_IN_GV_C) || defined(PERL_DECL_PROT)
s	|void	|gv_init_sv	|NN GV *gv|const svtype sv_type
s	|HV*	|gv_get_super_pkg|NN const char* name|I32 namelen
#endif

: #if defined(PERL_IN_HV_C) || defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
paRxo	|void*	|get_arena	|const size_t svtype|const U32 misc
: #endif

#if defined(PERL_IN_HV_C) || defined(PERL_DECL_PROT)
s	|void	|hsplit		|NN HV *hv
s	|void	|hfreeentries	|NN HV *hv
#ifndef PURIFY
sa	|HE*	|new_he
#endif /* ! PURIFY */
sanR	|HEK*	|save_hek_flags	|NN const char *str|I32 len|U32 hash|int flags
s	|void	|unshare_hek_or_pvn|NULLOK const HEK* hek|NULLOK const char* str|I32 len|U32 hash
sR	|HEK*	|share_hek_flags|NN const char *str|I32 len|U32 hash|int flags
rs	|void	|hv_notallowed	|int flags|NN const char *key|I32 klen|NN const char *msg
sn	|struct xpvhv_aux*|hv_auxinit|NN HV *hv
sM	|SV*	|hv_delete_common|NULLOK HV *hv|NULLOK SV *keysv \
		|NULLOK const char *key|STRLEN klen|int k_flags|I32 d_flags \
		|U32 hash
sM	|void	|clear_placeholders	|NN HV *hv|U32 items
#endif

#if defined(PERL_IN_MG_C) || defined(PERL_DECL_PROT)
s	|void	|save_magic	|I32 mgs_ix|NN SV *sv
s	|void	|restore_magic	|NULLOK const void *p
s	|void	|unwind_handler_stack|NN const void *p

#endif

#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
pR	|OP*	|ck_anoncode	|NN OP *o
pR	|OP*	|ck_anonarray	|NN OP *o
pR	|OP*	|ck_bitop	|NN OP *o
pR	|OP*	|ck_concat	|NN OP *o
pR	|OP*	|ck_defined	|NN OP *o
pR	|OP*	|ck_delete	|NN OP *o
pR	|OP*	|ck_die		|NN OP *o
pR	|OP*	|ck_eof		|NN OP *o
pR	|OP*	|ck_eval	|NN OP *o
pR	|OP*	|ck_exec	|NN OP *o
pR	|OP*	|ck_exists	|NN OP *o
pR	|OP*	|ck_exit	|NN OP *o
pR	|OP*	|ck_ftst	|NN OP *o
pR	|OP*	|ck_fun		|NN OP *o
pR	|OP*	|ck_glob	|NN OP *o
pR	|OP*	|ck_grep	|NN OP *o
pR	|OP*	|ck_index	|NN OP *o
pR	|OP*	|ck_lfun	|NN OP *o
pR	|OP*	|ck_listiob	|NN OP *o
pR	|OP*	|ck_match	|NN OP *o
pR	|OP*	|ck_method	|NN OP *o
pR	|OP*	|ck_null	|NN OP *o
pR	|OP*	|ck_open	|NN OP *o
pR	|OP*	|ck_readline	|NN OP *o
pR	|OP*	|ck_require	|NN OP *o
pR	|OP*	|ck_rfun	|NN OP *o
pR	|OP*	|ck_rvconst	|NN OP *o
pR	|OP*	|ck_sassign	|NN OP *o
pR	|OP*	|ck_shift	|NN OP *o
pR	|OP*	|ck_sort	|NN OP *o
pR	|OP*	|ck_split	|NN OP *o
pR	|OP*	|ck_subr	|NN OP *o
pR	|OP*	|ck_substr	|NN OP *o
pR	|OP*	|ck_svconst	|NN OP *o
pR	|OP*	|ck_trunc	|NN OP *o
pR	|OP*	|ck_unpack	|NN OP *o
sRn	|bool	|is_handle_constructor|NN const OP *o|I32 numargs
s	|void	|cop_free	|NN COP *cop
sR	|OP*	|newDEFSVOP     |NULLOK SV* location
sR	|OP*	|new_logop	|I32 type|OPFLAGS flags|NN OP **firstp|NN OP **otherp|NULLOK SV *location
s	|void	|simplify_sort	|NN OP *o
s	|OP *	|my_kid		|NULLOK OP *o|NN OP **imopsp
s	|void	|bad_type	|I32 n|NN const char *t|NN const char *name|NN const OP *kid
s	|void	|no_bareword_allowed|NN const OP *o
sR	|OP*	|no_fh_allowed|NN OP *o
sR	|OP*	|too_few_arguments|NN OP *o|NN const char* name
sR	|OP*	|too_many_arguments|NN OP *o|NN const char* name
#endif
#if defined(PL_OP_SLAB_ALLOC)
Apa	|void*	|Slab_Alloc	|size_t sz
Ap	|void	|Slab_Free	|NN void *op
#  if defined(PERL_DEBUG_READONLY_OPS)
poxM	|void	|pending_Slabs_to_ro
poxM	|OP *	|op_refcnt_inc	|NULLOK OP *o
poxM	|PADOFFSET	|op_refcnt_dec	|NN OP *o
#    if defined(PERL_IN_OP_C)
s	|void	|Slab_to_rw	|NN void *op
#    endif
#  endif
#endif

#if defined(PERL_IN_PERL_C) || defined(PERL_DECL_PROT)
s	|void	|find_beginning	|NN SV* linestr_sv|NN PerlIO *rsfp
s	|void	|forbid_setid	|const char flag|const bool suidscript
s	|void	|incpush	|NULLOK const char *dir|bool addsubdirs|bool addoldvers|bool usesep|bool canrelocate
s	|void	|init_interp
s	|void	|init_ids
s	|void	|init_main_stash
s	|void	|init_perllib
s	|void	|init_postdump_symbols|int argc|NN char **argv|NULLOK char **env
s	|void	|init_predump_symbols
rs	|void	|my_exit_jump
s	|void	|nuke_stacks
s	|int	|open_script	|NN const char *scriptname|bool dosearch \
				|NN bool *suidscript|NN PerlIO **rsfpp
s	|void	|usage		|NN const char *name
#ifdef DOSUID
#  ifdef IAMSUID
so	|void	|validate_suid	|NN const char *validarg \
				|int fdscript \
				|bool suidscript|NN SV* linestr_sv \
				|NN PerlIO *rsfp
#  else
so	|void	|validate_suid	|NN const char *validarg \
				|NN const char *scriptname|int fdscript \
				|NN SV* linestr_sv \
				|NN PerlIO *rsfp
#  endif
#else
#  ifndef SETUID_SCRIPTS_ARE_SECURE_NOW
so	|void	|validate_suid	|NN PerlIO *rsfp
#  endif
#endif

#  if defined(IAMSUID)
s	|int	|fd_on_nosuid_fs|int fd
#  endif
s	|void*	|parse_body	|NULLOK char **env|XSINIT_t xsinit
rs	|void	|run_body	|I32 oldscope
s	|SV *	|incpush_if_exists|NN SV *dir
#endif

#if defined(PERL_IN_PP_C) || defined(PERL_DECL_PROT)
sR	|SV*	|refto		|NN SV* sv
#endif

#if defined(PERL_IN_PP_PACK_C) || defined(PERL_DECL_PROT)
s	|I32	|unpack_rec	|NN struct tempsym* symptr|NN const char *s \
				|NN const char *strbeg|NN const char *strend|NULLOK const char **new_s
s	|SV **	|pack_rec	|NN SV *cat|NN struct tempsym* symptr|NN SV **beglist|NN SV **endlist
s	|SV*	|mul128		|NN SV *sv|U8 m
s	|I32	|measure_struct	|NN struct tempsym* symptr
s	|bool	|next_symbol	|NN struct tempsym* symptr
sR	|SV*	|is_an_int	|NN const char *s|STRLEN l
s	|int	|div128		|NN SV *pnum|NN bool *done
s	|const char *|group_end	|NN const char *patptr|NN const char *patend \
				|char ender
sR	|const char *|get_num	|NN const char *patptr|NN I32 *lenptr
sR	|char *	|sv_exp_grow	|NN SV *sv|STRLEN needed
#endif

pR	|I32	|dopoptosub_at	|NN const PERL_CONTEXT* cxstk|I32 startingblock
#if defined(PERL_IN_PP_CTL_C) || defined(PERL_DECL_PROT)
sR	|OP*	|docatch	|NULLOK OP *o
sR	|I32	|dopoptotry	|I32 startingblock
sR	|I32	|dopoptolabel	|NN const char *label
sR	|I32	|dopoptoloop	|I32 startingblock
s	|bool	|doeval		|int gimme|NULLOK ROOTOP** rootopp|NULLOK CV* outside|U32 seq
sR	|PerlIO *|check_type_and_open|NN const char *name
#ifndef PERL_DISABLE_PMC
sR	|PerlIO *|doopen_pm	|NN const char *name|const STRLEN namelen
#endif
sRn	|bool	|path_is_absolute|NN const char *name
sR	|I32	|run_user_filter|int idx|NN SV *buf_sv|int maxlen
#endif

#if defined(PERL_IN_PP_HOT_C) || defined(PERL_DECL_PROT)
sR	|SV*	|method_common	|NN SV* meth|NULLOK U32* hashp
#endif

#if defined(PERL_IN_PP_SORT_C) || defined(PERL_DECL_PROT)
s	|I32	|sv_ncmp	|NN SV *const a|NN SV *const b
s	|I32	|sv_i_ncmp	|NN SV *const a|NN SV *const b
s	|I32	|sortcv		|NN SV *const a|NN SV *const b
s	|I32	|sortcv_xsub	|NN SV *const a|NN SV *const b
s	|I32	|sortcv_stacked	|NN SV *const a|NN SV *const b
s	|void	|qsortsvu	|NULLOK SV** array|size_t num_elts|NN SVCOMPARE_t compare
#endif

#if defined(PERL_IN_PP_SYS_C) || defined(PERL_DECL_PROT)
#  if !defined(HAS_MKDIR) || !defined(HAS_RMDIR)
sR	|int	|dooneliner	|NN const char *cmd|NN const char *filename
#  endif
s	|SV *	|space_join_names_mortal|NN char *const *array
#endif

#if defined(PERL_IN_REGCOMP_C) || defined(PERL_DECL_PROT)
Es	|regnode*|regclassfold	|NN struct RExC_state_t *pRExC_state|U32 depth
Es	|regnode*|regclassfold_value	|NN struct RExC_state_t *pRExC_state|UV value
Es	|void   |anyof_get_swash	|NN struct RExC_state_t *pRExC_state|NN regnode *ret|NN SV *listsv|NULLOK AV* unicode_alternate
Es	|regnode*|reg		|NN struct RExC_state_t *pRExC_state \
				|I32 paren|NN I32 *flagp|U32 depth
Es	|regnode*|reganode	|NN struct RExC_state_t *pRExC_state|U8 op \
				|U32 arg
Es	|regnode*|regatom	|NN struct RExC_state_t *pRExC_state \
				|NN I32 *flagp|U32 depth
Es	|regnode*|regbranch	|NN struct RExC_state_t *pRExC_state \
				|NN I32 *flagp|I32 first|U32 depth
Es	|STRLEN	|reguni		|NN const struct RExC_state_t *pRExC_state \
				|UV uv|NN char *s
Es	|regnode*|regclass	|NN struct RExC_state_t *pRExC_state|U32 depth
ERsn	|I32	|regcurly	|NN const char *s
Es	|regnode*|reg_node	|NN struct RExC_state_t *pRExC_state|U8 op
Es	|regnode*|regpiece	|NN struct RExC_state_t *pRExC_state \
				|NN I32 *flagp|U32 depth
Es	|regnode*|reg_namedseq	|NN struct RExC_state_t *pRExC_state \
				|NULLOK UV *valuep
Es	|void	|reginsert	|NN struct RExC_state_t *pRExC_state \
				|U8 op|NN regnode *opnd|U32 depth
Es	|void	|regtail	|NN struct RExC_state_t *pRExC_state \
				|NN regnode *p|NN const regnode *val|U32 depth
Es	|SV *	|reg_scan_name	|NN struct RExC_state_t *pRExC_state \
				|U32 flags
Es	|U32	|join_exact	|NN struct RExC_state_t *pRExC_state \
				|NN regnode *scan|NN I32 *min|U32 flags|NULLOK regnode *val|U32 depth
EsRn	|char *	|regwhite	|NN struct RExC_state_t *pRExC_state \
				|NN char *p
Es	|char *	|nextchar	|NN struct RExC_state_t *pRExC_state
Es	|bool	|reg_skipcomment|NN struct RExC_state_t *pRExC_state
Es	|void	|scan_commit	|NN const struct RExC_state_t *pRExC_state \
				|NN struct scan_data_t *data|NN I32 *minlenp \
				|int is_inf
Esn	|void	|cl_anything	|NN const struct RExC_state_t *pRExC_state \
				|NN struct regnode_charclass_class *cl
EsRn	|int	|cl_is_anything	|NN const struct regnode_charclass_class *cl
Esn	|void	|cl_init	|NN const struct RExC_state_t *pRExC_state \
				|NN struct regnode_charclass_class *cl
Esn	|void	|cl_init_zero	|NN const struct RExC_state_t *pRExC_state \
				|NN struct regnode_charclass_class *cl
Esn	|void	|cl_and		|NN struct regnode_charclass_class *cl \
				|NN const struct regnode_charclass_class *and_with
Esn	|void	|cl_or		|NN const struct RExC_state_t *pRExC_state \
				|NN struct regnode_charclass_class *cl \
				|NN const struct regnode_charclass_class *or_with
Es	|I32	|study_chunk	|NN struct RExC_state_t *pRExC_state \
				|NN regnode **scanp|NN I32 *minlenp \
				|NN I32 *deltap|NN regnode *last \
				|NULLOK struct scan_data_t *data \
				|I32 stopparen|NULLOK char* recursed \
				|NULLOK struct regnode_charclass_class *and_withp \
				|U32 flags|U32 depth
EsRn	|U32	|add_data	|NN struct RExC_state_t *pRExC_state|U32 n \
				|NN const char *s
rs	|void	|re_croak2	|NN const char* pat1|NN const char* pat2|...
Es	|I32	|regpposixcc	|NN struct RExC_state_t *pRExC_state|I32 value
Es	|void	|checkposixcc	|NN struct RExC_state_t *pRExC_state
Es	|I32	|make_trie	|NN struct RExC_state_t *pRExC_state \
				|NN regnode *startbranch|NN regnode *first \
				|NN regnode *last|NN regnode *tail \
				|U32 word_count|U32 flags|U32 depth
Es	|void	|make_trie_failtable	|NN struct RExC_state_t *pRExC_state \
                                |NN regnode *source|NN regnode *stclass \
				|U32 depth
#  ifdef RE_DEBUGGING
Es	|void	|regdump_extflags|NULLOK const char *lead| const U32 flags
Es	|const regnode*|dumpuntil|NN const regexp *r|NN const regnode *start \
				|NN const regnode *node \
				|NULLOK const regnode *last \
				|NULLOK const regnode *plast \
				|NN SV* sv|I32 indent|U32 depth
Es	|void	|put_byte	|NN SV* sv|int c
Es	|void	|dump_trie	|NN const struct _reg_trie_data *trie\
				|NN AV *revcharmap\
				|U32 depth
Es	|void	|dump_trie_interim_list|NN const struct _reg_trie_data *trie\
				|NN AV *revcharmap\
				|U32 next_alloc|U32 depth
Es	|void	|dump_trie_interim_table|NN const struct _reg_trie_data *trie\
				|NN AV *revcharmap\
				|U32 next_alloc|U32 depth
Es	|U8	|regtail_study	|NN struct RExC_state_t *pRExC_state \
				|NN regnode *p|NN const regnode *val|U32 depth
#  endif
#endif

#if defined(PERL_IN_REGEXEC_C) || defined(PERL_DECL_PROT)
ERs	|I32	|regmatch	|NN regmatch_info *reginfo|NN regnode *prog
ERs	|I32	|regrepeat	|NN const regexp *prog|NN const regnode *p|I32 max|int depth
ERs	|I32	|regtry		|NN regmatch_info *reginfo|NN char **startpos
ERs	|bool	|reginclass	|NULLOK const regexp *prog|NN const regnode *n|NN const char *p|NULLOK STRLEN *lenp
Es	|CHECKPOINT|regcppush	|I32 parenfloor
Es	|char*	|regcppop	|NN const regexp *rex
ERsn	|char*	|reghop3	|NN char *s|I32 off|NN char *lim
ERsn	|char*	|reghop3c	|NN char *s|I32 off|NN char *lim
ERsn	|char*	|reghop4	|NN char *s|I32 off|NN char *llim|NN char *rlim
ERsn	|char*	|reghopmaybe3	|NN char *s|I32 off|NN const char *lim
ERs	|char*	|find_byclass	|NN regexp * prog|NN const regnode *c|NN char *s|NN const char *strend|NULLOK regmatch_info *reginfo
Es	|void	|swap_match_buff|NN regexp * prog
ERs	|I32	|reg_check_named_buff_matched	|NN const regexp *rex \
						|NN const regnode *scan
#  ifdef RE_DEBUGGING
Es	|void	|dump_exec_pos	|NN const char *locinput|NN const regnode *scan|NN const char *loc_regeol\
				|NN const char *loc_bostr|NN const char *loc_reg_starttry|const bool do_utf8
Es	|void	|debug_start_match|NN REGEXP *prog|const bool do_utf8|NN const char *start|NN const char *end|NN const char *blurb
#  endif
#endif

#if defined(PERL_IN_DUMP_C) || defined(PERL_DECL_PROT)
s	|CV*	|deb_curcv	|const I32 ix
s	|void	|debprof	|NN const OP *o
s	|void	|sequence	|NULLOK const OP *o
s	|void	|sequence_tail	|NULLOK const OP *o
s	|UV	|sequence_num	|NULLOK const OP *o
s	|SV*	|pm_description	|NN const PMOP *pm
#endif

#if defined(PERL_IN_GV_C) || defined(PERL_IN_SV_C) || defined(PERL_IN_PAD_C) || defined(PERL_DECL_PROT)
po	|void	|sv_add_backref	|NN SV *const tsv|NN SV *const sv
#endif

#if defined(PERL_IN_HV_C) || defined(PERL_IN_MG_C) || defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
poM	|int	|sv_kill_backrefs	|NN SV *const sv|NN AV *const av
#endif

#if defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
nsR	|char *	|uiv_2buf	|NN char *const buf|const IV iv|UV uv|const int is_uv|NN char **const peob
s	|void	|sv_unglob	|NN SV *const sv
s	|void	|not_a_number	|NN SV *const sv
s	|I32	|visit		|NN SVFUNC_t f|const U32 flags|const U32 mask
s	|void	|sv_del_backref	|NN SV *const tsv|NN SV *const sv
sR	|SV *	|varname	|NULLOK const GV *const gv|const char gvtype \
				|PADOFFSET targ|NULLOK const SV *const keyname \
				|I32 aindex|int subscript_type
#  ifdef DEBUGGING
s	|void	|del_sv	|NN SV *p
#  endif
sR	|I32	|expect_number	|NN char **const pattern
#
sn	|STRLEN	|sv_pos_u2b_forwards|NN const char *const start \
		|NN const char *const send|STRLEN uoffset
sn	|STRLEN	|sv_pos_u2b_midway|NN const char *const start \
		|NN const char *send|const STRLEN uoffset|const STRLEN uend
s	|STRLEN	|sv_pos_u2b_cached|NN SV *sv|NN MAGIC **mgp \
		|NN const char *const start|NN const char *const send \
		|const STRLEN uoffset|STRLEN uoffset0|STRLEN boffset0
s	|void	|utf8_mg_pos_cache_update|NN SV *const sv|NN MAGIC **const mgp \
		|const STRLEN byte|const STRLEN utf8|const STRLEN blen
s	|STRLEN	|sv_pos_b2u_midway|NN const char *const s|NN const char *const target \
		|NN const char *end|STRLEN endu
sn	|char *	|F0convert	|NV nv|NN char *const endbuf|NN STRLEN *const len
#  if defined(PERL_OLD_COPY_ON_WRITE)
sM	|void	|sv_release_COW	|NN SV *sv|NN const char *pvx|NN SV *after
#  endif
s	|SV *	|more_sv
s	|void *	|more_bodies	|const svtype sv_type
s	|void	|glob_assign_ref|NN SV *const dstr|NN SV *const sstr
sRn	|PTR_TBL_ENT_t *|ptr_table_find|NN PTR_TBL_t *const tbl|NULLOK const void *const sv
#endif

#if defined(PERL_IN_TOKE_C) || defined(PERL_DECL_PROT)
s	|void	|check_uni
s	|void	|force_next	|I32 type
s	|char*	|force_version	|NN char *s
s	|SV*	|curlocation    |NN const char* location
s	|char*	|force_word	|NN char *start|int token|int check_keyword \
				|int allow_pack|int allow_tick
s	|SV*	|tokeq		|NN SV *sv
s	|void	|readpipe_override|
sR	|char*	|scan_const	|NN char *start
sR	|char*	|scan_heredoc	|NN char *s
s	|char*	|scan_ident	|NN char *s|NN const char *send|NN char *dest \
				|STRLEN destlen|I32 ck_uni
sR	|char*	|scan_pat	|NN char *start|I32 type
sR	|char*	|scan_str	|NN char *start|int keep_quoted|int keep_delims|NN yy_str_info *str_info
sR	|char*	|scan_subst	|NN char *start
s	|char*	|scan_word	|NN char *s|NN char *dest|STRLEN destlen \
				|int allow_package|NN STRLEN *slp
sR	|char*	|skipspace	|NN char *s|NULLOK bool* iscontinuationp
sR	|char*	|swallow_bom	|NN char *s
s	|void	|checkcomma	|NN const char *s|NN const char *name \
				|NN const char *what
s	|void	|force_ident	|NN const char *s|int kind
s	|void	|incline	|NN char *s
s	|int	|intuit_more	|NN char *s
s	|I32	|lop		|I32 f|int x|NN char *s
rs	|void	|missingterminator	|NULLOK char *s
s	|void	|no_op		|NN const char *what|NULLOK char *s
sR	|I32	|sublex_done
sR	|I32	|sublex_push
sR	|I32	|sublex_start   |I32 op_type|NULLOK OP *op
sR	|char *	|filter_gets	|NN SV *sv|NN PerlIO *fp|STRLEN append
sR	|char *	|tokenize_use	|int is_use|NN char *s
so	|SV*	|new_constant	|NULLOK const char *s|STRLEN len \
				|NN const char *key|STRLEN keylen|NN SV *sv \
				|NULLOK SV *pv|NULLOK const char *type \
				|STRLEN typelen
s	|int	|ao		|int toketype
#  if defined(PERL_CR_FILTER)
s	|I32	|cr_textfilter	|int idx|NULLOK SV *sv|int maxlen
s	|void	|strip_return	|NN SV *sv
#  endif
#  if defined(DEBUGGING)
s	|int	|tokereport	|I32 rv|NN const YYSTYPE* lvalp
s	|void	|printbuf	|NN const char *const fmt|NN const char *const s
#  endif
#endif

#if defined(PERL_IN_UNIVERSAL_C) || defined(PERL_DECL_PROT)
s	|bool|isa_lookup	|NN HV *stash|NN const char * const name
#endif

#if defined(PERL_IN_LOCALE_C) || defined(PERL_DECL_PROT)
#if defined(USE_LOCALE_NUMERIC) || defined(USE_LOCALE_COLLATE)
s	|char*	|stdize_locale	|NN char* locs
#endif
#endif

#if defined(PERL_IN_UTIL_C) || defined(PERL_DECL_PROT)
s	|SV*	|mess_alloc
s	|SV*    |vdie_croak_common|NULLOK SV* location|NULLOK const char *pat|NULLOK va_list *args
sr	|char *	|write_no_mem
#if defined(PERL_MEM_LOG) && defined(PERL_MEM_LOG_STDERR)
sn	|void	|mem_log_common	|enum mem_log_type mlt|const UV n|const UV typesize \
				|NN const char *type_name|NULLOK const SV *sv \
				|Malloc_t oldalloc|Malloc_t newalloc \
				|NN const char *filename|const int linenumber \
				|NN const char *funcname
#endif
#endif

p	|bool	|vdie_common	|NN SV *msv|bool warn

#if defined(PERL_IN_NUMERIC_C) || defined(PERL_DECL_PROT)
sn	|NV|mulexp10	|NV value|I32 exponent
#endif

#if defined(PERL_IN_UTF8_C) || defined(PERL_DECL_PROT)
sRn	|STRLEN	|is_utf8_char_slow|NN const char *s|const STRLEN len
sR	|bool	|is_utf8_common	|NN const char *const p|NN SV **swash|NN const char * const swashname
sR	|SV*	|swash_get	|NN SV* swash|UV start|UV span
#endif

START_EXTERN_C

Apd	|void	|sv_setsv_flags	|NN SV *dstr|NULLOK SV *sstr|const I32 flags
Apd	|void	|sv_catpvn_flags|NN SV *const dstr|NN const char *sstr|const STRLEN len \
				|const I32 flags
Apd	|void	|sv_catsv_flags	|NN SV *const dsv|NULLOK SV *const ssv|const I32 flags
Apd	|char*	|sv_pvn_force_flags|NN SV *const sv|NULLOK STRLEN *const lp|const I32 flags
Apd	|void	|sv_copypv	|NN SV *const dsv|NN SV *const ssv
Ap	|char*	|my_atof2	|NN const char *s|NN NV* value
Apn	|int	|my_socketpair	|int family|int type|int protocol|int fd[2]
Ap	|int	|my_dirfd	|NULLOK DIR* dir
#ifdef PERL_OLD_COPY_ON_WRITE
pMXE	|SV*	|sv_setsv_cow	|NN SV* dstr|NN SV* sstr
#endif

Aop	|const char *|PerlIO_context_layers|NULLOK const char *mode

#if defined(USE_PERLIO) && !defined(USE_SFIO)
Ap	|int	|PerlIO_close		|NULLOK PerlIO *f
Ap	|int	|PerlIO_fill		|NULLOK PerlIO *f
Ap	|int	|PerlIO_fileno		|NULLOK PerlIO *f
Ap	|int	|PerlIO_eof		|NULLOK PerlIO *f
Ap	|int	|PerlIO_error		|NULLOK PerlIO *f
Ap	|int	|PerlIO_flush		|NULLOK PerlIO *f
Ap	|void	|PerlIO_clearerr	|NULLOK PerlIO *f
Ap	|void	|PerlIO_set_cnt		|NULLOK PerlIO *f|int cnt
Ap	|void	|PerlIO_set_ptrcnt	|NULLOK PerlIO *f|NULLOK STDCHAR *ptr \
					|int cnt
Ap	|void	|PerlIO_setlinebuf	|NULLOK PerlIO *f
Ap	|SSize_t|PerlIO_read		|NULLOK PerlIO *f|NN void *vbuf \
					|Size_t count
Ap	|SSize_t|PerlIO_write		|NULLOK PerlIO *f|NN const void *vbuf \
					|Size_t count
Ap	|SSize_t|PerlIO_unread		|NULLOK PerlIO *f|NN const void *vbuf \
					|Size_t count
Ap	|Off_t	|PerlIO_tell		|NULLOK PerlIO *f
Ap	|int	|PerlIO_seek		|NULLOK PerlIO *f|Off_t offset|int whence

Ap	|STDCHAR *|PerlIO_get_base	|NULLOK PerlIO *f
Ap	|STDCHAR *|PerlIO_get_ptr	|NULLOK PerlIO *f
ApR	|int	  |PerlIO_get_bufsiz	|NULLOK PerlIO *f
ApR	|int	  |PerlIO_get_cnt	|NULLOK PerlIO *f

ApR	|PerlIO *|PerlIO_stdin
ApR	|PerlIO *|PerlIO_stdout
ApR	|PerlIO *|PerlIO_stderr
#endif /* PERLIO_LAYERS */

p	|void	|deb_stack_all
#ifdef PERL_IN_DEB_C
s	|void	|deb_stack_n	|NN SV** stack_base|I32 stack_min \
				|I32 stack_max|I32 mark_min|I32 mark_max
#endif

pda	|PADLIST*|pad_new	|int flags|NULLOK PAD *parent_padnames|NULLOK PAD *parent_pad|IV parent_seq
pd	|void	|pad_undef	|NN CV* cv
pd	|void	|pad_tmprefcnt	|NN CV* cv
pd	|PADOFFSET|pad_add_name	|NN const char *name\
				|NULLOK GV* ourgv|bool clone
pd	|PADOFFSET|pad_add_anon	|NN SV* sv|OPCODE op_type
pd	|void	|pad_check_dup	|NN const char* name|bool is_our|NN const HV* ourstash
#ifdef DEBUGGING
pd	|void	|pad_setsv	|PADOFFSET po|NN SV* sv
#endif
pd	|void	|pad_block_start|int full
pd	|void	|pad_tidy	|padtidy_type type
pd 	|void	|do_dump_pad	|I32 level|NN PerlIO *file|NULLOK PADLIST *padlist|int full
pdX	|void	|pad_push	|NN PADLIST *padlist|int depth
pd	|void	|pad_savelex	|NN PAD *padnames|NN PAD* pad|U32 seq

#if defined(PERL_IN_PAD_C) || defined(PERL_DECL_PROT)
sd	|PADOFFSET|pad_findlex	|NN const char *name|NN PAD* padnames|NN PAD* pad|U32 seq
#  if defined(DEBUGGING)
sd	|void	|cv_dump	|NN const CV *cv|NN const char *title
#  endif
#endif
ApdR	|CV*	|find_runcv	|NULLOK U32 *db_seqp
p	|void	|free_tied_hv_pool
#if defined(DEBUGGING)
pR	|int	|get_debug_opts	|NN const char **s|bool givehelp
#endif
Ap	|void	|save_set_svflags|NN SV *sv|U32 mask|U32 val
Apod	|void	|hv_assert	|NN HV *hv

ApdR	|SV*	|hv_scalar	|NN HV *hv
ApoR	|I32*	|hv_riter_p	|NN HV *hv
ApoR	|HE**	|hv_eiter_p	|NN HV *hv
Apo	|void	|hv_riter_set	|NN HV *hv|I32 riter
Apo	|void	|hv_eiter_set	|NN HV *hv|NULLOK HE *eiter
Ap	|void	|hv_name_set	|NN HV *hv|NULLOK const char *name|U32 len|U32 flags
poM	|AV**	|hv_backreferences_p	|NN HV *hv
#if defined(PERL_IN_DUMP_C) || defined(PERL_IN_HV_C) || defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
poM	|void	|hv_kill_backrefs	|NN HV *hv
#endif
Apd	|void	|hv_clear_placeholders	|NN HV *hv
ApoR	|I32*	|hv_placeholders_p	|NN HV *hv
ApoR	|I32	|hv_placeholders_get	|NN const HV *hv
Apo	|void	|hv_placeholders_set	|NN HV *hv|I32 ph

#if defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
s	|SV *	|find_hash_subscript|NULLOK const HV *const hv \
		|NN const SV *const val
s	|I32	|find_array_subscript|NULLOK const AV *const av \
		|NN const SV *const val
sMd	|SV*	|find_uninit_var|NULLOK const OP *const obase \
		|NULLOK const SV *const uninit_sv|bool top
#endif

#ifdef PERL_NEED_MY_HTOLE16
np	|U16	|my_htole16	|U16 n
#endif
#ifdef PERL_NEED_MY_LETOH16
np	|U16	|my_letoh16	|U16 n
#endif
#ifdef PERL_NEED_MY_HTOBE16
np	|U16	|my_htobe16	|U16 n
#endif
#ifdef PERL_NEED_MY_BETOH16
np	|U16	|my_betoh16	|U16 n
#endif
#ifdef PERL_NEED_MY_HTOLE32
np	|U32	|my_htole32	|U32 n
#endif
#ifdef PERL_NEED_MY_LETOH32
np	|U32	|my_letoh32	|U32 n
#endif
#ifdef PERL_NEED_MY_HTOBE32
np	|U32	|my_htobe32	|U32 n
#endif
#ifdef PERL_NEED_MY_BETOH32
np	|U32	|my_betoh32	|U32 n
#endif
#ifdef PERL_NEED_MY_HTOLE64
np	|U64	|my_htole64	|U64 n
#endif
#ifdef PERL_NEED_MY_LETOH64
np	|U64	|my_letoh64	|U64 n
#endif
#ifdef PERL_NEED_MY_HTOBE64
np	|U64	|my_htobe64	|U64 n
#endif
#ifdef PERL_NEED_MY_BETOH64
np	|U64	|my_betoh64	|U64 n
#endif

#ifdef PERL_NEED_MY_HTOLES
np	|short	|my_htoles	|short n
#endif
#ifdef PERL_NEED_MY_LETOHS
np	|short	|my_letohs	|short n
#endif
#ifdef PERL_NEED_MY_HTOBES
np	|short	|my_htobes	|short n
#endif
#ifdef PERL_NEED_MY_BETOHS
np	|short	|my_betohs	|short n
#endif
#ifdef PERL_NEED_MY_HTOLEI
np	|int	|my_htolei	|int n
#endif
#ifdef PERL_NEED_MY_LETOHI
np	|int	|my_letohi	|int n
#endif
#ifdef PERL_NEED_MY_HTOBEI
np	|int	|my_htobei	|int n
#endif
#ifdef PERL_NEED_MY_BETOHI
np	|int	|my_betohi	|int n
#endif
#ifdef PERL_NEED_MY_HTOLEL
np	|long	|my_htolel	|long n
#endif
#ifdef PERL_NEED_MY_LETOHL
np	|long	|my_letohl	|long n
#endif
#ifdef PERL_NEED_MY_HTOBEL
np	|long	|my_htobel	|long n
#endif
#ifdef PERL_NEED_MY_BETOHL
np	|long	|my_betohl	|long n
#endif

np	|void	|my_swabn	|NN void* ptr|int n

Ap	|GV*	|gv_fetchpvn_flags|NN const char* name|STRLEN len|I32 flags|const svtype sv_type
Ap	|GV*	|gv_fetchsv|NN SV *name|I32 flags|const svtype sv_type

#ifdef PERL_DONT_CREATE_GVSV
Ap	|GV*	|gv_SVadd	|NN GV* gv
#endif
Apo	|bool	|ckwarn		|U32 w
Apo	|bool	|ckwarn_d	|U32 w
XEopMa	|STRLEN *|new_warnings_bitfield|NULLOK STRLEN *buffer \
				|NN const char *const bits|STRLEN size

p	|void	|offer_nice_chunk	|NN void *const chunk|const U32 chunk_size

p	|void	|refcnt_check
p	|void	|Perl_sv_tmprefcnt	|NN SV* sv

#ifndef SPRINTF_RETURNS_STRLEN
Apnod	|int	|my_sprintf	|NN char *buffer|NN const char *pat|...
#endif

Apnodf	|int	|my_snprintf	|NN char *buffer|const Size_t len|NN const char *format|...
Apnod	|int	|my_vsnprintf	|NN char *buffer|const Size_t len|NN const char *format|va_list ap

px	|void	|my_clearenv

#ifdef PERL_IMPLICIT_CONTEXT
#ifdef PERL_GLOBAL_STRUCT_PRIVATE
Apo	|void*	|my_cxt_init	|NN const char *my_cxt_key|size_t size
Apo	|int	|my_cxt_index	|NN const char *my_cxt_key
#else
Apo	|void*	|my_cxt_init	|NN int *index|size_t size
#endif
#endif

#ifndef HAS_STRLCAT
Apno	|Size_t	|my_strlcat	|NULLOK char *dst|NULLOK const char *src|Size_t size
#endif

#ifndef HAS_STRLCPY
Apno     |Size_t |my_strlcpy     |NULLOK char *dst|NULLOK const char *src|Size_t size
#endif

#ifdef PERL_MAD
Mnp	|void	|pad_peg	|NN const char* s
#if defined(PERL_IN_DUMP_C) || defined(PERL_DECL_PROT)
sf	|void	|xmldump_attr	|I32 level|NN PerlIO *file|NN const char* pat \
				|...
#endif
Mfp	|void	|xmldump_indent	|I32 level|NN PerlIO *file|NN const char* pat \
				|...
Mp	|void	|xmldump_vindent|I32 level|NN PerlIO *file|NN const char* pat \
				|NULLOK va_list *args
Mp	|void	|xmldump_all
Mp	|void	|xmldump_packsubs	|NN const HV* stash
Mp	|void	|xmldump_sub	|NN const GV* gv
Mp	|void	|xmldump_eval
Mp	|const char*	|sv_catxmlsv	|NN SV *dsv|NN SV *ssv
Mp	|const char*	|sv_catxmlpvn	|NN SV *dsv|NN const char *pv|STRLEN len
Mp	|const char*	|sv_xmlpeek	|NN SV* sv
Mp	|void	|do_pmop_xmldump|I32 level|NN PerlIO *file \
				|NULLOK const PMOP *pm
Mp	|void	|pmop_xmldump	|NULLOK const PMOP* pm
Mp	|void	|do_op_xmldump	|I32 level|NN PerlIO *file|NULLOK const OP *o
Mp	|void	|op_xmldump	|NN const OP *o

Mp	|MADTOKEN*	|newMADTOKEN	|I32 optype|NULLOK MADPROP* madprop
Mp	|void	|token_free	|NN MADTOKEN* tk
Mp	|void	|token_getmad	|NN MADTOKEN* tk|NULLOK OP* o|char slot|NULLOK SV* location
Mp	|void	|op_getmad_weak	|NULLOK OP* from|NULLOK OP* o|char slot
Mp	|void	|op_getmad	|NULLOK OP* from|NULLOK OP* o|char slot
Mp	|void	|prepend_madprops|NULLOK MADPROP* mp|NULLOK OP* o|char slot
Mp	|void	|append_madprops|NULLOK MADPROP* tm|NULLOK OP* o|char slot
Mp	|void	|append_madprops_pv|NN const char* v|NULLOK OP* o|char slot
Mp	|void	|addmad		|NULLOK MADPROP* tm|NULLOK MADPROP** root \
				|char slot
Mp	|MADPROP*|newMADsv	|char key|NN SV* sv|IV linenr|IV charoffset
Mp	|MADPROP*|newMADPROP	|char key|char type|NULLOK const void* val \
				|I32 vlen|IV linenr|IV charoffset
Mp	|void	|mad_free	|NULLOK MADPROP* mp

#  if defined(PERL_IN_TOKE_C) || defined(PERL_DECL_PROT)
s	|char*	|skipspace0	|NN char *s
s	|char*	|skipspace1	|NN char *s
s	|char*	|skipspace2	|NN char *s|NULLOK SV **sv
s	|void	|start_force	|int where
s	|void	|curmad		|char slot|NULLOK SV *sv|NULLOK SV* location
#  endif
Mp	|int	|madlex
Mp	|int	|madparse
#endif
#if !defined(HAS_SIGNBIT)
AMdnoP	|int	|Perl_signbit	|NV f
#endif

XEMop	|void	|emulate_cop_io	|NN const COP *const c|NN SV *const sv
XEMop	|REGEXP *|get_re_arg|NULLOK SV *sv

p	|struct mro_meta*	|mro_meta_init	|NN HV* stash
Apd	|AV*	|mro_get_linear_isa|NN HV* stash
#if defined(PERL_IN_MRO_C) || defined(PERL_DECL_PROT)
sd	|AV*	|mro_get_linear_isa_c3|NN HV* stash|I32 level
#endif
pd	|void   |mro_isa_changed_in|NN HV* stash
Apd	|void	|mro_method_changed_in	|NN HV* stash
p	|void   |boot_core_mro
Apon	|void	|sys_init	|NN int* argc|NN char*** argv
Apon	|void	|sys_init3	|NN int* argc|NN char*** argv|NN char*** env
Apon	|void	|sys_term

#ifdef PERL_MAD
p	|void	|dump_op_mad	|I32 level|NN PerlIO *file|NN const MADPROP *mp
#endif /* PERL_MAD */
#if defined(PERL_IN_DUMP_C)
s	|SV*	|dump_op_flags		|NN const OP* o
s	|SV*	|dump_op_flags_private	|NN const OP* o
s	|void	|dump_op_rest	|I32 level|NN PerlIO *file|NN const OP *o
#endif /* PERL_IN_DUMP_C */

poM	|HV *	|get_isa_hash	|NN HV *const stash

END_EXTERN_C
/*
 * ex: set ts=8 sts=4 sw=4 noet:
 */
