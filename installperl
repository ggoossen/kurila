#!./perl

BEGIN
    chdir '..' if !-d 'lib' and -d '../lib'
    $^INCLUDE_PATH = @: 'lib'
    env::var('PERL5LIB') = 'lib'

BEGIN {
    use Config;
    if (config_value("userelocatableinc")) {
        # This might be a considered a hack. Need to get information about the
        # configuration from Config.pm *before* Config.pm expands any .../
        # prefixes.
        #
        # So we set $^X to pretend that we're the already installed perl, so
        # Config.pm doesits ... expansion off that location.

        my $location = config_value("initialinstalllocation");
        die <<'OS' unless defined $location;
config_value("initialinstalllocation") is not defined - can't install a relocatable
perl without this.
OS
        $^EXECUTABLE_NAME = "$location/perl";
        # And then remove all trace of ever having loaded Config.pm, so that
        # it will reload with the revised $^EXECUTABLE_NAME
        undef %Config::;
        delete $^INCLUDED{"Config.pm"};
        delete $^INCLUDED{"Config_heavy.pl"};
        # You never saw us. We weren't here.
    }
}

my ($Is_VMS, $Is_W32, $Is_OS2, $Is_Cygwin, $Is_Darwin,
    $nonono, $dostrip, $versiononly, $silent, $verbose, $force,
    $otherperls, $archname, $Is_NetWare, $nwinstall, $nopods);
our $depth;

BEGIN {
    $Is_VMS = $^OS_NAME eq 'VMS';
    $Is_W32 = $^OS_NAME eq 'MSWin32';
    $Is_OS2 = $^OS_NAME eq 'os2';
    $Is_Cygwin = $^OS_NAME eq 'cygwin';
    $Is_Darwin = $^OS_NAME eq 'darwin';
    if ($Is_VMS) { eval 'use VMS::Filespec;' }
}

my $scr_ext = ($Is_VMS ?? '.Com' !! $Is_W32 ?? '.bat' !! '');

use File::Find;
use File::Compare;
use File::Copy ();
use File::Path ();
use ExtUtils::Packlist;
use Cwd;
use Config;

if (config_value('d_umask')) {
    umask(022); # umasks like 077 aren't that useful for installations
}

$Is_NetWare = config_value("osname") eq 'NetWare';
if ($Is_NetWare) {
    $Is_W32 = 0;
    $scr_ext = '.pl';
}

# override the ones in the rest of the script
sub mkpath {
    File::Path::mkpath(<@_) unless $nonono;
}

my $mainperldir = "/usr/bin";
my $exe_ext = config_value("exe_ext");

# Allow ``make install PERLNAME=something_besides_perl'':
my $perl = env::var('PERLNAME') // 'perl';

# This is the base used for versioned names, like "perl5.6.0".
# It's separate because a common use of $PERLNAME is to install
# perl as "perl5", if that's used as base for versioned files you
# get "perl55.6.0".
my $perl_verbase = env::var('PERLNAME_VERBASE') // $perl;
my $dbg = '';
my $ndbg = '';
if ( $Is_VMS ) {
    if ( defined config_value("usevmsdebug") ) {
        if ( config_value("usevmsdebug") eq 'define' ) {
            $dbg = 'dbg';
            $ndbg = 'ndbg';
        }
    }
}

$otherperls = 1;
my $destdir = '';
while (@ARGV) {
    $nonono = 1 if @ARGV[0] eq '-n';
    $dostrip = 1 if @ARGV[0] eq '-s';
    $versiononly = 1 if @ARGV[0] eq '-v';
    $versiononly = 0 if @ARGV[0] eq '+v';
    $silent = 1 if @ARGV[0] eq '-S';
    $otherperls = 0 if @ARGV[0] eq '-o';
    $force = 1 if @ARGV[0] eq '-f';
    $verbose = 1 if @ARGV[0] eq '-V' || @ARGV [0] eq '-n';
    $archname = 1 if @ARGV[0] eq '-A';
    $nwinstall = 1 if @ARGV[0] eq '-netware';
    $nopods = 1 if @ARGV[0] eq '-p';
    $destdir = $1 if @ARGV[0] =~ m/^-?-destdir=(.*)$/;
    if (@ARGV[0] eq '-?' or @ARGV[0] =~ m/^-?-h/) {
        print $^STDOUT, <<"EOT";
Usage $^PROGRAM_NAME: [switches]
  -n        Don't actually run any commands; just print them.
  -s        Run strip on installed binaries.
  -v        Only install perl as a binary with the version number in the name.
            (Override whatever config.sh says)
  +v        Install perl as "perl" and as a binary with the version number in
            the name.  (Override whatever config.sh says)
  -S        Silent mode.
  -f        Force installation (don't check if same version is there)
  -o        Skip checking for other copies of perl in your PATH.
  -V        Verbose mode.
  -A        Also install perl with the architecture's name in the perl binary's
            name.
  -p        Don't install the pod files. [This will break use diagnostics;]
  -netware  Install correctly on a Netware server.
  -destdir  Prefix installation directories by this string.
EOT
        exit;
    }
    shift @ARGV;
}

$versiononly = 1 if config_value("versiononly") && !defined $versiononly;
my (@scripts, @tolink);
open my $scriptfh, "<", "utils.lst" or die "Can't open utils.lst: $^OS_ERROR";
while (~< *$scriptfh)
    next if m/^#/
    s/\s*#\s*pod\s*=.*// # install script regardless of pod location
    next if m/a2p/ # a2p is binary, to be installed separately
    chomp
    if (m/(\S*)\s*#\s*link\s*=\s*(\S*)/)
        push @scripts, $1
        push @tolink, \@: $1, $2
    else
        push @scripts, $_

close $scriptfh

if ($scr_ext) { @scripts = map { "$_$scr_ext" }, @scripts; }

my @pods = $nopods ?? () !! glob("pod/*.pod");

# Specify here any .pm files that are actually architecture-dependent.
# (Those included with XS extensions under ext/ are automatically
# added later.)
# Now that the default privlib has the full perl version number included,
# we no longer have to play the trick of sticking version-specific .pm
# files under the archlib directory.
my %archpms = %:
    Config => 1
    lib => 1
    Cwd => 1

if ($^OS_NAME eq 'dos') {
    push(@scripts,'djgpp/fixpmain');
    %archpms{config} = %archpms{filehand} = 1;
}

if ((-e "testcompile") && (defined(env::var('COMPILE')))) {
    push(@scripts, < map("$_.exe", @scripts));
}

find(sub ()
    if ("$File::Find::dir/$_" =~ m{^ext\b(.*)/([^/]+)\.pm$})
        my @: $path, $modname = @: $1,$2

        # strip to optional "/lib", or remove trailing component
        $path =~ s{.*/lib\b}{} or $path =~ s{/[^/]*$}{}

        # strip any leading /
        $path =~ s{^/}{}

        # reconstitute canonical module name
        $modname = "$path/$modname" if length $path

        # remember it
        %archpms{+$modname} = 1
 , 'ext')

# print "[$_]\n" for sort keys %archpms

my $ver = config_value("version")
$^PERL_VERSION =~ m/kurila-(\d+).(\d+)/ or die "Invalid \$^PERL_VERSION"
my @: $release, $patchlevel = @: $1, $2
warn "Patchlevel of perl ($patchlevel) and patchlevel of config.sh ($(config_value('KURILA_VERSION'))) don't match\n"
        if $patchlevel != config_value('KURILA_VERSION')

# Fetch some frequently-used items from %Config
my $installbin = "$destdir" . config_value("installbin");
my $installscript = "$destdir" . config_value("installscript");
my $installprivlib = "$destdir" . config_value("installprivlib");
my $installarchlib = "$destdir" . config_value("installarchlib");
my $installsitelib = "$destdir" . config_value("installsitelib");
my $installsitearch = "$destdir" . config_value("installsitearch");
my $installman1dir = "$destdir" . config_value("installman1dir");
my $man1ext = config_value("man1ext");
my $libperl = config_value("libperl");
# Shared library and dynamic loading suffixes.
my $so = config_value("so");
my $dlext = config_value("dlext");
my $dlsrc = config_value("dlsrc");
if ($^OS_NAME eq 'os390') {
    my $pwd;
    chomp($pwd=`pwd`);
    my $archlibexp = config_value("archlibexp");
    my $usedl = config_value("usedl");
    if ($usedl eq 'define') {
        `./$^EXECUTABLE_NAME -pibak -e 's<$pwd\/libperl.x><$archlibexp/CORE/libperl.x>' lib/Config.pm`;
    }
}

if ($nwinstall) {
    # This is required only if we are installing on a NetWare server
    $installscript = config_value("installnwscripts");
    $installprivlib = config_value("installnwlib");
    $installarchlib = config_value("installnwlib");
    $installsitelib = config_value("installnwlib");
}

my $d_dosuid = config_value("d_dosuid");
my $binexp = config_value("binexp");

if ($Is_VMS) {  # Hang in there until File::Spec hits the big time
    foreach ( @: \$installbin,     \$installscript,  \$installprivlib
                 \$installarchlib, \$installsitelib, \$installsitearch
                 \$installman1dir ) {
        $_->$ = unixify($_->$);  $_->$ =~ s:/$::;
    }
}

# Do some quick sanity checks.

if (!$nonono && $d_dosuid && $^EUID) { die "You must run as root to install suidperl\n"; }

   $installbin          || die "No installbin directory in config.sh\n";
-d $installbin          || mkpath($installbin, $verbose, 0777);
-d $installbin          || $nonono || die "$installbin is not a directory\n";
-w $installbin          || $nonono || die "$installbin is not writable by you\n"
        unless $installbin =~ m#^/afs/# || $nonono;

if (!$Is_NetWare) {
if (!$Is_VMS) {
-x 'perl' . $exe_ext    || die "perl isn't executable!\n";
}
else {
-x $ndbg . 'perl' . $exe_ext    || die "$($ndbg)perl$exe_ext isn't executable!\n";
    if ($dbg) {
        -x $dbg . 'perl' . $exe_ext     || die "$($dbg)perl$exe_ext isn't executable!\n";
    }
}
-x 'suidperl' . $exe_ext|| die "suidperl isn't executable!\n" if $d_dosuid;

-f 't/rantests'         || $Is_W32
                        || warn "WARNING: You've never run 'make test' or some tests failed! (Installing anyway.)\n";
} #if (!$Is_NetWare)

# This will be used to store the packlist
my $packlist = ExtUtils::Packlist->new("$installarchlib/.packlist");

if (($Is_W32 and ! $Is_NetWare) or $Is_Cygwin)
    my $perldll

    if ($Is_Cygwin)
      $perldll = $libperl
      my $v_e_r_s = $ver
      $v_e_r_s =~ s/[.]/_/g
      $v_e_r_s =~ s/(\d_\d)_\d$/$1/   # remove optional _SUBVERSION suffix
      $v_e_r_s .= "d" if config_value("ccflags") =~ m/-DDEBUGGING\b/
      $perldll =~ s/(\..*)?$/$v_e_r_s.$dlext/
      $perldll =~ s/^lib/cyg/
    else
      my $v_e_r_s = $ver
      $v_e_r_s =~ s/[.]//g
      $perldll = 'perlkurila' . $v_e_r_s . "." . $dlext

    if ($dlsrc ne "dl_none.xs")
        -f $perldll || die "No perl DLL built\n"

    # Install the DLL
    safe_unlink("$installbin/$perldll")
    copy("$perldll", "$installbin/$perldll")
    chmod(0755, "$installbin/$perldll")
    $packlist->{data}{+"$installbin/$perldll"} = \%: type => 'file'
# if (($Is_W32 and ! $Is_NetWare) or $Is_Cygwin)

# First we install the version-numbered executables.

if ($Is_VMS) {
    safe_unlink("$installbin/perl_setup.com");
    copy("perl_setup.com", "$installbin/perl_setup.com");
    chmod(0755, "$installbin/perl_setup.com");
    safe_unlink("$installbin/$dbg$perl$exe_ext");
    copy("$dbg$perl$exe_ext", "$installbin/$dbg$perl$exe_ext");
    chmod(0755, "$installbin/$dbg$perl$exe_ext");
    safe_unlink("$installbin/$($dbg)$($perl)shr$exe_ext");
    copy("$($dbg)$($perl)shr$exe_ext", "$installbin/$($dbg)$($perl)shr$exe_ext");
    chmod(0755, "$installbin/$($dbg)$($perl)shr$exe_ext");
    if ($ndbg) {
        safe_unlink("$installbin/$ndbg$perl$exe_ext");
        copy("$ndbg$perl$exe_ext", "$installbin/$ndbg$perl$exe_ext");
        chmod(0755, "$installbin/$ndbg$perl$exe_ext");
    }
}
elsif ($^OS_NAME eq 'mpeix') {
    # MPE lacks hard links and requires that executables with special
    # capabilities reside in the MPE namespace.
    safe_unlink("$installbin/perl$ver$exe_ext", config_value("perlpath"));
    # Install the primary executable into the MPE namespace as perlpath.
    copy("perl$exe_ext", config_value("perlpath"));
    chmod(0755, config_value("perlpath"));
    # Create a backup copy with the version number.
    link(config_value("perlpath"), "$installbin/perl$ver$exe_ext");
}
elsif ($^OS_NAME ne 'dos') {
    if (!$Is_NetWare) {
        safe_unlink("$installbin/$perl_verbase$ver$exe_ext");
        copy("perl$exe_ext", "$installbin/$perl_verbase$ver$exe_ext");
        strip("$installbin/$perl_verbase$ver$exe_ext");
        chmod(0755, "$installbin/$perl_verbase$ver$exe_ext");
    }
    else {
        # If installing onto a NetWare server
        if ($nwinstall) {
            # Copy perl.nlm, echo.nlm, type.nlm, a2p.nlm & cgi2perl.nlm
            mkpath(config_value("installnwsystem"), 1, 0777);
            copy("netware\\".env::var('MAKE_TYPE')."\\perl.nlm", config_value("installnwsystem"));
            copy("netware\\testnlm\\echo\\echo.nlm", config_value("installnwsystem"));
            copy("netware\\testnlm\\type\\type.nlm", config_value("installnwsystem"));
            copy("x2p\\a2p.nlm", config_value("installnwsystem"));
            chmod(0755, config_value("installnwsystem") . "\\perl.nlm");
            mkpath(config_value("installnwlcgi"), 1, 0777);
            copy("lib\\auto\\cgi2perl\\cgi2perl.nlm", config_value("installnwlcgi"));
        }
    } #if (!$Is_NetWare)
}
else {
    safe_unlink("$installbin/$perl.exe");
    copy("perl.exe", "$installbin/$perl.exe");
}

safe_unlink("$installbin/s$perl_verbase$ver$exe_ext");
if ($d_dosuid) {
    copy("suidperl$exe_ext", "$installbin/s$perl_verbase$ver$exe_ext");
    chmod(04711, "$installbin/s$perl_verbase$ver$exe_ext");
}

# Install library files.

my @: $do_installarchlib, $do_installprivlib = @: 0, 0
my $vershort = $Is_Cygwin ?? substr($ver,0,-2) !! $ver

mkpath($installprivlib, $verbose, 0777)
mkpath($installarchlib, $verbose, 0777)
mkpath($installsitelib, $verbose, 0777) if ($installsitelib)
mkpath($installsitearch, $verbose, 0777) if ($installsitearch)

if (chdir "lib") {
    $do_installarchlib = ! samepath($installarchlib, '.');
    $do_installprivlib = ! samepath($installprivlib, '.');
    $do_installprivlib = 0 if $versiononly && !($installprivlib =~ m/\Q$vershort/);

    if ($do_installarchlib || $do_installprivlib) {
        find(\&installlib, '.');
    }
    chdir ".." || die "Can't cd back to source directory: $^OS_ERROR\n";
}
else {
    warn "Can't cd to lib to install lib files: $^OS_ERROR\n";
}

# Install header files and libraries.
mkpath("$installarchlib/CORE", $verbose, 0777);
my @corefiles;
if ($Is_VMS) {  # We did core file selection during build
    my $coredir = "lib/$(config_value('archname'))/$ver/CORE";
    $coredir =~ s/[.]/_/g;
    map { s|^$coredir/||i }, (@corefiles = glob("$coredir/*.*"));
}
else {
    # [als] hard-coded 'libperl' name... not good!
    @corefiles = glob("*.h libperl*.* perl*" . config_value('lib_ext'));

    # AIX needs perl.exp installed as well.
    push(@corefiles,'perl.exp') if $^OS_NAME eq 'aix';
    if ($^OS_NAME eq 'mpeix') {
        # MPE needs mpeixish.h installed as well.
        mkpath("$installarchlib/CORE/mpeix", $verbose, 0777);
        push(@corefiles,'mpeix/mpeixish.h');
    }
    # If they have built sperl.o...
    push(@corefiles,'sperl.o') if -f 'sperl.o';
}
foreach my $file (@corefiles) {
    # HP-UX (at least) needs to maintain execute permissions
    # on dynamically-loadable libraries. So we do it for all.
    if (copy_if_diff($file,"$installarchlib/CORE/$file")) {
        if ($file =~ m/\.(\Q$so\E|\Q$dlext\E)$/) {
            strip("-S", "$installarchlib/CORE/$file") if $^OS_NAME =~ m/^(rhapsody|darwin)$/;
            chmod(0555, "$installarchlib/CORE/$file");
        } else {
            chmod(0444, "$installarchlib/CORE/$file");
        }
    }
}

# Install main perl executables
# Make links to ordinary names if installbin directory isn't current directory.

if (! $versiononly && ! samepath($installbin, '.') && ($^OS_NAME ne 'dos') && ! $Is_VMS && ! $Is_NetWare) {
    safe_unlink("$installbin/$perl$exe_ext", "$installbin/suid$perl$exe_ext");
    if ($^OS_NAME eq 'mpeix') {
        # MPE doesn't support hard links, so use a symlink.
        # We don't want another cloned copy.
        symlink(config_value("perlpath"), "$installbin/perl$exe_ext");
    } elsif ($^OS_NAME eq 'vos') {
        # VOS doesn't support hard links, so use a symlink.
        symlink("$installbin/$perl_verbase$ver$exe_ext",
                "$installbin/$perl$exe_ext");
    } else {
        link("$installbin/$perl_verbase$ver$exe_ext",
                "$installbin/$perl$exe_ext");
    }
    link("$installbin/$perl_verbase$ver$exe_ext",
            "$installbin/suid$perl$exe_ext")
      if $d_dosuid;
}

# For development purposes it can be very useful to have multiple perls
# build for different "architectures" (eg threading or not) simultaneously.
if ($archname && ! samepath($installbin, '.') && ($^OS_NAME ne 'dos') && ! $Is_VMS) {
    my $archperl = "$perl_verbase$ver-$(config_value('archname'))$exe_ext";
    safe_unlink("$installbin/$archperl");
    if ($^OS_NAME eq 'mpeix') {
        # MPE doesn't support hard links, so use a symlink.
        # We don't want another cloned copy.
        symlink(config_value("perlpath"), "$installbin/$archperl");
    } elsif ($^OS_NAME eq 'vos') {
        # VOS doesn't support hard links, so use a symlink.
        symlink("$installbin/$perl_verbase$ver$exe_ext",
                "$installbin/$archperl");
    } else {
        link("$installbin/$perl_verbase$ver$exe_ext", "$installbin/$archperl");
    }
}

# Offer to install perl in a "standard" location

my $mainperl_is_instperl = 0;

if (config_value("installusrbinperl") && config_value("installusrbinperl") eq 'define' &&
    !$versiononly && !$nonono && !$Is_W32 && !$Is_NetWare && !$Is_VMS && -t $^STDIN && -t $^STDERR
        && -w $mainperldir && ! samepath($mainperldir, $installbin)) {
    my($usrbinperl)     = "$mainperldir/$perl$exe_ext";
    my($instperl)       = "$installbin/$perl$exe_ext";
    my($expinstperl)    = "$binexp/$perl$exe_ext";

    # First make sure $usrbinperl is not already the same as the perl we
    # just installed.
    if (-x $usrbinperl) {
        # Try to be clever about mainperl being a symbolic link
        # to binexp/perl if binexp and installbin are different.
        $mainperl_is_instperl =
            samepath($usrbinperl, $instperl) ||
            samepath($usrbinperl, $expinstperl) ||
             (($binexp ne $installbin) &&
              (-l $usrbinperl) &&
              ((readlink $usrbinperl) eq $expinstperl));
    }
    if (! $mainperl_is_instperl) {
        unlink($usrbinperl);
        ( config_value('d_link') eq 'define' &&
          try { CORE::link $instperl, $usrbinperl } )   ||
        try { symlink $expinstperl, $usrbinperl }       ||
        copy($instperl, $usrbinperl);

        $mainperl_is_instperl = 1;
    }
}

# cppstdin is just a script, but it is architecture-dependent, so
# it can't safely be shared.  Place it in $installbin.
# Note that Configure doesn't build cppstin if it isn't needed, so
# we skip this if cppstdin doesn't exist.
if (! $versiononly && (-f 'cppstdin') && (! samepath($installbin, '.'))) {
    safe_unlink("$installbin/cppstdin");
    copy("cppstdin", "$installbin/cppstdin");
    chmod(0755, "$installbin/cppstdin");
}

sub script_alias($installscript, $orig, $alias, $scr_ext)
    safe_unlink("$installscript/$alias$scr_ext")
    if ($^OS_NAME eq 'dos' or $Is_VMS or $^OS_NAME eq 'transit')
        copy("$installscript/$orig$scr_ext",
             "$installscript/$alias$scr_ext")
    elsif ($^OS_NAME eq 'vos')
        symlink("$installscript/$orig$scr_ext",
                "$installscript/$alias$scr_ext")
    else
        link("$installscript/$orig$scr_ext",
             "$installscript/$alias$scr_ext")

# Install scripts.
mkpath($installscript, $verbose, 0777)
if ($versiononly)
    for (@scripts)
        (my $base = $_) =~ s#.*/##
        $base .= $ver
        copy($_,    "$installscript/$base")
        chmod(0755, "$installscript/$base")

    for my $fromto (@tolink)
        my @: $from, $to = map { "$_$ver" }, $fromto->@
        (my $frbase = $from) =~ s#.*/##
        (my $tobase = $to) =~ s#.*/##
        script_alias($installscript, $frbase, $tobase, $scr_ext)

else
    for (@scripts)
        (my $base = $_) =~ s#.*/##
        copy($_, "$installscript/$base")
        chmod(0755, "$installscript/$base")

    for (@tolink)
        my @: $from, $to = $_->@
        (my $frbase = $from) =~ s#.*/##
        (my $tobase = $to) =~ s#.*/##
        script_alias($installscript, $frbase, $tobase, $scr_ext)

# Install pod pages.  Where? I guess in $installprivlib/pod
# ($installprivlib/pods for cygwin).

my $pod = ($Is_Cygwin || $Is_Darwin || $Is_VMS || $Is_W32) ?? 'pods' !! 'pod';
if ( !$versiononly || ($installprivlib =~ m/\Q$vershort/)) {
    mkpath("$($installprivlib)/$pod", $verbose, 0777);

    # If Perl 5.003's perldiag.pod is there, rename it.
    if (open my $podfh, "<", "$($installprivlib)/$pod/perldiag.pod") {
        read $podfh, $_, 4000;
        close $podfh;
        # Some of Perl 5.003's diagnostic messages ended with periods.
        if (m/^=.*\.$/m)
            my @: $from, $to = @: "$($installprivlib)/$pod/perldiag.pod"
                                  "$($installprivlib)/$pod/perldiag-5.003.pod"
            print $^STDOUT, "  rename $from $to"
            rename($from, $to)
                or warn "Couldn't rename $from to $to: $^OS_ERROR\n"
                unless $nonono
    }

    for (@pods)
        # $_ is a name like  pod/perl.pod
        (my $base = $_) =~ s#.*/##
        copy_if_diff($_, "$($installprivlib)/$pod/$($base)")

}

# Check to make sure there aren't other perls around in installer's
# path.  This is probably UNIX-specific.  Check all absolute directories
# in the path except for where public executables are supposed to live.
# Also skip $mainperl if the user opted to have it be a link to the
# installed perl.

if (!$versiononly && $otherperls)
    my ($path, @path)
    my $dirsep = ($Is_OS2 || $Is_W32 || $Is_NetWare) ?? ';' !! ':' 
    ($path = env::var("PATH")) =~ s:\\:/:g 
    @path = @: split(m/$dirsep/, $path)
    if ($Is_VMS) {
        my $i = 0;
        while (defined env::var('DCL$PATH' . $i)) {
            my $dir = unixpath(env::var('DCL$PATH' . $i));  $dir =~ s-/$--;
            push(@path,$dir);
        }
    }
    my @otherperls;
    my %otherperls;
    for (@path) {
        next unless m,^/,;
        # Use &samepath here because some systems have other dirs linked
        # to $mainperldir (like SunOS)
        next if samepath($_, $binexp);
        next if samepath($_, cwd());
        next if ($mainperl_is_instperl && samepath($_, $mainperldir));
        my $otherperl = "$_/$perl$exe_ext";
        next if %otherperls{$otherperl}++;
        push(@otherperls, $otherperl)
            if (-x $otherperl && ! -d $otherperl);
    }
    if (@otherperls) {
        warn "\nWarning: $perl appears in your path in the following " .
            "locations beyond where\nwe just installed it:\n";
        for (@otherperls) {
            warn "    $_\n";
        }
        warn "\n";
    }

$packlist->write() unless $nonono;
print $^STDOUT, "  Installation complete\n" if $verbose;

exit 0;

###############################################################################

sub yn {
    my($prompt) = <@_;
    my($answer);
    my($default) = $prompt =~ m/\[([yn])\]\s*$/i;
    print $^STDERR, $prompt;
    chop($answer = ~< $^STDIN);
    $answer = $default if $answer =~ m/^\s*$/;
    ($answer =~ m/^[yY]/);
}

sub unlink {
    my @names = @_;
    my($cnt) = 0;

    return nelems(@names) if $Is_VMS;

    foreach my $name (@names) {
        next unless -e $name;
        chmod 0777, $name if ($Is_OS2 || $Is_W32 || $Is_Cygwin || $Is_NetWare);
        print $^STDOUT, "  unlink $name\n" if $verbose;
        ( CORE::unlink($name) and ++$cnt
          or warn "Couldn't unlink $name: $^OS_ERROR\n" ) unless $nonono;
    }
    return $cnt;
}

sub safe_unlink {
    return if $nonono or $Is_VMS;
    my @names = @_;
    foreach my $name (@names) {
        next unless -e $name;
        chmod 0777, $name if ($Is_OS2 || $Is_W32 || $Is_NetWare);
        print $^STDOUT, "  unlink $name\n" if $verbose;
        next if CORE::unlink($name);
        warn "Couldn't unlink $name: $^OS_ERROR\n";
        if ($^OS_ERROR =~ m/busy/i) {
            print $^STDOUT, "  mv $name $name.old\n" if $verbose;
            safe_rename($name, "$name.old")
                or warn "Couldn't rename $name: $^OS_ERROR\n";
        }
    }
}

sub safe_rename($from,$to)
    if (-f $to and not unlink($to)) {
        my $i = 1;
        while ($i +< 50) {
            last if rename($to, "$to.$i");
            $i++;
        }
        warn("Cannot rename to `$to.$i': $^OS_ERROR"), return 0
           if $i +>= 50;        # Give up!
    }
    link($from,$to) || return 0;
    unlink($from);

sub link($from,$to)
    my($success) = 0;

    my $xfrom = $from;
    $xfrom =~ s/^\Q$destdir\E// if $destdir;
    my $xto = $to;
    $xto =~ s/^\Q$destdir\E// if $destdir;
    print $^STDOUT, $verbose ?? "  ln $xfrom $xto\n" !! "  $xto\n" unless $silent;
    try
        CORE::link($from, $to)
            ?? $success++
            !! ($from =~ m#^/afs/# || $to =~ m#^/afs/#)
              ?? die "AFS"  # okay inside try {}
              !! die "Couldn't link $from to $to: $^OS_ERROR\n"
          unless $nonono;
        $packlist->{data}{+$xto} = \%: from => $xfrom, type => 'link'

    if ($^EVAL_ERROR)
        warn "Replacing link() with File::Copy::copy(): $($^EVAL_ERROR->message)"
        print $^STDOUT, $verbose ?? "  cp $from $xto\n" !! "  $xto\n" unless $silent
        print $^STDOUT, "  creating new version of $xto\n"
                 if $Is_VMS and -e $to and !$silent
        unless ($nonono or File::Copy::copy($from, $to) and ++$success) {
            # Might have been that F::C::c can't overwrite the target
            warn "Couldn't copy $from to $to: $^OS_ERROR\n"
                unless -f $to and (do { chmod(0666, $to); unlink $to })
                        and File::Copy::copy($from, $to) and ++$success;
        }
        $packlist->{data}{+$xto} = \%: type => 'file'
    $success

sub chmod($mode,$name)
    return if ($^OS_ERROR eq 'dos');
    printf $^STDOUT, '  chmod %o %s'."\n", $mode, $name if $verbose;
    CORE::chmod($mode,$name)
        || warn sprintf("Couldn't chmod \%o \%s: $^OS_ERROR", $mode, $name)
      unless $nonono;

sub copy($from,$to)
    my $xto = $to;
    $xto =~ s/^\Q$destdir\E// if $destdir;
    print $^STDOUT, $verbose ?? "  cp $from $xto\n" !! "  $xto\n" unless $silent;
    print $^STDOUT, "  creating new version of $xto\n" if $Is_VMS and -e $to and !$silent;
    unless ($nonono or File::Copy::copy($from, $to)) {
        # Might have been that F::C::c can't overwrite the target
        warn "Couldn't copy $from to $to: $^OS_ERROR\n"
            unless -f $to and (do { chmod(0666, $to); unlink $to })
                   and File::Copy::copy($from, $to);
    }
    $packlist->{data}{+$xto} = \%: type => 'file'

sub samepath($p1, $p2)

    return (lc($p1) eq lc($p2)) if ($Is_W32 || $Is_NetWare)

    if ($p1 ne $p2)
        my($dev1, $ino1, $dev2, $ino2)
        @: $dev1, $ino1, ... = @: stat($p1)
        @: $dev2, $ino2, ... = @: stat($p2)
        ($dev1 == $dev2 && $ino1 == $ino2)
    else
        1

sub installlib {
    my $dir = $File::Find::dir;
    $dir =~ s#^\.(?![^/])/?##;
    local($depth) = $dir ?? "lib/$dir" !! "lib";

    my $name = $_;

    # Ignore version control directories.
    if ($name =~ m/^(?:CVS|RCS|SCCS|\.svn)\z/ and -d $name) {
        $File::Find::prune = 1;
        return;
    }

    # ignore patch backups, RCS files, emacs backup & temp files and the
    # .exists files, .PL files, and test files.
    return if $name =~ m{\.orig$|\.rej$|~$|^#.+#$|,v$|^\.exists|\.PL$|\.plc$|\.t$|^test\.pl$|^dbm_filter_util.pl$} ||
              $dir  =~ m{/t(?:/|$)};
    # ignore the instmodsh script in lib/ExtUtils
    # (they're installed later with other utils)
    return if $name =~ m/^(?:instmodsh)\z/;
    # ignore the Makefiles
    return if $name =~ m/^makefile$/i;
    # ignore the test extensions
    return if $dir =~ m{\bXS/(?:APItest|Typemap)\b};
    return if $name =~ m{\b(?:APItest|Typemap)\.pm$};
    # ignore the demo files
    return if $dir =~ m/\b(?:demos?|eg)\b/;

    # ignore READMEs, MANIFESTs, INSTALL docs, META.ymls and change logs.
    # Changes.e2x and README.e2x are needed by enc2xs.
    return if $name =~ m{^(?:README(?:\.\w+)?)$} && $name ne 'README.e2x';
    return if $name =~ m{^(?:MANIFEST|META\.yml)$};
    return if $name =~ m{^(?:INSTALL|TODO|BUGS|CREDITS)$}i;
    return if $name =~ m{^change(?:s|log)(?:\.libnet)?$}i;
    return if $name =~ m{^(?:SIGNATURE|PAUSE200\d\.pub)$}; # CPAN files
    return if $name =~ m{^(?:NOTES|PATCHING)$}; # ExtUtils files

    # if using a shared perl library then ignore:
    # - static library files [of statically linked extensions];
    # - import library files and export library files (only present on Win32
    #   anyway?) and empty bootstrap files [of dynamically linked extensions].
    return if config_value('useshrplib') eq 'true' and
             ($name =~ m/$(config_value('_a'))$/
                or $name =~ m/\.exp$/ or ($name =~ m/\.bs$/ and -z $name));

    $name = "$dir/$name" if $dir ne '';

    my $installlib = $installprivlib;
    if ($dir =~ m/^auto/ ||
          ($name =~ m/^(.*)\.(?:pm|pod)$/ && %archpms{?$1}) ||
          ($name =~ m/^(.*)\.(?:h|lib)$/i && ($Is_W32 || $Is_NetWare)) ||
          $name eq 'Config_heavy.pl'
       ) {
        $installlib = $installarchlib;
        return unless $do_installarchlib;
    } else {
        return unless $do_installprivlib;
    }

    if (-f $_)
        if (m/\.(?:al|ix)$/ && !($dir =~ m[^auto/(.*)$])) {
            $installlib = $installprivlib;
            #We're installing *.al and *.ix files into $installprivlib,
            #but we have to delete old *.al and *.ix files from the 5.000
            #distribution:
            #This might not work because $archname might have changed.
            unlink("$installarchlib/$name");
        }
        my $xname = "$installlib/$name";
        $xname =~ s/^\Q$destdir\E// if $destdir;
        $packlist->{data}{+$xname} = \%: type => 'file'
        if ($force || compare($_, "$installlib/$name") || $nonono) {
            unlink("$installlib/$name");
            mkpath("$installlib/$dir", $verbose, 0777);
            # HP-UX (at least) needs to maintain execute permissions
            # on dynamically-loaded libraries.
            if ($Is_NetWare && !$nwinstall) {
                # Don't copy .nlp,.nlm files, doesn't make sense on Windows and also
                # if copied will give problems when building new extensions.
                # Has to be copied if we are installing on a NetWare server and hence
                # the check !$nwinstall
                if (!(m/\.(?:nlp|nlm|bs)$/)) {
                    copy_if_diff($_, "$installlib/$name")
                        and chmod($name =~ m/\.(so|$dlext)$/o ?? 0555 !! 0444,
                                  "$installlib/$name");
                }
           } else {
                if (copy_if_diff($_, "$installlib/$name")) {
                    if ($name =~ m/\.(so|$dlext)$/o) {
                        strip("-S", "$installlib/$name") if $^OS_NAME =~ m/^(rhapsody|darwin)$/;
                        chmod(0555, "$installlib/$name");
                    } else {
                        strip("-S", "$installlib/$name")
                            if ($name =~ m/\.a$/o and $^OS_NAME =~ m/^(rhapsody|darwin)$/);
                        chmod(0444, "$installlib/$name");
                    }
                }
            } #if ($Is_NetWare)
        }
}

# Copy $from to $to, only if $from is different than $to.
# Also preserve modification times for .a libraries.
# On some systems, if you do
#   ranlib libperl.a
#   cp libperl.a /usr/local/lib/perl5/archlib/CORE/libperl.a
# and then try to link against the installed libperl.a, you might
# get an error message to the effect that the symbol table is older
# than the library.
# Return true if copying occurred.

sub copy_if_diff($from,$to)
    return 1 if (($^OS_NAME eq 'VMS') && (-d $from))
    my $xto = $to
    $xto =~ s/^\Q$destdir\E// if $destdir
    my $perlpodbadsymlink
    if ($from =~ m!^pod/perl[\w-]+\.pod$! &&
        -l $from &&
        ! -e $from)
        # Some Linux implementations have problems traversing over
        # multiple symlinks (when going over NFS?) and fail to read
        # the symlink target.  Combine this with the fact that some
        # of the pod files (the perl$OS.pod) are symlinks (to ../README.$OS),
        # and you end up with those pods not getting installed.
        $perlpodbadsymlink = 1

    -f $from || $perlpodbadsymlink || warn "$^PROGRAM_NAME: $from not found"
    $packlist->{data}{+$xto} = \%: type => 'file'
    if ($force || compare($from, $to) || $nonono)
        safe_unlink($to);   # In case we don't have write permissions.
        if ($nonono)
            $from = $depth . "/" . $from if $depth
        if ($perlpodbadsymlink && $from =~ m!^pod/perl(.+)\.pod$!)
            $from = "README.$1"
        copy($from, $to);
        # Restore timestamps if it's a .a library or for OS/2.
        if (!$nonono && ($Is_OS2 || $to =~ m/\.a$/))
            my @: $atime, $mtime = (@: stat $from)[[8..9]]
            utime $atime, $mtime, $to
        1

sub strip(@< @args)

    return unless $dostrip

    my @opts
    while (@args && @args[0] =~ m/^(-\w+)$/)
        push @opts, shift @args

    foreach my $file (@args)
        if (-f $file)
            if ($verbose)
                print $^STDOUT, "  strip " . join(' ', <@opts)
                print $^STDOUT, " " if (@opts)
                print $^STDOUT, "$file\n"
            system("strip", <@opts, $file)
        else
            print $^STDOUT, "# file '$file' skipped\n" if $verbose
