#!./perl -w
BEGIN { @INC = qw(lib) }
use strict;
use Config;
use Getopt::Long;
use File::Find;
use File::Copy;
use File::Path qw(mkpath);
use ExtUtils::Packlist;
use Pod::Man;
use subs qw(unlink chmod rename link);
use vars qw($packlist @modpods);
require Cwd;

if ($Config{d_umask}) {
    umask(022); # umasks like 077 aren't that useful for installations
}

$ENV{SHELL} = 'sh' if $^O eq 'os2';

my $ver = $Config{version};     # Not used presently.
my $release = substr($],0,3);   # Not used presently.
my $patchlevel = substr($],3,2);
die "Patchlevel of perl ($patchlevel)",
    "and patchlevel of config.sh ($Config{'PERL_VERSION'}) don't match\n"
	if $patchlevel != $Config{'PERL_VERSION'};

my $usage =
"Usage:  installman --man1dir=/usr/wherever --man1ext=1
                   --man3dir=/usr/wherever --man3ext=3
		   --batchlimit=40
	           --notify --verbose --silent --help
	Defaults are:
	man1dir = $Config{'installman1dir'};
	man1ext = $Config{'man1ext'};
	man3dir = $Config{'installman3dir'};
	man3ext = $Config{'man3ext'};
	--notify  (or -n) just lists commands that would be executed.
        --verbose (or -V) report all progress.
        --silent  (or -S) be silent. Only report errors.\n";

my %opts;
GetOptions( \%opts,
            qw( man1dir=s man1ext=s man3dir=s man3ext=s batchlimit=i
                notify n help silent S verbose V)) 
	|| die $usage;
die $usage if $opts{help};

$opts{man1dir} = $Config{'installman1dir'}
    unless defined($opts{man1dir}); 
$opts{man1ext} = $Config{'man1ext'}
    unless defined($opts{man1ext}); 
$opts{man3dir} = $Config{'installman3dir'}
    unless defined($opts{man3dir}); 
$opts{man3ext} = $Config{'man3ext'}
    unless defined($opts{man3ext}); 
$opts{silent} ||= $opts{S};
$opts{notify} ||= $opts{n};
$opts{verbose} ||= $opts{V} || $opts{notify};

#Sanity checks

-x  "./perl$Config{exe_ext}" 
  or warn "./perl$Config{exe_ext} not found!  Have you run make?\n";
-d  $Config{'installprivlib'}
	|| warn "Perl library directory $Config{'installprivlib'} not found.
		Have you run make install?.  (Installing anyway.)\n";
-x "t/perl$Config{exe_ext}"		|| warn "WARNING: You've never run 'make test'!!!",
	"  (Installing anyway.)\n";

$packlist = ExtUtils::Packlist->new("$Config{installarchlib}/.packlist");


# Install the main pod pages.
pod2man('pod', $opts{man1dir}, $opts{man1ext});

# Install the pods for library modules.
pod2man('lib', $opts{man3dir}, $opts{man3ext});

# Install the pods embedded in the installed scripts
open UTILS, "utils.lst" or die "Can't open 'utils.lst': $!";
while (<UTILS>) {
    next if /^#/;
    chomp;
    $_ = $1 if /#.*pod\s*=\s*(\S+)/;
    my ($where, $what) = m|^(.*?)/(\S+)|;
    pod2man($where, $opts{man1dir}, $opts{man1ext}, $what);
    if (my ($where2, $what2) = m|#.*link\s*=\s*(\S+)/(\S+)|) {
	my $old = "$opts{man1dir}/$what.$opts{man1ext}";
	my $new = "$opts{man1dir}/$what2.$opts{man1ext}";
	unlink($new);
        link($old, $new);
    }
}

sub pod2man {
    # @script is scripts names if we are installing manpages embedded 
    # in scripts, () otherwise
    my($poddir, $mandir, $manext, @script) = @_;

    my($downdir); # can't just use .. when installing xsubpp manpage

    $downdir = $poddir;
    $downdir =~ s:[^/]+:..:g;
    my($builddir) = Cwd::getcwd();

    if ($mandir eq ' ' or $mandir eq '') {
	if (@script) {
	    warn "Skipping installation of $poddir/$_ man page.\n"
		foreach @script;
	} else {
	    warn "Skipping installation of $poddir man pages.\n";
	}
	return;
    }

    print "chdir $poddir\n" if $opts{verbose};
    chdir $poddir || die "Unable to cd to $poddir directory!\n$!\n";

    mkpath($mandir, $opts{verbose}, 0777) unless $opts{notify};  # In File::Path
    # Make a list of all the .pm and .pod files in the directory.  We will
    # always run from the lib directory and use the full pathname
    # of the pod.
    if (@script) {
	@modpods = @script;
    }
    else {
	@modpods = ();
	File::Find::find(\&lsmodpods, '.');
    }
    my @to_process;
    foreach my $mod (@modpods) {
	my $manpage = $mod;
	my $tmp;
	# Skip .pm files that have corresponding .pod files, and Functions.pm.
	next if (($tmp = $mod) =~ s/\.pm$/.pod/ && -f $tmp);
	next if ($mod eq 'Pod/Functions.pm');	#### Used only by pod itself

	# Convert name from  File/Basename.pm to File::Basename.3 format,
	# if necessary.
	$manpage =~ s#\.p(m|od)$##;
	if ($^O eq 'os2' || $^O eq 'amigaos' || $^O eq 'uwin' || $^O eq 'cygwin') {
	  $manpage =~ s#/#.#g;
	}
	else {
	  $manpage =~ s#/#::#g;
	}
	$tmp = "${mandir}/${manpage}.tmp";
	$manpage = "${mandir}/${manpage}.${manext}";
	push @to_process, [$mod, $tmp, $manpage];
    }

    my $parser = Pod::Man->new( section => $manext,
                                official=> 1,
                                center  => 'Perl Programmers Reference Guide'
                              );
    foreach my $page (@to_process) {
	my($pod, $tmp, $manpage) = @$page;

        print "  $manpage\n";
	if (!$opts{notify} && $parser->parse_from_file($pod, $tmp)) {
            if (-s $tmp) {
                if (rename($tmp, $manpage)) {
                    $packlist->{$manpage} = { type => 'file' };
                    next;
                }
            }
            unlink($tmp);
	}
    }
    chdir "$builddir" || die "Unable to cd back to $builddir directory!\n$!\n";
    print "  chdir $builddir\n" if $opts{verbose};
}

sub lsmodpods {
    my $dir  = $File::Find::dir;
    my $name = $File::Find::name;
    if (-f $_) {
        $name =~ s#^\./##;
	push(@modpods, $name) if ($name =~ /\.p(m|od)$/);
    }
}

$packlist->write() unless $opts{notify};
print "  Installation complete\n" if $opts{verbose};

exit 0;
    

###############################################################################
# Utility subroutines from installperl

sub unlink {
    my(@names) = @_;
    my $cnt = 0;

    foreach my $name (@names) {
	next unless -e $name;
	chmod 0777, $name if $^O eq 'os2';
	print "  unlink $name\n" if $opts{verbose};
	( CORE::unlink($name) and ++$cnt 
	    or warn "Couldn't unlink $name: $!\n" ) unless $opts{notify};
    }
    return $cnt;
}

sub link {
    my($from,$to) = @_;
    my($success) = 0;

    print "  ln $from $to\n" if $opts{verbose};
    eval {
        CORE::link($from, $to)
            ? $success++
            : ($from =~ m#^/afs/# || $to =~ m#^/afs/#)
              ? die "AFS"  # okay inside eval {}
              : warn "Couldn't link $from to $to: $!\n"
          unless $opts{notify};
    };
    if ($@) {
        File::Copy::copy($from, $to)
            ? $success++
            : warn "Couldn't copy $from to $to: $!\n"
          unless $opts{notify};
    }
    $success;
}

sub rename {
    my($from,$to) = @_;
    if (-f $to and not unlink($to)) {
	my($i);
	for ($i = 1; $i < 50; $i++) {
	    last if CORE::rename($to, "$to.$i");
	}
	warn("Cannot rename to `$to.$i': $!"), return 0 
	    if $i >= 50;	# Give up!
    }
    link($from,$to) || return 0;
    unlink($from);
}

sub chmod {
    my($mode,$name) = @_;

    printf "  chmod %o %s\n", $mode, $name if $opts{verbose};
    CORE::chmod($mode,$name) || warn sprintf("Couldn't chmod %o %s: $!\n",$mode,$name)
	unless $opts{notify};
}

sub samepath {
    my($p1, $p2) = @_;
    my($dev1, $ino1, $dev2, $ino2);

    if ($p1 ne $p2) {
	($dev1, $ino1) = stat($p1);
	($dev2, $ino2) = stat($p2);
	($dev1 == $dev2 && $ino1 == $ino2);
    }
    else {
	1;
    }
}
