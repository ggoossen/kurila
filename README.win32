If you read this file _as_is_, just ignore the funny characters you
see. It is written in the POD format (see pod/perlpod.pod) which is
specially designed to be readable as is.

=head1 NAME

perlwin32 - Perl under Win32

=head1 SYNOPSIS

These are instructions for building Perl under Windows NT (versions
3.51 or 4.0), using Visual C++ (versions 2.0 through 5.0).  Currently,
this port may also build under Windows95, but you can expect problems
stemming from the unmentionable command shell that infests that
platform.  Note this caveat is only about B<building> perl.  Once
built, you should be able to B<use> it on either Win32 platform (modulo
the problems arising from the inferior command shell).

=head1 DESCRIPTION

Before you start, you should glance through the README file
found in the top-level directory where the Perl distribution
was extracted.  Make sure you read and understand the terms under
which this software is being distributed.

Also make sure you read the L<BUGS AND CAVEATS> section below for the
known limitations of this port.

The INSTALL file in the perl top-level has much information that is
only relevant to people building Perl on Unix-like systems.  In
particular, you can safely ignore any information that talks about
"Configure".

You may also want to look at two other options for building
a perl that will work on Windows NT:  the README.cygwin32 and
README.os2 files, which give a different set of rules to build a
Perl that will work on Win32 platforms.  Those two methods will
probably enable you to build a more Unix-compatible perl, but you
will also need to download and use various other build-time and
run-time support software described in those files.

This set of instructions is meant to describe a so-called "native"
port of Perl to Win32 platforms.  The resulting Perl requires no
additional software to run (other than what came with your operating
system).  Currently, this port is only capable of using Microsoft's
Visual C++ compiler.  The ultimate goal is to support the other major
compilers that can generally be used to build Win32 applications.

This port currently supports MakeMaker (the set of modules that
is used to build extensions to perl).  Therefore, you should be
able to build and install most extensions found in the CPAN sites.
See L<Usage Hints> below for general hints about this.

=head2 Setting Up

=over 4

=item *

Use the default "cmd" shell that comes with NT.  In particular, do
*not* use the 4DOS/NT shell.  The Makefile has commands that are not
compatible with that shell.  The Makefile also has known
incompatibilites with the default shell that comes with Windows95,
so building under Windows95 should be considered "unsupported".

=item *

If you did not choose to always initialize the Visual C++ compilation
environment variables when you installed Visual C++ on your system, you
will need to run the VCVARS32.BAT file usually found somewhere like
C:\MSDEV4.2\BIN.  This will set your build environment.

=item *

Depending on how you extracted the distribution, you have to make sure
some of the files are writable by you.  The easiest way to make sure of
this is to execute:

	attrib -R *.* /S

from the perl toplevel directory.  You don't I<have> to do this if you
used the right tools to extract the files in the standard distribution,
but it doesn't hurt to do so.

=back

=head2 Building

=over 4

=item *

Make sure you are in the "win32" subdirectory under the perl toplevel.
This directory contains a "Makefile" that will work with
versions of NMAKE that come with Visual C++ ver. 2.0 and above.

=item *

Edit the Makefile and change the values of INST_DRV and INST_TOP
if you want perl to be installed in a location other than "C:\PERL".

If you want to build a perl capable of running on the Windows95
platform, you will have to uncomment the line that sets "RUNTIME=-MT".
(The default settings use the Microsoft-recommended -MD option for
compiling, which uses the DLL version of the C RunTime Library.  There
currently exists a bug in the Microsoft CRTL that causes failure of
the socket calls only on the Windows95 platform.  This bug cannot be
worked around if the DLL version of the CRTL is used, which is why you
need to enable the -MT flag.)  Perl compiled with -MT can be used on
both Windows NT and Windows95.

If you are using Visual C++ ver. 2.0, uncomment the line that
sets "CCTYPE=MSVC20".

=item *

Type "nmake".

This should build everything.  Specifically, it will create perl.exe,
perl.dll, and perlglob.exe at the perl toplevel, and various other
extension dll's under the lib\auto directory.  If the build fails for
any reason, make sure you have done the previous steps correctly.

=back

=head2 Testing

Type "nmake test".  This will run most of the tests from the
testsuite (many tests will be skipped, and but no test should fail).

If some tests do fail, it may be because you are using a different command
shell than the native "cmd.exe".

Please report any failures as described under L<BUGS AND CAVEATS>.

=head2 Installation

Type "nmake install".  This will put the newly built perl and the
libraries under "C:\perl" (actually whatever you set C<INST_TOP> to
in the Makefile).  It will also install the pod documentation under
C<$INST_TOP\lib\pod> and HTML versions of the same under
C<$INST_TOP\lib\pod\html>.  To use the Perl you just installed, set your
PATH environment variable to "C:\perl\bin" (or C<$INST_TOP\bin>, if you
changed the default as above).

=head2 Usage Hints

=over 4

=item Environment Variables

The installation paths that you set during the build get compiled
into perl, so you don't have to do anything additional to start
using that perl (except add its location to your PATH variable).

If you put extensions in unusual places, you can set PERL5LIB
to a list of paths separated by semicolons where you want perl
to look for libraries.  Look for descriptions of other environment
variables you can set in the perlrun podpage.

Sometime in the future, some of the configuration information
for perl will be moved into the Windows registry.

=item Using perl from the command line

If you are accustomed to using perl from various command-line
shells found in UNIX environments, you will be less than pleased
with what Windows NT offers by way of a command shell.

The crucial thing to understand about the "cmd" shell (which is
the default on Windows NT) is that it does not do any wildcard
expansions of command-line arguments (so wildcards need not be
quoted).  It also provides only rudimentary quoting.  The only
(useful) quote character is the double quote (").  It can be used to
protect spaces in arguments and other special characters.  The
Windows NT documentation has almost no description of how the
quoting rules are implemented, but here are some general observations
based on experiments:  The shell breaks arguments at spaces and
passes them to programs in argc/argv.  Doublequotes can be used
to prevent arguments with spaces in them from being split up.
You can put a double quote in an argument by escaping it with
a backslash and enclosing the whole argument within double quotes.
The backslash and the pair of double quotes surrounding the
argument will be stripped by the shell.

The file redirection characters "<", ">", and "|" cannot be quoted
by double quotes (there are probably more such).  Single quotes
will protect those three file redirection characters, but the
single quotes don't get stripped by the shell (just to make this
type of quoting completely useless).  The caret "^" has also
been observed to behave as a quoting character (and doesn't get
stripped by the shell also).

Here are some examples of usage of the "cmd" shell:

This prints two doublequotes:

    perl -e "print '\"\"' "

This does the same:

    perl -e "print \"\\\"\\\"\" "

This prints "bar" and writes "foo" to the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" > blurch

This prints "foo" ("bar" disappears into nowhereland):

    perl -e "print 'foo'; print STDERR 'bar'" 2> nul

This prints "bar" and writes "foo" into the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" 1> blurch

This prints "foo" and writes "bar" to the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" 2> blurch

This pipes "foo" to the "less" pager and prints "bar" on the console:

    perl -e "print 'foo'; print STDERR 'bar'" | less

This pipes "foo\nbar\n" to the less pager:

    perl -le "print 'foo'; print STDERR 'bar'" |& less

This does the same thing as the above:

    perl -le "print 'foo'; print STDERR 'bar'" 2>&1 | less

This pipes "foo" to the pager and writes "bar" in the file "blurch":

    perl -e "print 'foo'; print STDERR 'bar'" 2> blurch | less


Discovering the usage of the "command.com" shell on Windows95
is left as an exercise to the reader :)

=item Building Extensions

The Comprehensive Perl Archive Network (CPAN) offers a wealth
of extensions, some of which require a C compiler to build.
Look in http://www.perl.com/ for more information on CPAN.

Most extensions (whether they require a C compiler or not) can
be built, tested and installed with the standard mantra:

    perl Makefile.PL
    nmake
    nmake test
    nmake install

Note the NMAKE that comes with Visual C++ is required.  Some
extensions may not provide a testsuite (so "nmake test"
may not do anything, or fail), but most serious ones do.

If a module implements XSUBs, you will need a C compiler (Visual C++
versions 2.0 and above are currently supported).  You must make sure
you have set up the environment for the compiler for command-line
compilation.

If a module does not build for some reason, carefully look at
why it failed, and report problems to the module author.  If
it looks like the extension building support is at fault, report
that with full details of how the build failed using the perlbug
utility.

=item Win32 Specific Extensions

A number of extensions specific to the Win32 platform are available
from CPAN.  You may find that many of these extensions are meant to
be used under the Activeware port of Perl, which used to be the only
native port for the Win32 platform.  Since the Activeware port does not
have adequate support for Perl's extension building tools, these
extensions typically do not support those tools either, and therefore
cannot be built using the generic steps shown in the previous section.

To ensure smooth transitioning of existing code that uses the
Activeware port, there is a bundle of Win32 extensions that contains
all of the Activeware extensions and most other Win32 extensions from
CPAN in source form, along with many added bugfixes, and with MakeMaker
support.  This bundle is available at:

   http://www.perl.com/CPAN/authors/id/GSAR/libwin32-0.06.tar.gz

See the README in that distribution for building and installation
instructions.  Look for later versions that may be available at the
same location.

It is expected that authors of Win32 specific extensions will begin
distributing their work in MakeMaker compatible form subsequent to
the 5.004 release of perl, at which point the need for a dedicated
bundle such as the above should diminish.

=item Miscellaneous Things

A full set of HTML documentation is installed, so you should be
able to use it if you have a web browser installed on your
system.

C<perldoc> is also a useful tool for browsing information contained
in the documentation, especially in conjunction with a pager
like C<less> (recent versions of which have Win32 support).  You may
have to set the PAGER environment variable to use a specific pager.
"perldoc -f foo" will print information about the perl operator
"foo".

If you find bugs in perl, you can run C<perlbug> to create a
bug report (you may have to send it manually if C<perlbug> cannot
find a mailer on your system).

=back

=head1 BUGS AND CAVEATS

This port has not been tested as extensively as we'd like, and
therefore should be considered beta quality software.  You should
expect changes in virtually all of these areas: build process,
installation structure, supported utilities/modules, and supported
perl functionality.  In particular, functionality specific to the
Win32 environment may ultimately be supported as either core modules
or extensions.  This means that you should be prepared to recompile
extensions when binary incompatibilites arise due to changes in the
internal structure of the code.

If you have had prior exposure to Perl on Unix platforms, you will notice
this port exhibits behavior different from what is documented.  Most of the
differences fall under one of these categories.  We do not consider
any of them to be serious limitations (especially when compared to the
limited nature of some of the Win32 OSes themselves :)

=over 8

=item *

C<stat()> and C<lstat()> functions may not behave as documented.  They
may return values that bear no resemblance to those reported on Unix
platforms, and some fields (like the the one for inode) may be completely
bogus.

=item *

The following functions are currently unavailable: C<fork()>, C<exec()>,
C<dump()>, C<chown()>, C<link()>, C<symlink()>, C<chroot()>,
C<setpgrp()>, C<getpgrp()>, C<setpriority()>, C<getpriority()>,
C<syscall()>, C<fcntl()>, C<flock()>.  This list is possibly very
incomplete.

=item *

Various C<socket()> related calls are supported, but they may not
behave as on Unix platforms.

=item *

The four-argument C<select()> call is only supported on sockets.

=item *

C<$?> ends up with the exitstatus of the subprocess (this is different
from Unix, where the exitstatus is actually given by "$? >> 8").
Failure to spawn() the subprocess is indicated by setting $? to 
"255<<8".  This is subject to change.

=item *

Building modules available on CPAN is mostly supported, but this
hasn't been tested much yet.  Expect strange problems, and be
prepared to deal with the consequences.

=item *

C<utime()>, C<times()> and process-related functions may not
behave as described in the documentation, and some of the
returned values or effects may be bogus.

=item *

Signal handling may not behave as on Unix platforms.

=item *

File globbing may not behave as on Unix platforms.  In particular,
globbing does not understand wildcards in the pathname component,
but only in the filename component.  In other words, something like
"print <*/*.pl>" will not print all the perl scripts in all the
subdirectories one level under the current one (like it does on
UNIX platforms).

=back

Please send detailed descriptions of any problems and solutions that 
you may find to <F<perlbug@perl.com>>, along with the output produced
by C<perl -V>.

=head1 AUTHORS

=over 4

=item Gary Ng <F<71564.1743@CompuServe.COM>>

=item Gurusamy Sarathy <F<gsar@umich.edu>>

=item Nick Ing-Simmons <F<nick@ni-s.u-net.com>>

=back

=head1 SEE ALSO

L<perl>

=head1 HISTORY

This port was originally contributed by Gary Ng around 5.003_24,
and borrowed from the Hip Communications port that was available
at the time.

Nick Ing-Simmons and Gurusamy Sarathy have made numerous and
sundry hacks since then.

Last updated: 15 May 1997

=cut
