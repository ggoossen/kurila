#!/usr/bin/perl -w
# $Id: basic.t,v 1.11 2006-09-16 20:25:25 eagle Exp $
#
# basic.t -- Basic tests for podlators.
#
# Copyright 2001, 2002, 2004, 2006 by Russ Allbery <rra@stanford.edu>
#
# This program is free software; you may redistribute it and/or modify it
# under the same terms as Perl itself.

use TestInit;

BEGIN {
    $| = 1;
    print "1..11\n";
}

use bytes;

use Pod::Man;
use Pod::Text;
use Pod::Text::Overstrike;
use Pod::Text::Termcap;

# Find the path to the test source files.  This requires some fiddling when
# these tests are run as part of Perl core.
sub source_path {
    my $file = shift;
    if (env::var('PERL_CORE')) {
        require File::Spec;
        my $updir = File::Spec->updir;
        my $dir = File::Spec->catdir ($updir, 'lib', 'Pod', 't');
        return File::Spec->catfile ($dir, $file);
    } else {
        return $file;
    }
}

print "ok 1\n";

# Hard-code a few values to try to get reproducible results.
env::set_var('COLUMNS') = 80;
env::set_var('TERM') = 'xterm';
env::set_var('TERMCAP') = 'xterm:co=80:do=^J:md=\E[1m:us=\E[4m:me=\E[m';

# Map of translators to file extensions to find the formatted output to
# compare against.
my %translators = %('Pod::Man'              => 'man',
                   'Pod::Text'             => 'txt',
                   'Pod::Text::Color'      => 'clr',
                   'Pod::Text::Overstrike' => 'ovr',
                   'Pod::Text::Termcap'    => 'cap');

# Set default options to match those of pod2man and pod2text.
our %options = %(sentence => 0);

my $n = 2;
for my $translator (sort keys %translators) {
    if ($translator eq 'Pod::Text::Color') {
        try { require Term::ANSIColor };
        if ($@) {
            print "ok $n # skip\n";
            $n++;
            print "ok $n # skip\n";
            $n++;
            next;
        }
        require Pod::Text::Color;
    }
    my $parser = $translator->new (< %options);
    print (($parser && ref ($parser) eq $translator) ?? "ok $n\n" !! "not ok $n\n");
    $n++;

    # For Pod::Man, strip out the autogenerated header up to the .TH title
    # line.  That means that we don't check those things; oh well.  The header
    # changes with each version change or touch of the input file.
    open (OUT, ">", 'out.tmp') or die "Cannot create out.tmp: $!\n";
    $parser->parse_from_file ( source_path ('basic.pod'), \*OUT);
    close OUT;
    if ($translator eq 'Pod::Man') {
        open (TMP, "<", 'out.tmp') or die "Cannot open out.tmp: $!\n";
        open (OUTPUT, ">", "out.%translators{?$translator}")
            or die "Cannot create out.%translators{?$translator}: $!\n";
        local $_;
        while ( ~< *TMP) { last if m/^\.nh/ }
        print OUTPUT while ~< *TMP;
        close OUTPUT;
        close TMP;
        unlink 'out.tmp';
    } else {
        rename ('out.tmp', "out.%translators{?$translator}")
            or die "Cannot rename out.tmp: $!\n";
    }
    do {
        local $/;
        open (MASTER, "<", source_path ("basic.%translators{?$translator}"))
            or die "Cannot open basic.%translators{?$translator}: $!\n";
        open (OUTPUT, "<", "out.%translators{?$translator}")
            or die "Cannot open out.%translators{?$translator}: $!\n";
        my $master = ~< *MASTER;
        my $output = ~< *OUTPUT;
        close MASTER;
        close OUTPUT;

        # OS/390 is EBCDIC, which uses a different character for ESC
        # apparently.  Try to convert so that the test still works.
        if ($^O eq 'os390' && $_ eq 'Pod::Text::Termcap') {
            $output =~ s/\033/\047/g;
        }

        if ($master eq $output) {
            print "ok $n\n";
            unlink "out.%translators{?$translator}";
        } else {
            print "not ok $n\n";
            print "# Non-matching output left in out.%translators{?$translator}\n";
        }
    };
    $n++;
}
