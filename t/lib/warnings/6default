Check default warnings

__END__
# default warnings should be displayed if you don't add anything
# optional shouldn't
my $a = oct "7777777777777777777777777777777777779" ;
EXPECT
Integer overflow in octal number at - line 3 character 9.
########
# no warnings should be displayed 
no warnings ;
my $a = oct "7777777777777777777777777777777777778" ;
EXPECT

########
# all warnings should be displayed 
use warnings ;
my $a = oct "7777777777777777777777777777777777778" ;
EXPECT
Integer overflow in octal number at - line 3 character 9.
Illegal octal digit '8' ignored at - line 3 character 9.
Octal number > 037777777777 non-portable at - line 3 character 9.
########
# check scope
use warnings ;
my $a = oct "7777777777777777777777777777777777778" ;
do {
    no warnings ;
    my $a = oct "7777777777777777777777777777777777778" ;
};    
my $c = oct "7777777777777777777777777777777777778" ;
EXPECT
Integer overflow in octal number at - line 3 character 9.
Illegal octal digit '8' ignored at - line 3 character 9.
Octal number > 037777777777 non-portable at - line 3 character 9.
Integer overflow in octal number at - line 8 character 9.
Illegal octal digit '8' ignored at - line 8 character 9.
Octal number > 037777777777 non-portable at - line 8 character 9.
########
# all warnings should be displayed 
use warnings ;
my $a = oct "0xfffffffffffffffffg" ;
EXPECT
Integer overflow in hexadecimal number at - line 3 character 9.
Illegal hexadecimal digit 'g' ignored at - line 3 character 9.
Hexadecimal number > 0xffffffff non-portable at - line 3 character 9.
########
# all warnings should be displayed 
use warnings ;
my $a = oct "0b111111111111111111111111111111111111111111111111111111111111111112";
EXPECT
Integer overflow in binary number at - line 3 character 9.
Illegal binary digit '2' ignored at - line 3 character 9.
Binary number > 0b11111111111111111111111111111111 non-portable at - line 3 character 9.
########

# Check scope of pragma with eval
use warnings;
do {
    no warnings ;
    eval '
	my $a = oct "0xfffffffffffffffffg" ;
    '; print $^STDERR, $^EVAL_ERROR ;
    my $a = oct "0xfffffffffffffffffg" ;
};
EXPECT

########

# Check scope of pragma with eval
use warnings;
do {
    no warnings ;
    eval q[ 
        use warnings ;
	my $a = oct "0xfffffffffffffffffg" ;
    ]; print $^STDERR, $^EVAL_ERROR;
    my $a = oct "0xfffffffffffffffffg" ;
};
EXPECT
Integer overflow in hexadecimal number at (eval 1) line 3 character 35.
    (eval) called at - line 6 character 5.
Illegal hexadecimal digit 'g' ignored at (eval 1) line 3 character 35.
    (eval) called at - line 6 character 5.
Hexadecimal number > 0xffffffff non-portable at (eval 1) line 3 character 35.
    (eval) called at - line 6 character 5.
########

# Check scope of pragma with eval
no warnings;
do {
    use warnings ;
    eval '
	my $a = oct "0xfffffffffffffffffg" ;
    '; print $^STDERR, $^EVAL_ERROR ;
};
EXPECT
Integer overflow in hexadecimal number at (eval 1) line 2 character 11.
    (eval) called at - line 6 character 5.
Illegal hexadecimal digit 'g' ignored at (eval 1) line 2 character 11.
    (eval) called at - line 6 character 5.
Hexadecimal number > 0xffffffff non-portable at (eval 1) line 2 character 11.
    (eval) called at - line 6 character 5.
########

# Check scope of pragma with eval
no warnings;
do {
    use warnings;
    eval '
        no warnings ;
	my $a = oct "0xfffffffffffffffffg" ;
    '; print $^STDERR, $^EVAL_ERROR ;
};
EXPECT

########

# Check scope of pragma with eval
no warnings;
do {
    use warnings 'deprecated' ;
    eval '
	my $a = oct "0xfffffffffffffffffg" ;
    '; print $^STDERR, $^EVAL_ERROR;
};
EXPECT

########
