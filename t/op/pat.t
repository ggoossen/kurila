#!./perl
#
# This is a home for regular expression tests that don't fit into
# the format supported by op/regexp.t.  If you want to add a test
# that does fit that format, add it to op/re_tests, not here.

$| = 1;

# Test counter output is generated by a BEGIN block at bottom of file

our $Message = "Noname test";

BEGIN {
    require "utf8.pm";
    require "utf8_heavy.pl";
}

our %Config;
eval 'use Config';          #  Defaults assumed if this fails

run_tests() unless caller;

# use utf8;
# use charnames ':full';
#     my $SIGMA = "\N{GREEK CAPITAL LETTER SIGMA}";
#     my $char  = "\N{COMBINING GREEK PERISPOMENI}";
# use re Debug => 'ALL';

#     print "fran\N{LATIN SMALL LETTER C WITH CEDILLA}ais" =~
# 	  /fran(?:c\N{COMBINING CEDILLA}?|\N{LATIN SMALL LETTER C WITH CEDILLA})ais/ &&
# 	$& eq "fran\N{LATIN SMALL LETTER C WITH CEDILLA}ais" ? "ok\n" : "not XXX";
# # # "123" =~ m/^.*1/; # .*23\x{100}$/, 'uft8 + multiple floating substr');
# # # ok("123\x{100}" =~ m/^.*1/); # .*23\x{100}$/, 'uft8 + multiple floating substr');

# #     # Before #13843 this was failing by matching falsely.
# #     print "_:$char:_" =~ m/_:$SIGMA:_/i ? "not ok 786\n" : "ok 786\n";

# __END__

# my $a = "İ";
# #warn ":$a:" =~ m/:$a:/i ? "a" : "b";
# warn ((":İ:" =~ m/:$a:/i) ? "a" : "b");

require bytes;
use utf8;

our ($test, $x, %XXX, @XXX, $foo, @x, $null, @words);

# Force scalar context on the patern match
sub ok ($;$) {
    my($ok, $name) = @_;
    my $todo = $TODO ? " # TODO $TODO" : '';

    printf "\%sok \%d - \%s\n", ($ok ? "" : "not "), $test,
        ($name||$Message)."$todo\tLine ".((caller)[[2]]);

    printf "# Failed test at line \%d\n", (caller)[[2]] unless $ok;

    $test++;
    return $ok;
}

sub run_tests {

$x = "abc\ndef\n";

if ($x =~ m/^abc/) {print "ok 1\n";} else {print "not ok 1\n";}
if ($x !~ m/^def/) {print "ok 2\n";} else {print "not ok 2\n";}

# used to be a test for $*
if ($x =~ m/^def/m) {print "ok 3\n";} else {print "not ok 3\n";}

$_ = '123';
if (m/^([0-9][0-9]*)/) {print "ok 4\n";} else {print "not ok 4\n";}

if ($x =~ m/^xxx/) {print "not ok 5\n";} else {print "ok 5\n";}
if ($x !~ m/^abc/) {print "not ok 6\n";} else {print "ok 6\n";}

if ($x =~ m/def/) {print "ok 7\n";} else {print "not ok 7\n";}
if ($x !~ m/def/) {print "not ok 8\n";} else {print "ok 8\n";}

if ($x !~ m/.def/) {print "ok 9\n";} else {print "not ok 9\n";}
if ($x =~ m/.def/) {print "not ok 10\n";} else {print "ok 10\n";}

if ($x =~ m/\ndef/) {print "ok 11\n";} else {print "not ok 11\n";}
if ($x !~ m/\ndef/) {print "not ok 12\n";} else {print "ok 12\n";}

$_ = 'aaabbbccc';
if (m/(a*b*)(c*)/ && $1 eq 'aaabbb' && $2 eq 'ccc') {
	print "ok 13\n";
} else {
	print "not ok 13\n";
}
if (m/(a+b+c+)/ && $1 eq 'aaabbbccc') {
	print "ok 14\n";
} else {
	print "not ok 14\n";
}

if (m/a+b?c+/) {print "not ok 15\n";} else {print "ok 15\n";}

$_ = 'aaabccc';
if (m/a+b?c+/) {print "ok 16\n";} else {print "not ok 16\n";}
if (m/a*b+c*/) {print "ok 17\n";} else {print "not ok 17\n";}

$_ = 'aaaccc';
if (m/a*b?c*/) {print "ok 18\n";} else {print "not ok 18\n";}
if (m/a*b+c*/) {print "not ok 19\n";} else {print "ok 19\n";}

$_ = 'abcdef';
if (m/bcd|xyz/) {print "ok 20\n";} else {print "not ok 20\n";}
if (m/xyz|bcd/) {print "ok 21\n";} else {print "not ok 21\n";}

if (m|bc/*d|) {print "ok 22\n";} else {print "not ok 22\n";}

if (m/^$_$/) {print "ok 23\n";} else {print "not ok 23\n";}

# used to be a test for $*
if ("ab\ncd\n" =~ m/^cd/m) {print "ok 24\n";} else {print "not ok 24\n";}

# once pattern has been removed.
for (25..27) {
    print "ok $_\n";
}

'cde' =~ m/[^ab]*/;
'xyz' =~ m//;
if ($& eq 'xyz') {print "ok 28\n";} else {print "not ok 28\n";}

$foo = '[^ab]*';
'cde' =~ m/$foo/;
'xyz' =~ m//;
if ($& eq 'xyz') {print "ok 29\n";} else {print "not ok 29\n";}

$foo = '[^ab]*';
'cde' =~ m/$foo/;
'xyz' =~ m/$null/;
if ($& eq 'xyz') {print "ok 30\n";} else {print "not ok 30\n";}

$_ = 'abcdefghi';
m/def/;		# optimized up to cmd
if ("$`:$&:$'" eq 'abc:def:ghi') {print "ok 31\n";} else {print "not ok 31\n";}

m/cde/ + 0;	# optimized only to spat
if ("$`:$&:$'" eq 'ab:cde:fghi') {print "ok 32\n";} else {print "not ok 32\n";}

m/[d][e][f]/;	# not optimized
if ("$`:$&:$'" eq 'abc:def:ghi') {print "ok 33\n";} else {print "not ok 33\n";}

$_ = 'now is the {time for all} good men to come to.';
m/ {([^}]*)}/;
if ($1 eq 'time for all') {print "ok 34\n";} else {print "not ok 34 $1\n";}

$_ = 'xxx {3,4}  yyy   zzz';
print m/( {3,4})/ ? "ok 35\n" : "not ok 35\n";
print $1 eq '   ' ? "ok 36\n" : "not ok 36\n";
print m/( {4,})/ ? "not ok 37\n" : "ok 37\n";
print m/( {2,3}.)/ ? "ok 38\n" : "not ok 38\n";
print $1 eq '  y' ? "ok 39\n" : "not ok 39\n";
print m/(y{2,3}.)/ ? "ok 40\n" : "not ok 40\n";
print $1 eq 'yyy ' ? "ok 41\n" : "not ok 41\n";
print m/x {3,4}/ ? "not ok 42\n" : "ok 42\n";
print m/^xxx {3,4}/ ? "not ok 43\n" : "ok 43\n";

$_ = "now is the time for all good men to come to.";
@words = m/(\w+)/g;
print join(':',@words) eq "now:is:the:time:for:all:good:men:to:come:to"
    ? "ok 44\n"
    : "not ok 44\n";

@words = ();
while (m/\w+/g) {
    push(@words, $&);
}
print join(':',@words) eq "now:is:the:time:for:all:good:men:to:come:to"
    ? "ok 45\n"
    : "not ok 45\n";

@words = ();
pos = 0;
while (m/to/g) {
    push(@words, $&);
}
print join(':',@words) eq "to:to"
    ? "ok 46\n"
    : "not ok 46 `@words'\n";

pos $_ = 0;
@words = m/to/g;
print join(':',@words) eq "to:to"
    ? "ok 47\n"
    : "not ok 47 `@words'\n";

$_ = "abcdefghi";

my $pat1 = 'def';
my $pat2 = '^def';
my $pat3 = '.def.';
my $pat4 = 'abc';
my $pat5 = '^abc';
my $pat6 = 'abc$';
my $pat7 = 'ghi';
my $pat8 = '\w*ghi';
my $pat9 = 'ghi$';

my $t1=my $t2=my $t3=my $t4=my $t5=my $t6=my $t7=my $t8=my $t9=0;

for my $iter (1..5) {
    $t1++ if m/$pat1/o;
    $t2++ if m/$pat2/o;
    $t3++ if m/$pat3/o;
    $t4++ if m/$pat4/o;
    $t5++ if m/$pat5/o;
    $t6++ if m/$pat6/o;
    $t7++ if m/$pat7/o;
    $t8++ if m/$pat8/o;
    $t9++ if m/$pat9/o;
}

$x = "$t1$t2$t3$t4$t5$t6$t7$t8$t9";
print $x eq '505550555' ? "ok 48\n" : "not ok 48 $x\n";

my $xyz = 'xyz';
print "abc" =~ m/^abc$|$xyz/ ? "ok 49\n" : "not ok 49\n";

# perl 4.009 says "unmatched ()"
our $result;
eval '"abc" =~ m/a(bc$)|$xyz/; $result = "$&:$1"';
print $@ eq "" ? "ok 50\n" : "not ok 50\n";
print $result eq "abc:bc" ? "ok 51\n" : "not ok 51\n";


$_="abcfooabcbar";
$x=m/abc/g;
print $` eq "" ? "ok 52\n" : "not ok 52\n" if $x;
$x=m/abc/g;
print $` eq "abcfoo" ? "ok 53\n" : "not ok 53\n" if $x;
$x=m/abc/g;
print $x == 0 ? "ok 54\n" : "not ok 54\n";
pos = 0;
$x=m/ABC/gi;
print $` eq "" ? "ok 55\n" : "not ok 55\n" if $x;
$x=m/ABC/gi;
print $` eq "abcfoo" ? "ok 56\n" : "not ok 56\n" if $x;
$x=m/ABC/gi;
print $x == 0 ? "ok 57\n" : "not ok 57\n";
pos = 0;
$x=m/abc/g;
print $' eq "fooabcbar" ? "ok 58\n" : "not ok 58\n" if $x;
$x=m/abc/g;
print $' eq "bar" ? "ok 59\n" : "not ok 59\n" if $x;
$_ .= '';
@x=m/abc/g;
print scalar @x == 2 ? "ok 60\n" : "not ok 60\n";

$_ = "abdc";
pos $_ = 2;
m/\Gc/gc;
print "not " if (pos $_) != 2;
print "ok 61\n";
m/\Gc/g;
print "not " if defined pos $_;
print "ok 62\n";

our $out = 1;
'abc' =~ m'a(?{ $out = 2 })b';
print "not " if $out != 2;
print "ok 63\n";

$out = 1;
'abc' =~ m'a(?{ $out = 3 })c';
print "not " if $out != 1;
print "ok 64\n";

$_ = 'foobar1 bar2 foobar3 barfoobar5 foobar6';
our @out = m/(?<!foo)bar./g;
print "not " if "@out" ne 'bar2 barf';
print "ok 65\n";

# Tests which depend on REG_INFTY
our $reg_infty = defined %Config{reg_infty} ? %Config{reg_infty} : 32767;
our $reg_infty_m = $reg_infty - 1;
our $reg_infty_p = $reg_infty + 1;

# As well as failing if the pattern matches do unexpected things, the
# next three tests will fail if you should have picked up a lower-than-
# default value for $reg_infty from Config.pm, but have not.

undef $@;
print "not " if eval q(('aaa' =~ m/(a{1,$reg_infty_m})/)[0] ne 'aaa') || $@;
print "ok 66\n";

undef $@;
print "not " if eval q(('a' x $reg_infty_m) !~ m/a{$reg_infty_m}/) || $@;
print "ok 67\n";

undef $@;
print "not " if eval q(('a' x ($reg_infty_m - 1)) =~ m/a{$reg_infty_m}/) || $@;
print "ok 68\n";

undef $@;
eval "'aaa' =~ m/a\{1,$reg_infty\}/";
print "not " if $@->{description} !~ m%^\QQuantifier in {,} bigger than%;
print "ok 69\n";

eval "'aaa' =~ m/a\{1,$reg_infty_p\}/";
print "not "
	if $@->{description} !~ m%^\QQuantifier in {,} bigger than%;
print "ok 70\n";
undef $@;

# Poke a couple more parse failures

our $context = 'x' x 256;
eval qq("{$context}y" =~ m/(?<=$context)y/);
print "not " if $@->{description} !~ m%^\QLookbehind longer than 255 not%;
print "ok 71\n";

# removed test
print "ok 72\n";

# Long Monsters
$test = 73;
for my $l (125, 140, 250, 270, 300000, 30) { # Ordered to free memory
  $a = 'a' x $l;
  print "# length=$l\nnot " unless "ba$a=" =~ m/a$a=/;
  print "ok $test\n";
  $test++;

  print "not " if "b$a=" =~ m/a$a=/;
  print "ok $test\n";
  $test++;
}

# 20000 nodes, each taking 3 words per string, and 1 per branch
my $long_constant_len = join '|', 12120 .. 32645;
my $long_var_len = join '|', 8120 .. 28645;
my %ans = ( 'ax13876y25677lbc' => 1,
	 'ax13876y25677mcb' => 0, # not b.
	 'ax13876y35677nbc' => 0, # Num too big
	 'ax13876y25677y21378obc' => 1,
	 'ax13876y25677y21378zbc' => 0,	# Not followed by [k-o]
	 'ax13876y25677y21378y21378kbc' => 1,
	 'ax13876y25677y21378y21378kcb' => 0, # Not b.
	 'ax13876y25677y21378y21378y21378kbc' => 0, # 5 runs
       );

for ( keys %ans ) {
  print "# const-len `$_' not =>  %ans{$_}\nnot "
    if %ans{$_} xor m/a(?=([yx]($long_constant_len)){2,4}[k-o]).*b./o;
  print "ok $test\n";
  $test++;
  print "# var-len   `$_' not =>  %ans{$_}\nnot "
    if %ans{$_} xor m/a(?=([yx]($long_var_len)){2,4}[k-o]).*b./o;
  print "ok $test\n";
  $test++;
}

$_ = " a (bla()) and x(y b((l)u((e))) and b(l(e)e)e";
my $expect = "(bla()) ((l)u((e))) (l(e)e)";

our $c;

sub matchit {
  m/
     (
       \(
       (?{ $c = 1 })		# Initialize
       (?:
	 (?(?{ $c == 0 })       # PREVIOUS iteration was OK, stop the loop
	   (?!
	   )			# Fail: will unwind one iteration back
	 )	
	 (?:
	   [^()]+		# Match a big chunk
	   (?=
	     [()]
	   )			# Do not try to match subchunks
	 |
	   \(
	   (?{ ++$c })
	 |
	   \)
	   (?{ --$c })
	 )
       )+			# This may not match with different subblocks
     )
     (?(?{ $c != 0 })
       (?!
       )			# Fail
     )				# Otherwise the chunk 1 may succeed with $c>0
   /xg;
}

our (@ans, $res, @ans1);
push @ans, $res while $res = matchit;

print "# ans='@ans'\n# expect='$expect'\nnot " if "@ans" ne "1 1 1";
print "ok $test\n";
$test++;

@ans = matchit;

print "# ans='@ans'\n# expect='$expect'\nnot " if "@ans" ne $expect;
print "ok $test\n";
$test++;

print "not " unless "abc" =~ m/^(??{"a"})b/;
print "ok $test\n";
$test++;

my $matched;
$matched = qr/\((?:(?>[^()]+)|(??{$matched}))*\)/;

@ans = @ans1 = ();
push(@ans, $res), push(@ans1, $&) while $res = m/$matched/g;

print "# ans='@ans'\n# expect='$expect'\nnot " if "@ans" ne "1 1 1";
print "ok $test\n";
$test++;

print "# ans1='@ans1'\n# expect='$expect'\nnot " if "@ans1" ne $expect;
print "ok $test\n";
$test++;

@ans = m/$matched/g;

print "# ans='@ans'\n# expect='$expect'\nnot " if "@ans" ne $expect;
print "ok $test\n";
$test++;

@ans = ('a/b' =~ m%(.*/)?(.*)%);	# Stack may be bad
print "not " if "@ans" ne 'a/ b';
print "ok $test\n";
$test++;

my $code = '{$blah = 45}';
my $blah = 12;
eval { m/(?$code)/ };
print "not " unless $@ and $@->{description} =~ m/not allowed at runtime/ and $blah == 12;
print "ok $test\n";
$test++;

for $code ('{$blah = 45}','=xx') {
  $blah = 12;
  $res = eval { "xx" =~ m/(?$code)/o };
  if ($code eq '=xx') {
    print "#'$@','$res','$blah'\nnot " unless not $@ and $res;
  } else {
    print "#'$@','$res','$blah'\nnot " unless $@ and $@->{description} =~ m/not allowed at runtime/ and $blah == 12;
  }
  print "ok $test\n";
  $test++;
}

$code = '{$blah = 45}';
$blah = 12;
eval "m/(?$code)/";			
ok($blah == 45);

$blah = 12;
m/(?{$blah = 45})/;			
print "not " if $blah != 45;
print "ok $test\n";
$test++;

$x = 'banana';
$x =~ m/.a/g;
print "not " unless pos($x) == 2;
print "ok $test\n";
$test++;

$x =~ m/.z/gc;
print "not " unless pos($x) == 2;
print "ok $test\n";
$test++;

sub f {
    my $p = @_[0];
    return $p;
}

$x =~ m/.a/g;
print "not " unless f(pos($x)) == 4;
print "ok $test\n";
$test++;

$x = $^R = 67;
'foot' =~ m/foo(?{$x = 12; 75})[t]/;
print "not " unless $^R eq '75';
print "ok $test\n";
$test++;

$x = $^R = 67;
'foot' =~ m/foo(?{$x = 12; 75})[xy]/;
print "not " unless $^R eq '67' and $x eq '12';
print "ok $test\n";
$test++;

$x = $^R = 67;
'foot' =~ m/foo(?{ $^R + 12 })((?{ $x = 12; $^R + 17 })[xy])?/;
ok( ( $^R eq '79' and $x eq '12' ));

ok(qr/\b\v$/i eq '(?iu-xsm:\b\v$)');
ok(qr/\b\v$/s eq '(?su-xim:\b\v$)');
ok(qr/\b\v$/m eq '(?mu-xis:\b\v$)');
ok(qr/\b\v$/x eq '(?xu-ism:\b\v$)');
ok(qr/\b\v$/xism eq '(?msixu:\b\v$)');
ok(qr/\b\v$/ eq '(?u-xism:\b\v$)');

$_ = 'xabcx';
foreach my $ans ('', 'c') {
  use bytes;
  m/(?<=(?=a)..)((?=c)|.)/g;
  print "# \$1  ='$1'\n# \$ans='$ans'\nnot " unless $1 eq $ans;
  print "ok $test\n";
  $test++;
}

$_ = 'a';
foreach my $ans ('', 'a', '') {
  m/^|a|$/g;
  print "# \$&  ='$&'\n# \$ans='$ans'\nnot " unless $& eq $ans;
  print "ok $test\n";
  $test++;
}

sub prefixify {
  my($v,$a,$b,$res) = @_;
  $v =~ s/\Q$a\E/$b/;
  print "not " unless $res eq $v;
  print "ok $test\n";
  $test++;
}
prefixify('/a/b/lib/arch', "/a/b/lib", 'X/lib', 'X/lib/arch');
prefixify('/a/b/man/arch', "/a/b/man", 'X/man', 'X/man/arch');

$_ = 'var="foo"';
m/(\")/;
ok( ( $1 and m/$1/ ) );

$a=qr/(?{++$b})/;
$b = 7;
m/$a$a/;
ok($b eq '9');

{
    $c="$a";
    m/$a$a/;
    iseq($b, '11');
}

our $lex_a;
{
  use re "eval";
  m/$a$c$a/;
  iseq($b, '14');

  local $lex_a = 2;
  my $lex_a = 43;
  my $lex_b = 17;
  my $lex_c = 27;
  my $lex_res = ($lex_b =~ qr/$lex_b(?{ $lex_c = $lex_a++ })/);
  print "not " unless $lex_res eq '1';
  print "ok $test\n";
  $test++;
  print "not " unless $lex_a eq '44';
  print "ok $test\n";
  $test++;
  print "not " unless $lex_c eq '43';
  print "ok $test\n";
  $test++;


  no re "eval";
  $match = eval { m/$a$c$a/ };
  # FIXME - split this one. That would require removing a lot of hard coded
  # test numbers.
  ok($b eq '14' and $@->{description} =~ m/Eval-group not allowed/ and not $match);
}

{
  local $lex_a = 2;
  my $lex_a = 43;
  my $lex_b = 17;
  my $lex_c = 27;
  my $lex_res = ($lex_b =~ qr/17(?{ $lex_c = $lex_a++ })/);
  ok($lex_res eq '1');
  print "not " unless $lex_a eq '44';
  print "ok $test\n";
  $test++;
  print "not " unless $lex_c eq '43';
  print "ok $test\n";
  $test++;
}

{
  package aa;
  $c = 2;
  $::c = 3;
  '' =~ m/(?{ $c = 4 })/;
  print "not " unless $c == 4;
}
print "ok $test\n";
$test++;
ok($c == 3, "# TODO lexical scope?");

sub must_warn_pat {
    my $warn_pat = shift;
    return sub { print "not  # warning: @_[0]->{description}" unless @_[0]->{description} =~ m/$warn_pat/ }
}

sub must_warn {
    my ($warn_pat, $code) = @_;
    local %SIG;
    eval 'BEGIN { use warnings; $^WARN_HOOK = $warn_pat };' . $code;
    print "ok $test\n";
    $test++;
}


sub make_must_warn {
    my $warn_pat = shift;
    return sub { must_warn(must_warn_pat($warn_pat)) }
}

my $for_future = make_must_warn('reserved for future extensions');

&$for_future('q(a:[b]:) =~ m/[x[:foo:]]/');

#&$for_future('q(a=[b]=) =~ m/[x[=foo=]]/');
print "ok $test\n"; $test++; # now a fatal croak

#&$for_future('q(a.[b].) =~ m/[x[.foo.]]/');
print "ok $test\n"; $test++; # now a fatal croak

# test if failure of patterns returns empty list
$_ = 'aaa';
@_ = m/bbb/;
ok( ! @_ );

@_ = m/bbb/g;
print "not " if @_;
print "ok $test\n";
$test++;

@_ = m/(bbb)/;
print "not " if @_;
print "ok $test\n";
$test++;

@_ = m/(bbb)/g;
print "not " if @_;
print "ok $test\n";
$test++;

m/a(?=.$)/;
print "not " if @+ != 1 or @- != 1;
print "ok $test\n";
$test++;

print "not " if @+[0] != 2 or @-[0] != 1;
print "ok $test\n";
$test++;

print "not "
   if defined @+[1] or defined @-[1] or defined @+[2] or defined @-[2];
print "ok $test\n";
$test++;

m/a(a)(a)/;
print "not " if @+ != 3 or @- != 3;
print "ok $test\n";
$test++;

print "not " if @+[0] != 3 or @-[0] != 0;
print "ok $test\n";
$test++;

print "not " if @+[1] != 2 or @-[1] != 1;
print "ok $test\n";
$test++;

print "not " if @+[2] != 3 or @-[2] != 2;
print "ok $test\n";
$test++;

print "not "
   if defined @+[3] or defined @-[3] or defined @+[4] or defined @-[4];
print "ok $test\n";
$test++;

m/.(a)(b)?(a)/;
print "not " if @+ != 4 or @- != 4;
print "ok $test\n";
$test++;

print "not " if @+[0] != 3 or @-[0] != 0;
print "ok $test\n";
$test++;

print "not " if @+[1] != 2 or @-[1] != 1;
print "ok $test\n";
$test++;

print "not " if @+[3] != 3 or @-[3] != 2;
print "ok $test\n";
$test++;

print "not "
   if defined @+[2] or defined @-[2] or defined @+[4] or defined @-[4];
print "ok $test\n";
$test++;

m/.(a)/;
print "not " if @+ != 2 or @- != 2;
print "ok $test\n";
$test++;

print "not " if @+[0] != 2 or @-[0] != 0;
print "ok $test\n";
$test++;

print "not " if @+[1] != 2 or @-[1] != 1;
print "ok $test\n";
$test++;

print "not "
   if defined @+[2] or defined @-[2] or defined @+[3] or defined @-[3];
print "ok $test\n";
$test++;

eval { @+[0] = 13; };
print "not "
   if $@->{description} !~ m/^Modification of a read-only value attempted/;
print "ok $test\n";
$test++;

eval { @-[0] = 13; };
print "not "
   if $@->{description} !~ m/^Modification of a read-only value attempted/;
print "ok $test\n";
$test++;

eval { @+ = (7, 6, 5); };
print "not "
   if $@->{description} !~ m/^Modification of a read-only value attempted/;
print "ok $test\n";
$test++;

eval { @- = qw(foo bar); };
ok( $@->{description} =~ m/^Modification of a read-only value attempted/ );

m/.(a)(ba*)?/;
print "#@-..@+\nnot " if @+ != 3 or @- != 2;
print "ok $test\n";
$test++;

$_ = 'aaa';
pos = 1;
my @a = m/\Ga/g;
print "not " unless "@a" eq "a a";
print "ok $test\n";
$test++;

my $str = 'abcde';
pos $str = 2;

print "not " if $str =~ m/^\G/;
print "ok $test\n";
$test++;

print "not " if $str =~ m/^.\G/;
print "ok $test\n";
$test++;

print "not " unless $str =~ m/^..\G/;
print "ok $test\n";
$test++;

print "not " if $str =~ m/^...\G/;
print "ok $test\n";
$test++;

{
    local $TODO = $::running_as_thread;
    ok($str =~ m/.\G./ and $& eq 'bc');
}

print "not " unless $str =~ m/\G../ and $& eq 'cd';
print "ok $test\n";
$test++;

our ($foo, $bar);
undef $foo; undef $bar;
print "#'$str','$foo','$bar'\nnot "
    unless $str =~ m/b(?{$foo = $_; $bar = pos})c/
	and $foo eq 'abcde' and $bar eq 2;
print "ok $test\n";
$test++;

undef $foo; undef $bar;
pos $str = undef;
print "#'$str','$foo','$bar'\nnot "
    unless $str =~ m/b(?{$foo = $_; $bar = pos})c/g
	and $foo eq 'abcde' and $bar eq 2 and pos $str eq 3;
print "ok $test\n";
$test++;

$_ = $str;

undef $foo; undef $bar;
print "#'$str','$foo','$bar'\nnot "
    unless m/b(?{$foo = $_; $bar = pos})c/
	and $foo eq 'abcde' and $bar eq 2;
print "ok $test\n";
$test++;

undef $foo; undef $bar;
print "#'$str','$foo','$bar'\nnot "
    unless m/b(?{$foo = $_; $bar = pos})c/g
	and $foo eq 'abcde' and $bar eq 2 and pos eq 3;
print "ok $test\n";
$test++;

undef $foo; undef $bar;
pos = undef;
1 while m/b(?{$foo = $_; $bar = pos})c/g;
print "#'$str','$foo','$bar'\nnot "
    unless $foo eq 'abcde' and $bar eq 2 and not defined pos;
print "ok $test\n";
$test++;

undef $foo; undef $bar;
$_ = 'abcde|abcde';
print "#'$str','$foo','$bar','$_'\nnot "
    unless s/b(?{$foo = $_; $bar = pos})c/x/g and $foo eq 'abcde|abcde'
	and $bar eq 8 and $_ eq 'axde|axde';
print "ok $test\n";
$test++;

our @res = ();
# List context:
$_ = 'abcde|abcde';
our @dummy = m/([ace]).(?{push @res, $1,$2})([ce])(?{push @res, $1,$2})/g;
@res = map {defined $_ ? "'$_'" : 'undef'} @res;
$res = "@res";
print "#'@res' '$_'\nnot "
    unless "@res" eq "'a' undef 'a' 'c' 'e' undef 'a' undef 'a' 'c'";
print "ok $test\n";
$test++;

@res = ();
@dummy = m/([ace]).(?{push @res, $`,$&,$'})([ce])(?{push @res, $`,$&,$'})/g;
@res = map {defined $_ ? "'$_'" : 'undef'} @res;
$res = "@res";
print "#'@res' '$_'\nnot "
    unless "@res" eq
  "'' 'ab' 'cde|abcde' " .
  "'' 'abc' 'de|abcde' " .
  "'abcd' 'e|' 'abcde' " .
  "'abcde|' 'ab' 'cde' " .
  "'abcde|' 'abc' 'de'" ;
print "ok $test\n";
$test++;

#Some more \G anchor checks
$foo='aabbccddeeffgg';

pos($foo)=1;

$foo =~ m/.\G(..)/g;
{
    local $TODO = $::running_as_thread;
    iseq($1,'ab');
}

pos($foo) += 1;
$foo =~ m/.\G(..)/g;
{
    local $TODO = $::running_as_thread;
    iseq($1, 'cc');
}

pos($foo) += 1;
$foo =~ m/.\G(..)/g;
{
    local $TODO = $::running_as_thread;
    iseq($1, 'de');
}

{
    local $TODO = $::running_as_thread;
    ok($foo =~ m/\Gef/g);
}

undef pos $foo;

$foo=~m/\G(..)/g;
print "not " unless($1  eq 'aa');
print "ok $test\n";
$test++;

$foo=~m/\G(..)/g;
print "not " unless($1  eq 'bb');
print "ok $test\n";
$test++;

pos($foo)=5;
$foo=~m/\G(..)/g;
print "not " unless($1  eq 'cd');
print "ok $test\n";
$test++;

$_='123x123';
@res = m/(\d*|x)/g;
ok( ('123||x|123|' eq join '|', @res) );

# see if matching against temporaries (created via pp_helem()) is safe
%( foo => "ok $test\n".$^X ){foo} =~ m/^(.*)\n/g;
print "$1\n";
$test++;

# See if $i work inside (?{}) in the presense of saved substrings and
# changing $_
our @a = qw(foo bar);
our @b = ();
s/(\w)(?{push @b, $1})/,$1,/g for @a;

print "# \@b='@b', expect 'f o o b a r'\nnot " unless("@b" eq "f o o b a r");
print "ok $test\n";
$test++;

print "not " unless("@a" eq ",f,,o,,o, ,b,,a,,r,");
print "ok $test\n";
$test++;

my $brackets;
$brackets = qr{
	         {  (?> [^{}]+ | (??{ $brackets }) )* }
	      }x;

"\{\{\}" =~ $brackets;
print "ok $test\n";		# Did we survive?
$test++;

"something \{ long \{ and \} hairy" =~ $brackets;
print "ok $test\n";		# Did we survive?
$test++;

"something \{ long \{ and \} hairy" =~ m/((??{ $brackets }))/;
print "not " unless $1 eq "\{ and \}";
print "ok $test\n";
$test++;

$_ = "a-a\nxbb";
pos=1;
m/^-.*bb/mg and print "not ";
print "ok $test\n";
$test++;

our $text = "aaXbXcc";
pos($text)=0;
$text =~ m/\GXb*X/g and print 'not ';
print "ok $test - \\G matching \n";
$test++;

$text = "xA\n" x 500;
$text =~ m/^\s*A/m and print 'not ';
print "ok $test\n";
$test++;

$text = "abc dbf";
@res = ($text =~ m/.*?(b).*?\b/g);
"@res" eq 'b b' or print 'not ';
print "ok $test\n";
$test++;

{
use bytes;
@a = map chr,0..255;

@b = grep(m/\S/,@a);
our @c = grep(m/[^\s]/,@a);
print "not " if "@b" ne "@c";
print "ok $test\n";
$test++;

@b = grep(m/\S/,@a);
@c = grep(m/[\S]/,@a);
print "not " if "@b" ne "@c";
print "ok $test\n";
$test++;

@b = grep(m/\s/,@a);
@c = grep(m/[^\S]/,@a);
print "not " if "@b" ne "@c";
print "ok $test\n";
$test++;

@b = grep(m/\s/,@a);
@c = grep(m/[\s]/,@a);
print "not " if "@b" ne "@c";
print "ok $test\n";
$test++;

@b = grep(m/\D/,@a);
@c = grep(m/[^\d]/,@a);
print "not " if "@b" ne "@c";
print "ok $test\n";
$test++;

@b = grep(m/\D/,@a);
@c = grep(m/[\D]/,@a);
print "not " if "@b" ne "@c";
print "ok $test\n";
$test++;

@b = grep(m/\d/,@a);
@c = grep(m/[^\D]/,@a);
print "not " if "@b" ne "@c";
print "ok $test\n";
$test++;

@b = grep(m/\d/,@a);
@c = grep(m/[\d]/,@a);
print "not " if "@b" ne "@c";
print "ok $test\n";
$test++;

@b = grep(m/\W/,@a);
@c = grep(m/[^\w]/,@a);
print "not " if "@b" ne "@c";
print "ok $test\n";
$test++;

@b = grep(m/\W/,@a);
@c = grep(m/[\W]/,@a);
print "not " if "@b" ne "@c";
print "ok $test\n";
$test++;

@b = grep(m/\w/,@a);
@c = grep(m/[^\W]/,@a);
print "not " if "@b" ne "@c";
print "ok $test\n";
$test++;

@b = grep(m/\w/,@a);
@c = grep(m/[\w]/,@a);
iseq("@b","@c");
}

# see if backtracking optimization works correctly
ok("\n\n" =~ m/\n  $ \n/x);

ok("\n\n" =~ m/\n* $ \n/x);

ok("\n\n" =~ m/\n+ $ \n/x);

eval { \@() =~ m/^ARRAY/ };
ok($@ && $@->{description} =~ qr/Tried to stringify a reference/, " # TODO ");

eval << 'EOE';
\{
 package S;
 use overload '""' => sub \{ 'Object S' \};
 sub new \{ bless \@() \}
\}
$a = 'S'->new;
EOE

ok($a and $a =~ m/^Object\sS/, '$a');

# test result of match used as match (!)
'a1b' =~ ('xyz' =~ m/y/) and $` eq 'a' or print "not ";
print "ok $test\n";
$test++;

'a1b' =~ ('xyz' =~ m/t/) and $` eq 'a' or print "not ";
print "ok $test\n";
$test++;

our $w = 0;
{
    local $^WARN_HOOK = sub { $w = 1 };
    local $^W = 1;
	$w = 1 if ("1\n" x 102) =~ m/^\s*\n/m;
}
print $w ? "not " : "", "ok $test\n";
$test++;

my %space = ( spc   => " ",
	      tab   => "\t",
	      cr    => "\r",
	      lf    => "\n",
	      ff    => "\f",
# There's no \v but the vertical tabulator seems miraculously
# be 11 both in ASCII and EBCDIC.
	      vt    => chr(11),
	      false => "space" );

my @space0 = sort grep { %space{$_} =~ m/\s/ }          keys %space;
my @space1 = sort grep { %space{$_} =~ m/[[:space:]]/ } keys %space;
my @space2 = sort grep { %space{$_} =~ m/[[:blank:]]/ } keys %space;

print "not " unless "@space0" eq "cr ff lf spc tab";
print "ok $test # @space0\n";
$test++;

print "not " unless "@space1" eq "cr ff lf spc tab vt";
print "ok $test # @space1\n";
$test++;

print "not " unless "@space2" eq "spc tab";
print "ok $test # @space2\n";
$test++;

# bugid 20001021.005 - this caused a SEGV
print "not " unless undef =~ m/^([^\/]*)(.*)$/;
print "ok $test\n";
$test++;

# unicode.
{
    use utf8;
    my $x = "\x{65e5}";
    no utf8;
    ok($x =~ m/^...$/, "wide is three bytes");
    ok($x =~ m/^\w$/u, "wide is extactly one unicode \\w ");
    ok($x =~ m/^.$/u, "wide is extactly one .");
    my $y = qr/^.$/u;
    ok("$y" eq "(?u-xism:^.\$)", "unicode-modifier stringified.");
    eval q|no utf8; $x =~ m/\x{65e5}/|;
    ok( $@->{description} , "\\x\{...\} gives error in non-unicode regex");
}

use utf8;

# bugid 20000731.001

print "not " unless "A \x{263a} B z C" =~ m/A . B (??{ "z" }) C/;
print "ok $test\n";
$test++;

my $ordA = ord('A');

$_ = "a\x{100}b";
if (m/(.)(\C)(\C)(.)/) {
  print "ok $test\n"; $test++;
  ok($1 eq "a");
  ok($2 eq "\x[C4]");
  ok($3 eq "\x[80]");
  if ($4 eq "b") {
    print "ok $test\n"; $test++;
  } else {
    print "not ok $test\n"; $test++;
  }
} else {
  for (232..236) {
    print "not ok $test\n"; $test++;
  }
}
$_ = "\x{100}";
if (m/(\C)/g) {
    ok(1);
    ok ($1 eq "\x[C4]");
} else {
    ok(0);
    ok(0);
}
if (m/(\C)/g) {
    ok(1);
  # currently \C are still tagged as UTF-8
    ok($1 eq "\x[80]");
} else {
    ok(0);
    ok(0);
}

{
  # japhy -- added 03/03/2001
  () = (my $str = "abc") =~ m/(...)/;
  $str = "def";
  ok($1 eq "abc");
}

# The 242 and 243 go with the 244 and 245.
# The trick is that in EBCDIC the explicit numeric range should match
# (as also in non-EBCDIC) but the explicit alphabetic range should not match.

{
    no utf8;
    ok("\x[8e]" =~ m/[\x[89]-\x[91]]/);
    ok("\x[ce]" =~ m/[\x[c9]-\x[d1]]/);
}

ok("\x{ab}" =~ m/\x{ab}/);

ok("\x{abcd}" =~ m/\x{abcd}/);

{
    # bug id 20001008.001

    my @x = ("stra\x{DF}e 138","stra\x{DF}e 138");
    for (@x) {
	s/(\d+)\s*([\w\-]+)/{$1 . uc $2}/;
	my($latin) = m/^(.+)(?:\s+\d)/;
	print $latin eq "stra\x{DF}e" ? "ok $test\n" :	# 248,249
	    "#latin[$latin]\nnot ok $test\n";
	$test++;
	$latin =~ s/stra\x{DF}e/straße/; # \303\237 after the 2nd a
	use utf8; # needed for the raw UTF-8
	$latin =~ s!(s)tr(?:aß|s+e)!$1tr.!; # \303\237 after the a
    }
}

SKIP: {
    use charnames ":full";

    # This is far from complete testing, there are dozens of character
    # classes in Unicode.  The mixing of literals and \N{...} is
    # intentional so that in non-Latin-1 places we test the native
    # characters, not the Unicode code points.

    my %s = (
	     "a" 				=> 'Ll',
	     "\N{CYRILLIC SMALL LETTER A}"	=> 'Ll',
	     "A" 				=> 'Lu',
	     "\N{GREEK CAPITAL LETTER ALPHA}"	=> 'Lu',
	     "\N{HIRAGANA LETTER SMALL A}"	=> 'Lo',
	     "\N{COMBINING GRAVE ACCENT}"	=> 'Mn',
	     "0"				=> 'Nd',
	     "\N{ARABIC-INDIC DIGIT ZERO}"	=> 'Nd',
	     "_"				=> 'N',
	     "!"				=> 'P',
	     " "				=> 'Zs',
	     "\0"				=> 'Cc',
	     );
	
    for my $char (map { s/^\S+ //; $_ }
                    sort map { sprintf("\%06x", ord($_))." $_" } keys %s) {
	my $class = %s{$char};
	my $code  = sprintf("\%06x", ord($char));
	printf "#\n# 0x$code  $char\n#\n";
	print "# IsAlpha\n";
	if ($class =~ m/^[LM]/) {
	    print "not " unless $char =~ m/\p{IsAlpha}/;
	    print "ok $test\n"; $test++;
	    print "not " if     $char =~ m/\P{IsAlpha}/;
	    print "ok $test\n"; $test++;
	} else {
	    print "not " if     $char =~ m/\p{IsAlpha}/;
	    print "ok $test\n"; $test++;
	    print "not " unless $char =~ m/\P{IsAlpha}/;
	    print "ok $test\n"; $test++;
	}
	print "# IsAlnum\n";
	if ($class =~ m/^[LMN]/ && $char ne "_") {
	    print "not " unless $char =~ m/\p{IsAlnum}/;
	    print "ok $test\n"; $test++;
	    print "not " if     $char =~ m/\P{IsAlnum}/;
	    print "ok $test\n"; $test++;
	} else {
	    print "not " if     $char =~ m/\p{IsAlnum}/;
	    print "ok $test\n"; $test++;
	    print "not " unless $char =~ m/\P{IsAlnum}/;
	    print "ok $test\n"; $test++;
	}
	print "# IsASCII\n";
        if (($code cmp '00007f') +<= 0) {
            print "not " unless $char =~ m/\p{IsASCII}/;
            print "ok $test\n"; $test++;
            print "not " if     $char =~ m/\P{IsASCII}/;
            print "ok $test\n"; $test++;
        } else {
            print "not " if     $char =~ m/\p{IsASCII}/;
            print "ok $test\n"; $test++;
            print "not " unless $char =~ m/\P{IsASCII}/;
            print "ok $test\n"; $test++;
        }
	print "# IsCntrl\n";
	if ($class =~ m/^C/) {
	    print "not " unless $char =~ m/\p{IsCntrl}/;
	    print "ok $test\n"; $test++;
	    print "not " if     $char =~ m/\P{IsCntrl}/;
	    print "ok $test\n"; $test++;
	} else {
	    print "not " if     $char =~ m/\p{IsCntrl}/;
	    print "ok $test\n"; $test++;
	    print "not " unless $char =~ m/\P{IsCntrl}/;
	    print "ok $test\n"; $test++;
	}
	print "# IsBlank\n";
	if ($class =~ m/^Z[lp]/ || $char eq " ") {
	    print "not " unless $char =~ m/\p{IsBlank}/;
	    print "ok $test\n"; $test++;
	    print "not " if     $char =~ m/\P{IsBlank}/;
	    print "ok $test\n"; $test++;
	} else {
	    print "not " if     $char =~ m/\p{IsBlank}/;
	    print "ok $test\n"; $test++;
	    print "not " unless $char =~ m/\P{IsBlank}/;
	    print "ok $test\n"; $test++;
	}
	print "# IsDigit\n";
	if ($class =~ m/^Nd$/) {
	    print "not " unless $char =~ m/\p{IsDigit}/;
	    print "ok $test\n"; $test++;
	    print "not " if     $char =~ m/\P{IsDigit}/;
	    print "ok $test\n"; $test++;
	} else {
	    print "not " if     $char =~ m/\p{IsDigit}/;
	    print "ok $test\n"; $test++;
	    print "not " unless $char =~ m/\P{IsDigit}/;
	    print "ok $test\n"; $test++;
	}
	print "# IsGraph\n";
	if ($class =~ m/^([LMNPS])|Co/) {
	    print "not " unless $char =~ m/\p{IsGraph}/;
	    print "ok $test # is not graph\n"; $test++;
	    print "not " if     $char =~ m/\P{IsGraph}/;
	    print "ok $test\n"; $test++;
	} else {
	    print "not " if     $char =~ m/\p{IsGraph}/;
	    print "ok $test # is graph\n"; $test++;
	    print "not " unless $char =~ m/\P{IsGraph}/;
	    print "ok $test\n"; $test++;
	}
	print "# IsLower\n";
	if ($class =~ m/^Ll$/) {
	    print "not " unless $char =~ m/\p{IsLower}/;
	    print "ok $test\n"; $test++;
	    print "not " if     $char =~ m/\P{IsLower}/;
	    print "ok $test\n"; $test++;
	} else {
	    print "not " if     $char =~ m/\p{IsLower}/;
	    print "ok $test\n"; $test++;
	    print "not " unless $char =~ m/\P{IsLower}/;
	    print "ok $test\n"; $test++;
	}
	print "# IsPrint\n";
	if ($class =~ m/^([LMNPS])|Co|Zs/) {
	    print "not " unless $char =~ m/\p{IsPrint}/;
	    print "ok $test\n"; $test++;
	    print "not " if     $char =~ m/\P{IsPrint}/;
	    print "ok $test\n"; $test++;
	} else {
	    print "not " if     $char =~ m/\p{IsPrint}/;
	    print "ok $test\n"; $test++;
	    print "not " unless $char =~ m/\P{IsPrint}/;
	    print "ok $test\n"; $test++;
	}
	print "# IsPunct\n";
	if ($class =~ m/^P/ || $char eq "_") {
	    print "not " unless $char =~ m/\p{IsPunct}/;
	    print "ok $test\n"; $test++;
	    print "not " if     $char =~ m/\P{IsPunct}/;
	    print "ok $test\n"; $test++;
	} else {
	    print "not " if     $char =~ m/\p{IsPunct}/;
	    print "ok $test\n"; $test++;
	    print "not " unless $char =~ m/\P{IsPunct}/;
	    print "ok $test\n"; $test++;
	}
	print "# IsSpace\n";
	if ($class =~ m/^Z/ || ($code =~ m/^(0009|000A|000B|000C|000D)$/)) {
	    print "not " unless $char =~ m/\p{IsSpace}/;
	    print "ok $test\n"; $test++;
	    print "not " if     $char =~ m/\P{IsSpace}/;
	    print "ok $test\n"; $test++;
	} else {
	    print "not " if     $char =~ m/\p{IsSpace}/;
	    print "ok $test\n"; $test++;
	    print "not " unless $char =~ m/\P{IsSpace}/;
	    print "ok $test\n"; $test++;
	}
	print "# IsUpper\n";
	if ($class =~ m/^L[ut]/) {
	    print "not " unless $char =~ m/\p{IsUpper}/;
	    print "ok $test\n"; $test++;
	    print "not " if     $char =~ m/\P{IsUpper}/;
	    print "ok $test\n"; $test++;
	} else {
	    print "not " if     $char =~ m/\p{IsUpper}/;
	    print "ok $test\n"; $test++;
	    print "not " unless $char =~ m/\P{IsUpper}/;
	    print "ok $test\n"; $test++;
	}
	print "# IsWord\n";
	if ($class =~ m/^[LMN]/ || $char eq "_") {
	    print "not " unless $char =~ m/\p{IsWord}/;
	    print "ok $test\n"; $test++;
	    print "not " if     $char =~ m/\P{IsWord}/;
	    print "ok $test\n"; $test++;
	} else {
	    print "not " if     $char =~ m/\p{IsWord}/;
	    print "ok $test\n"; $test++;
	    print "not " unless $char =~ m/\P{IsWord}/;
	    print "ok $test\n"; $test++;
	}
    }
}

ok(1) while $test +< 576;

{
    $_ = "abc\x{100}\x{200}\x{300}\x{380}\x{400}defg";

    if (m/(.\x{300})./) {
	ok(1);

	print "not " unless $` eq "abc\x{100}" && length($`) == 4;
	print "ok 577\n";

	print "not " unless $& eq "\x{200}\x{300}\x{380}" && length($&) == 3;
	print "ok 578\n";

	print "not " unless $' eq "\x{400}defg" && length($') == 5;
	print "ok 579\n";

	print "not " unless $1 eq "\x{200}\x{300}" && length($1) == 2;
	print "ok 580\n";
    } else {
	for (576..580) { ok(0); }
    }
}

{
    # bug id 20010306.008

    $a = "a\x{1234}";
    # The original bug report had 'no utf8' here but that was irrelevant.
    $a =~ m/\w/; # used to core dump

    print "ok 581\n";
}

{
    $test = 582;

    # bugid 20010410.006
    for my $rx (
		'm/(.*?)\{(.*?)\}/csg',
		'm/(.*?)\{(.*?)\}/cg',
		'm/(.*?)\{(.*?)\}/sg',
		'm/(.*?)\{(.*?)\}/g',
		'm/(.+?)\{(.+?)\}/csg',
	       )
    {
	my($input, $i);

	$i = 0;
	$input = "a\{b\}c\{d\}";
        eval <<EOT;
	while (eval \$input =~ $rx) \{
	    print "# \\\$1 = '\$1' \\\$2 = '\$2'\n";
	    ++\$i;
	\}
EOT
	print "not " unless $i == 2;
	print "ok " . $test++ . "\n";
    }
}

{
    # from Robin Houston

    my $x = "\x{10FFFD}";
    $x =~ s/(.)/$1/g;
    print "not " unless ord($x) == 0x10FFFD && length($x) == 1;
    print "ok 587\n";
}

{
    my $x = "\x{7f}";

    print "not " if     $x =~ m/[\x{80}-\x{ff}]/;
    print "ok 588\n";

    print "not " if     $x =~ m/[\x{80}-\x{100}]/;
    print "ok 589\n";

    print "not " if     $x =~ m/[\x{100}]/;
    print "ok 590\n";

    print "not " if     $x =~ m/\p{InLatin1Supplement}/;
    print "ok 591\n";

    print "not " unless $x =~ m/\P{InLatin1Supplement}/;
    print "ok 592\n";

    print "not " if     $x =~ m/\p{InLatinExtendedA}/;
    print "ok 593\n";

    print "not " unless $x =~ m/\P{InLatinExtendedA}/;
    print "ok 594\n";
}

{
    my $x = "\x{80}";

    print "not " unless $x =~ m/[\x{80}-\x{ff}]/;
    print "ok 595\n";

    print "not " unless $x =~ m/[\x{80}-\x{100}]/;
    print "ok 596\n";

    print "not " if     $x =~ m/[\x{100}]/;
    print "ok 597\n";

    print "not " unless $x =~ m/\p{InLatin1Supplement}/;
    print "ok 598\n";

    print "not " if    $x =~ m/\P{InLatin1Supplement}/;
    print "ok 599\n";

    print "not " if     $x =~ m/\p{InLatinExtendedA}/;
    print "ok 600\n";

    print "not " unless $x =~ m/\P{InLatinExtendedA}/;
    print "ok 601\n";
}

{
    my $x = "\x{ff}";

    print "not " unless $x =~ m/[\x{80}-\x{ff}]/;
    print "ok 602\n";

    print "not " unless $x =~ m/[\x{80}-\x{100}]/;
    print "ok 603\n";

    print "not " if     $x =~ m/[\x{100}]/;
    print "ok 604\n";

    # the next two tests must be ignored on EBCDIC
    print "not " unless $x =~ m/\p{InLatin1Supplement}/ or ord("A") == 193;
    print "ok 605\n";

    print "not " if     $x =~ m/\P{InLatin1Supplement}/ and ord("A") != 193;
    print "ok 606\n";

    print "not " if     $x =~ m/\p{InLatinExtendedA}/;
    print "ok 607\n";

    print "not " unless $x =~ m/\P{InLatinExtendedA}/;
    print "ok 608\n";
}

{
    my $x = "\x{100}";

    print "not " if     $x =~ m/[\x{80}-\x{ff}]/;
    print "ok 609\n";

    print "not " unless $x =~ m/[\x{80}-\x{100}]/;
    print "ok 610\n";

    print "not " unless $x =~ m/[\x{100}]/;
    print "ok 611\n";

    print "not " if     $x =~ m/\p{InLatin1Supplement}/;
    print "ok 612\n";

    print "not " unless $x =~ m/\P{InLatin1Supplement}/;
    print "ok 613\n";

    print "not " unless $x =~ m/\p{InLatinExtendedA}/;
    print "ok 614\n";

    print "not " if     $x =~ m/\P{InLatinExtendedA}/;
    print "ok 615\n";
}

{
    # from japhy
    my $w;
    use warnings;    
    local $^WARN_HOOK = sub { $w .= shift->{description} . "\n" };

    $w = "";
    eval 'qr/(?c)/';
    print "not " if $w !~ m/^Useless \(\?c\)/;
    print "ok 616\n";

    $w = "";
    eval 'qr/(?-c)/';
    print "not " if $w !~ m/^Useless \(\?-c\)/;
    print "ok 617\n";

    $w = "";
    eval 'qr/(?g)/';
    print "not " if $w !~ m/^Useless \(\?g\)/;
    print "ok 618\n";

    $w = "";
    eval 'qr/(?-g)/';
    print "not " if $w !~ m/^Useless \(\?-g\)/;
    print "ok 619\n";

    $w = "";
    eval 'qr/(?o)/';
    print "not " if $w !~ m/^Useless \(\?o\)/;
    print "ok 620\n";

    $w = "";
    eval 'qr/(?-o)/';
    print "not " if $w !~ m/^Useless \(\?-o\)/;
    print "ok 621\n";

    # now test multi-error regexes

    $w = "";
    eval 'qr/(?g-o)/';
    print "not " if $w !~ m/^Useless \(\?g\).*\nUseless \(\?-o\)/;
    print "ok 622\n";

    $w = "";
    eval 'qr/(?g-c)/';
    print "not " if $w !~ m/^Useless \(\?g\).*\nUseless \(\?-c\)/;
    print "ok 623\n";

    $w = "";
    eval 'qr/(?o-cg)/';  # (?c) means (?g) error won't be thrown
    print "not " if $w !~ m/^Useless \(\?o\).*\nUseless \(\?-c\)/;
    print "ok 624\n";

    $w = "";
    eval 'qr/(?ogc)/';
    print "not " if $w !~ m/^Useless \(\?o\).*\nUseless \(\?g\).*\nUseless \(\?c\)/;
    print "ok 625\n";
}

# More Unicode "class" tests

{
    use charnames ':full';

    print "not " unless "\N{LATIN CAPITAL LETTER A}" =~ m/\p{InBasicLatin}/;
    print "ok 626\n";

    print "not " unless "\N{LATIN CAPITAL LETTER A WITH GRAVE}" =~ m/\p{InLatin1Supplement}/;
    print "ok 627\n";

    print "not " unless "\N{LATIN CAPITAL LETTER A WITH MACRON}" =~ m/\p{InLatinExtendedA}/;
    print "ok 628\n";

    print "not " unless "\N{LATIN SMALL LETTER B WITH STROKE}" =~ m/\p{InLatinExtendedB}/;
    print "ok 629\n";

    print "not " unless "\N{KATAKANA LETTER SMALL A}" =~ m/\p{InKatakana}/;
    print "ok 630\n";
}

$_ = "foo";

eval <<"EOT"; die if $@;
  m/f
   o\r
   o
   \$
  /x && print "ok 631\n";
EOT

eval <<"EOT"; die if $@;
  m/f
   o
   o
   \$\r
  /x && print "ok 632\n";
EOT

#test /o feature
sub test_o { @_[0] =~m/@_[1]/o; return $1}
if(test_o('abc','(.)..') eq 'a') {
    print "ok 633\n";
} else {
    print "not ok 633\n";
}
if(test_o('abc','..(.)') eq 'a') {
    print "ok 634\n";
} else {
    print "not ok 634\n";
}

# 635..639: ID 20010619.003 (only the space character is
# supposed to be [:print:], not the whole isprint()).

{
use bytes;
print "not " if "\n"     =~ m/[[:print:]]/;
print "ok 635\n";

print "not " if "\t"     =~ m/[[:print:]]/;
print "ok 636\n";

# Amazingly vertical tabulator is the same in ASCII and EBCDIC.
print "not " if "\014"  =~ m/[[:print:]]/;
print "ok 637\n";

print "not " if "\r"    =~ m/[[:print:]]/;
print "ok 638\n";

print "not " unless " " =~ m/[[:print:]]/;
print "ok 639\n";
}

##
## Test basic $^N usage outside of a regex
##
$x = "abcdef";
our $T;
$T="ok 640\n";if ($x =~ m/cde/ and not defined $^N)         {print $T} else {print "not $T"};
$T="ok 641\n";if ($x =~ m/(cde)/          and $^N eq "cde") {print $T} else {print "not $T"};
$T="ok 642\n";if ($x =~ m/(c)(d)(e)/      and $^N eq   "e") {print $T} else {print "not $T"};
$T="ok 643\n";if ($x =~ m/(c(d)e)/        and $^N eq "cde") {print $T} else {print "not $T"};
$T="ok 644\n";if ($x =~ m/(foo)|(c(d)e)/  and $^N eq "cde") {print $T} else {print "not $T"};
$T="ok 645\n";if ($x =~ m/(c(d)e)|(foo)/  and $^N eq "cde") {print $T} else {print "not $T"};
$T="ok 646\n";if ($x =~ m/(c(d)e)|(abc)/  and $^N eq "abc") {print $T} else {print "not $T"};
$T="ok 647\n";if ($x =~ m/(c(d)e)|(abc)x/ and $^N eq "cde") {print $T} else {print "not $T"};
$T="ok 648\n";if ($x =~ m/(c(d)e)(abc)?/  and $^N eq "cde") {print $T} else {print "not $T"};
$T="ok 649\n";if ($x =~ m/(?:c(d)e)/      and $^N eq  "d" ) {print $T} else {print "not $T"};
$T="ok 650\n";if ($x =~ m/(?:c(d)e)(?:f)/ and $^N eq  "d" ) {print $T} else {print "not $T"};
$T="ok 651\n";if ($x =~ m/(?:([abc])|([def]))*/ and $^N eq  "f" ){print $T} else {print "not $T"};
$T="ok 652\n";if ($x =~ m/(?:([ace])|([bdf]))*/ and $^N eq  "f" ){print $T} else {print "not $T"};
$T="ok 653\n";if ($x =~ m/(([ace])|([bd]))*/    and $^N eq  "e" ){print $T} else {print "not $T"};
{
 $T="ok 654\n";if($x =~ m/(([ace])|([bdf]))*/   and $^N eq  "f" ){print $T} else {print "not $T"};
}
## test to see if $^N is automatically localized -- it should now
## have the value set in test 653
$T="ok 655\n";if ($^N eq  "e" ){print $T} else {print "not $T"};

##
## Now test inside (?{...})
##
our ($y, $z);
$T="ok 656\n";if ($x =~ m/a([abc])(?{$y=$^N})c/      and $y eq "b" ){print $T} else {print "not $T"};
$T="ok 657\n";if ($x =~ m/a([abc]+)(?{$y=$^N})d/     and $y eq "bc"){print $T} else {print "not $T"};
$T="ok 658\n";if ($x =~ m/a([abcdefg]+)(?{$y=$^N})d/ and $y eq "bc"){print $T} else {print "not $T"};
$T="ok 659\n";if ($x =~ m/(a([abcdefg]+)(?{$y=$^N})d)(?{$z=$^N})e/ and $y eq "bc" and $z eq "abcd")
              {print $T} else {print "not $T"};
$T="ok 660\n";if ($x =~ m/(a([abcdefg]+)(?{$y=$^N})de)(?{$z=$^N})/ and $y eq "bc" and $z eq "abcde")
              {print $T} else {print "not $T"};

# Test the Unicode script classes

print "not " unless chr(0x100) =~ m/\p{IsLatin}/; # outside Latin-1
print "ok 661\n";

print "not " unless chr(0x212b) =~ m/\p{IsLatin}/; # Angstrom sign, very outside
print "ok 662\n";

print "not " unless chr(0x5d0) =~ m/\p{IsHebrew}/; # inside InHebrew
print "ok 663\n";

print "not " unless chr(0xfb4f) =~ m/\p{IsHebrew}/; # outside InHebrew
print "ok 664\n";

# # singleton (not in a range, this test must be ignored on EBCDIC)
# print "not " unless chr(0xb5) =~ m/\p{IsGreek}/ or ord("A") == 193;
# print "ok 665\n";
print "ok 665 # 0xb5 moved from Greek to Common with Unicode 4.0.1\n";

print "not " unless chr(0x37a) =~ m/\p{IsGreek}/; # singleton
print "ok 666\n";

print "not " unless chr(0x386) =~ m/\p{IsGreek}/; # singleton
print "ok 667\n";

print "not " unless chr(0x387) =~ m/\P{IsGreek}/; # not there
print "ok 668\n";

print "not " unless chr(0x388) =~ m/\p{IsGreek}/; # range
print "ok 669\n";

print "not " unless chr(0x38a) =~ m/\p{IsGreek}/; # range
print "ok 670\n";

print "not " unless chr(0x38b) =~ m/\P{IsGreek}/; # not there
print "ok 671\n";

print "not " unless chr(0x38c) =~ m/\p{IsGreek}/; # singleton
print "ok 672\n";

if (ord("A") == 65) {
##
## Test [:cntrl:]...
##
## Should probably put in tests for all the POSIX stuff, but not sure how to
## guarantee a specific locale......
##
    use bytes;
    our $AllBytes = join('', map { chr($_) } 0..255);
    ($x = $AllBytes) =~ s/[[:cntrl:]]//g;
    if ($x ne join('', map { chr($_) } 0x20..0x7E, 0x80..0xFF)) {
	print "not ";
    }
    print "ok 673\n";

    ($x = $AllBytes) =~ s/[^[:cntrl:]]//g;
    if ($x ne join('', map { chr($_) } 0..0x1F, 0x7F)) { print "not " }
    print "ok 674\n";
} else {
    print "ok $_ # Skip: EBCDIC\n" for 673..674;
}

# With /s modifier UTF8 chars were interpreted as bytes
{
    my $a = "Hello \x{263A} World";
    
    my @a = ($a =~ m/./gs);
    
    print "not " unless @a == 13;
    print "ok 675\n";
}

@a = ("foo\nbar" =~ m/./g);
print "ok 676\n" if @a == 6 && "@a" eq "f o o b a r";

@a = ("foo\nbar" =~ m/./gs);
print "ok 677\n" if @a == 7 && "@a" eq "f o o \n b a r";

@a = ("foo\nbar" =~ m/\C/g);
print "ok 678\n" if @a == 7 && "@a" eq "f o o \n b a r";

@a = ("foo\nbar" =~ m/\C/gs);
print "ok 679\n" if @a == 7 && "@a" eq "f o o \n b a r";

@a = ("foo\n\x{100}bar" =~ m/./g);
print "ok 680\n" if @a == 7 && "@a" eq "f o o \x{100} b a r";

@a = ("foo\n\x{100}bar" =~ m/./gs);
print "ok 681\n" if @a == 8 && "@a" eq "f o o \n \x{100} b a r";

$test = 682;

($a, $b) = ("\x[c4]", "\x[80]");
@a = ("foo\n\x{100}bar" =~ m/\C/g);
ok( scalar( @a == 9 && "@a" eq "f o o \n $a $b b a r" ) );

@a = ("foo\n\x{100}bar" =~ m/\C/gs);
ok(  @a == 9 && "@a" eq "f o o \n $a $b b a r" );

{
    # [ID 20010814.004] pos() doesn't work when using =~m// in list context
    $_ = "ababacadaea";
    $a = join ":", m/b./gc;
    $b = join ":", m/a./gc;
    $c = pos;
    ok("$a $b $c" eq 'ba:ba ad:ae 10', "$a $b $c");
}

{
    # [ID 20010407.006] matching utf8 return values from functions does not work

    package ID_20010407_006;

    sub x {
	"a\x{1234}";
    }

    my $x = x;
    my $y;

    $x =~ m/(..)/; $y = $1;
    print "not " unless length($y) == 2 && $y eq $x;
    print "ok 685\n";

    x  =~ m/(..)/; $y = $1;
    print "not " unless length($y) == 2 && $y eq $x;
    print "ok 686\n";
}


$test = 687;

{
    # Check that \x## works. 5.6.1 and 5.005_03 fail some of these.
    no utf8;
    $x = "\x[4e]" . "E";
    ok ($x =~ m/^\x4EE$/, "Check only 2 bytes of hex are matched.");

    $x = "\x[4e]" . "i";
    ok ($x =~ m/^\x4Ei$/, "Check that invalid hex digit stops it (2)");

    $x = "\x[04]" . "j";
    ok ($x =~ m/^\x4j$/,  "Check that invalid hex digit stops it (1)");

    $x = "\0" . "k";
    ok ($x =~ m/^\xk$/,   "Check that invalid hex digit stops it (0)");

    $x = "\0" . "x";
    ok ($x =~ m/^\xx$/, "\\xx isn't to be treated as \\0");

    $x = "\0" . "xa";
    ok ($x =~ m/^\xxa$/, "\\xxa isn't to be treated as \\xa");

    $x = "\x[09]" . "_b";
    ok ($x =~ m/^\x9_b$/, "\\x9_b isn't to be treated as \\x9b");

    print "# and now again in [] ranges\n";

    $x = "\x[4e]" . "E";
    ok ($x =~ m/^[\x[4E]E]{2}$/, "Check only 2 bytes of hex are matched.");

    $x = "\x[4e]" . "i";
    ok ($x =~ m/^[\x[4E]i]{2}$/, "Check that invalid hex digit stops it (2)");

    $x = "\x[04]" . "j";
    ok ($x =~ m/^[\x[04]j]{2}$/,  "Check that invalid hex digit stops it (1)");

    $x = "\0" . "k";
    ok ($x =~ m/^[\x[00]k]{2}$/,   "Check that invalid hex digit stops it (0)");

    $x = "\0" . "x";
    ok ($x =~ m/^[\x[00]x]{2}$/, "\\xx isn't to be treated as \\0");

    $x = "\0" . "xa";
    ok ($x =~ m/^[\x[00]xa]{3}$/, "\\xxa isn't to be treated as \\xa");

    $x = "\x[09]" . "_b";
    ok ($x =~ m/^[\x[09]_b]{3}$/, "\\x9_b isn't to be treated as \\x9b");

}

ok(1) while $test +< 715;

{
    # high bit bug -- japhy
    no utf8;
    my $x = "ab\200d";
    $x =~ m/.*?\200/ or print "not ";
    print "ok 715\n";
}

print "# some Unicode properties\n";

{
    # Dashes, underbars, case.
    print "not " unless "\x{80}" =~ m/\p{in-latin1_SUPPLEMENT}/;
    print "ok 716\n";

    # Complement, leading and trailing whitespace.
    print "not " unless "\x{80}" =~ m/\P{  ^  In Latin 1 Supplement  }/;
    print "ok 717\n";

    # No ^In, dashes, case, dash, any intervening (word-break) whitespace.
    # (well, newlines don't work...)
    print "not " unless "\x{80}" =~ m/\p{latin-1   supplement}/;
    print "ok 718\n";
}

{
    print "not " unless "a" =~ m/\pL/;
    print "ok 719\n";

    print "not " unless "a" =~ m/\p{IsLl}/;
    print "ok 720\n";

    print "not " if     "a" =~ m/\p{IsLu}/;
    print "ok 721\n";

    print "not " unless "a" =~ m/\p{Ll}/;
    print "ok 722\n";

    print "not " if     "a" =~ m/\p{Lu}/;
    print "ok 723\n";

    print "not " unless "A" =~ m/\pL/;
    print "ok 724\n";

    print "not " unless "A" =~ m/\p{IsLu}/;
    print "ok 725\n";

    print "not " if     "A" =~ m/\p{IsLl}/;
    print "ok 726\n";

    print "not " unless "A" =~ m/\p{Lu}/;
    print "ok 727\n";

    print "not " if     "A" =~ m/\p{Ll}/;
    print "ok 728\n";

    print "not " if     "a" =~ m/\PL/;
    print "ok 729\n";

    print "not " if     "a" =~ m/\P{IsLl}/;
    print "ok 730\n";

    print "not " unless "a" =~ m/\P{IsLu}/;
    print "ok 731\n";

    print "not " if     "a" =~ m/\P{Ll}/;
    print "ok 732\n";

    print "not " unless "a" =~ m/\P{Lu}/;
    print "ok 733\n";

    print "not " if     "A" =~ m/\PL/;
    print "ok 734\n";

    print "not " if     "A" =~ m/\P{IsLu}/;
    print "ok 735\n";

    print "not " unless "A" =~ m/\P{IsLl}/;
    print "ok 736\n";

    print "not " if     "A" =~ m/\P{Lu}/;
    print "ok 737\n";

    print "not " unless "A" =~ m/\P{Ll}/;
    print "ok 738\n";

}

{
    print "not " if     "a" =~ m/\p{Common}/;
    print "ok 739\n";

    print "not " unless "1" =~ m/\p{Common}/;
    print "ok 740\n";
}

{
    print "not " if     "a"       =~ m/\p{Inherited}/;
    print "ok 741\n";

    print "not " unless "\x{300}" =~ m/\p{Inherited}/;
    print "ok 742\n";
}

{
    # L& and LC are the same
    print "not " unless "a" =~ m/\p{LC}/ and "a" =~ m/\p{L&}/;
    print "ok 743\n";

    print "not " if     "1" =~ m/\p{LC}/ or "1" =~ m/\p{L&}/;
    print "ok 744\n";
}

{
    print "not " unless "a" =~ m/\p{Lowercase Letter}/;
    print "ok 745\n";

    print "not " if     "A" =~ m/\p{lowercaseletter}/;
    print "ok 746\n";
}

{
    print "not " unless "\x{AC00}" =~ m/\p{HangulSyllables}/;
    print "ok 747\n";
}

{
    # Script=, Block=, Category=

    print "not " unless "\x{0100}" =~ m/\p{Script=Latin}/;
    print "ok 748\n";

    print "not " unless "\x{0100}" =~ m/\p{Block=LatinExtendedA}/;
    print "ok 749\n";

    print "not " unless "\x{0100}" =~ m/\p{Category=UppercaseLetter}/;
    print "ok 750\n";
}

{
    print "# the basic character classes and Unicode \n";

    # 0100;LATIN CAPITAL LETTER A WITH MACRON;Lu;0;L;0041 0304;;;;N;LATIN CAPITAL LETTER A MACRON;;;0101;
    print "not " unless "\x{0100}" =~ m/\w/;
    print "ok 751\n";

    # 0660;ARABIC-INDIC DIGIT ZERO;Nd;0;AN;;0;0;0;N;;;;;
    print "not " unless "\x{0660}" =~ m/\d/;
    print "ok 752\n";

    # 1680;OGHAM SPACE MARK;Zs;0;WS;;;;;N;;;;;
    print "not " unless "\x{1680}" =~ m/\s/;
    print "ok 753\n";
}

{
    print "# folding matches and Unicode\n";

    print "not " unless "a\x{100}" =~ m/A/i;
    print "ok 754\n";

    print "not " unless "A\x{100}" =~ m/a/i;
    print "ok 755\n";

    print "not " unless "a\x{100}" =~ m/a/i;
    print "ok 756\n";

    print "not " unless "A\x{100}" =~ m/A/i;
    print "ok 757\n";

    print "not " unless "\x{101}a" =~ m/\x{100}/i;
    print "ok 758\n";

    print "not " unless "\x{100}a" =~ m/\x{100}/i;
    print "ok 759\n";

    print "not " unless "\x{101}a" =~ m/\x{101}/i;
    print "ok 760\n";

    print "not " unless "\x{100}a" =~ m/\x{101}/i;
    print "ok 761\n";

    print "not " unless "a\x{100}" =~ m/A\x{100}/i;
    print "ok 762\n";

    print "not " unless "A\x{100}" =~ m/a\x{100}/i;
    print "ok 763\n";

    print "not " unless "a\x{100}" =~ m/a\x{100}/i;
    print "ok 764\n";

    print "not " unless "A\x{100}" =~ m/A\x{100}/i;
    print "ok 765\n";

    print "not " unless "a\x{100}" =~ m/[A]/i;
    print "ok 766\n";

    print "not " unless "A\x{100}" =~ m/[a]/i;
    print "ok 767\n";

    print "not " unless "a\x{100}" =~ m/[a]/i;
    print "ok 768\n";

    print "not " unless "A\x{100}" =~ m/[A]/i;
    print "ok 769\n";

    print "not " unless "\x{101}a" =~ m/[\x{100}]/i;
    print "ok 770\n";

    print "not " unless "\x{100}a" =~ m/[\x{100}]/i;
    print "ok 771\n";

    print "not " unless "\x{101}a" =~ m/[\x{101}]/i;
    print "ok 772\n";

    print "not " unless "\x{100}a" =~ m/[\x{101}]/i;
    print "ok 773\n";

}

{
    use charnames ':full';

    use utf8;

    print "# LATIN LETTER A WITH GRAVE\n";
    my $lower = "\N{LATIN SMALL LETTER A WITH GRAVE}";
    my $UPPER = "\N{LATIN CAPITAL LETTER A WITH GRAVE}";

    print $lower =~ m/$UPPER/i   ? "ok 774\n" : "not ok 774\n";
    print $UPPER =~ m/$lower/i   ? "ok 775\n" : "not ok 775\n";
    print $lower =~ m/[$UPPER]/i ? "ok 776\n" : "not ok 776\n";
    print $UPPER =~ m/[$lower]/i ? "ok 777\n" : "not ok 777\n";

    print "# GREEK LETTER ALPHA WITH VRACHY\n";

    $lower = "\N{GREEK CAPITAL LETTER ALPHA WITH VRACHY}";
    $UPPER = "\N{GREEK SMALL LETTER ALPHA WITH VRACHY}";

    print $lower =~ m/$UPPER/i   ? "ok 778\n" : "not ok 778\n";
    print $UPPER =~ m/$lower/i   ? "ok 779\n" : "not ok 779\n";
    print $lower =~ m/[$UPPER]/i ? "ok 780\n" : "not ok 780\n";
    print $UPPER =~ m/[$lower]/i ? "ok 781\n" : "not ok 781\n";

    print "# LATIN LETTER Y WITH DIAERESIS\n";

    $lower = "\N{LATIN CAPITAL LETTER Y WITH DIAERESIS}";
    $UPPER = "\N{LATIN SMALL LETTER Y WITH DIAERESIS}";
    print $lower =~ m/$UPPER/i   ? "ok 782\n" : "not ok 782\n";
    print $UPPER =~ m/$lower/i   ? "ok 783\n" : "not ok 783\n";
    print $lower =~ m/[$UPPER]/i ? "ok 784\n" : "not ok 784\n";
    print $UPPER =~ m/[$lower]/i ? "ok 785\n" : "not ok 785\n";
}

{
    use warnings;
    use charnames ':full';
    
    print "# GREEK CAPITAL LETTER SIGMA vs COMBINING GREEK PERISPOMENI\n";

    my $SIGMA = "\N{GREEK CAPITAL LETTER SIGMA}";
    my $char  = "\N{COMBINING GREEK PERISPOMENI}";

    # Before #13843 this was failing by matching falsely.
    print "_:$char:_" =~ m/_:$SIGMA:_/i ? "not ok 786\n" : "ok 786\n";
}

{
    print "# \\X\n";

    use charnames ':full';

    print "a!"              =~ m/^(\X)!/ && $1 eq "a" ?
	"ok 787\n" : "not ok 787 # $1\n";
    print "\x{DF}!"           =~ m/^(\X)!/ && $1 eq "\x{DF}" ?
	"ok 788\n" : "not ok 788 # $1\n";
    print "\x{100}!"        =~ m/^(\X)!/ && $1 eq "\x{100}" ?
	"ok 789\n" : "not ok 789 # $1\n";
    print "\x{100}\x{300}!" =~ m/^(\X)!/ && $1 eq "\x{100}\x{300}" ?
	"ok 790\n" : "not ok 790 # $1\n";
    print "\N{LATIN CAPITAL LETTER E}!" =~ m/^(\X)!/ &&
	$1 eq "\N{LATIN CAPITAL LETTER E}" ?
	"ok 791\n" : "not ok 791 # $1\n";
    print "\N{LATIN CAPITAL LETTER E}\N{COMBINING GRAVE ACCENT}!" =~
	m/^(\X)!/ &&
	$1 eq "\N{LATIN CAPITAL LETTER E}\N{COMBINING GRAVE ACCENT}" ?
	"ok 792\n" : "not ok 792 # $1\n";
}

{
    print "#\\C and \\X\n";

    print "!abc!" =~ m/a\Cc/ ? "ok 793\n" : "not ok 793\n";
    print "!abc!" =~ m/a\Xc/ ? "ok 794\n" : "not ok 794\n";
}

{
    print "# FINAL SIGMA\n";

    my $SIGMA = "\x{03A3}"; # CAPITAL
    my $Sigma = "\x{03C2}"; # SMALL FINAL
    my $sigma = "\x{03C3}"; # SMALL

    print $SIGMA =~ m/$SIGMA/i ? "ok 795\n" : "not ok 795\n";
    print $SIGMA =~ m/$Sigma/i ? "ok 796\n" : "not ok 796\n";
    print $SIGMA =~ m/$sigma/i ? "ok 797\n" : "not ok 797\n";

    print $Sigma =~ m/$SIGMA/i ? "ok 798\n" : "not ok 798\n";
    print $Sigma =~ m/$Sigma/i ? "ok 799\n" : "not ok 799\n";
    print $Sigma =~ m/$sigma/i ? "ok 800\n" : "not ok 800\n";

    print $sigma =~ m/$SIGMA/i ? "ok 801\n" : "not ok 801\n";
    print $sigma =~ m/$Sigma/i ? "ok 802\n" : "not ok 802\n";
    print $sigma =~ m/$sigma/i ? "ok 803\n" : "not ok 803\n";
    
    print $SIGMA =~ m/[$SIGMA]/i ? "ok 804\n" : "not ok 804\n";
    print $SIGMA =~ m/[$Sigma]/i ? "ok 805\n" : "not ok 805\n";
    print $SIGMA =~ m/[$sigma]/i ? "ok 806\n" : "not ok 806\n";

    print $Sigma =~ m/[$SIGMA]/i ? "ok 807\n" : "not ok 807\n";
    print $Sigma =~ m/[$Sigma]/i ? "ok 808\n" : "not ok 808\n";
    print $Sigma =~ m/[$sigma]/i ? "ok 809\n" : "not ok 809\n";

    print $sigma =~ m/[$SIGMA]/i ? "ok 810\n" : "not ok 810\n";
    print $sigma =~ m/[$Sigma]/i ? "ok 811\n" : "not ok 811\n";
    print $sigma =~ m/[$sigma]/i ? "ok 812\n" : "not ok 812\n";
}

{
    print "# parlez-vous?\n";

    use charnames ':full';

    print "fran\N{LATIN SMALL LETTER C}ais" =~
	  m/fran.ais/ &&
	$& eq "francais" ?
	"ok 813\n" : "not ok 813\n";

    print "fran\N{LATIN SMALL LETTER C WITH CEDILLA}ais" =~
	  m/fran.ais/ &&
	$& eq "fran\N{LATIN SMALL LETTER C WITH CEDILLA}ais" ?
	"ok 814\n" : "not ok 814\n";

    print "fran\N{LATIN SMALL LETTER C}ais" =~
	   m/fran\Cais/ &&
        $& eq "francais" ?
	"ok 815\n" : "not ok 815\n";

    print "franc\N{COMBINING CEDILLA}ais" =~
	  m/franc\C\Cais/ ? # COMBINING CEDILLA is two bytes when encoded
	"ok 816\n" : "not ok 816\n";

    print "fran\N{LATIN SMALL LETTER C}ais" =~
	  m/fran\Xais/ &&
	$& eq "francais" ?
	"ok 817\n" : "not ok 817\n";

    print "fran\N{LATIN SMALL LETTER C WITH CEDILLA}ais" =~
	  m/fran\Xais/  &&
        $& eq "fran\N{LATIN SMALL LETTER C WITH CEDILLA}ais" ?
	"ok 818\n" : "not ok 818\n";

    print "franc\N{COMBINING CEDILLA}ais" =~
	  m/fran\Xais/ &&
         $& eq "franc\N{COMBINING CEDILLA}ais" ?
	 "ok 819\n" : "not ok 819\n";

    print "fran\N{LATIN SMALL LETTER C WITH CEDILLA}ais" =~
	  m/fran\N{LATIN SMALL LETTER C WITH CEDILLA}ais/  &&
        $& eq "fran\N{LATIN SMALL LETTER C WITH CEDILLA}ais" ?
	"ok 820\n" : "not ok 820\n";

    print "franc\N{COMBINING CEDILLA}ais" =~
	  m/franc\N{COMBINING CEDILLA}ais/  &&
        $& eq "franc\N{COMBINING CEDILLA}ais" ?
	"ok 821\n" : "not ok 821\n";

    print "fran\N{LATIN SMALL LETTER C}ais" =~
	  m/fran(?:c\N{COMBINING CEDILLA}?|\N{LATIN SMALL LETTER C WITH CEDILLA})ais/ &&
	$& eq "francais" ?
	"ok 822\n" : "not ok 822\n";

    print "fran\N{LATIN SMALL LETTER C}ais" =~
	  m/fran(?:c\N{COMBINING CEDILLA}?|\N{LATIN SMALL LETTER C WITH CEDILLA})ais/ &&
	$& eq "francais" ?
	"ok 823\n" : "not ok 823\n";

    print "fran\N{LATIN SMALL LETTER C WITH CEDILLA}ais" =~
	  m/fran(?:c\N{COMBINING CEDILLA}?|\N{LATIN SMALL LETTER C WITH CEDILLA})ais/ &&
	$& eq "fran\N{LATIN SMALL LETTER C WITH CEDILLA}ais" ?
	"ok 824\n" : "not ok 824\n";

    print "franc\N{COMBINING CEDILLA}ais" =~
	  m/fran(?:c\N{COMBINING CEDILLA}?|\N{LATIN SMALL LETTER C WITH CEDILLA})ais/ &&
	$& eq "franc\N{COMBINING CEDILLA}ais" ?
	"ok 825\n" : "not ok 825\n";
}

{
    print "# Does lingering (and useless) UTF8 flag mess up /i matching?\n";

    {
	my $regex  = "ABcde";
	my $string = "abcDE\x{100}";
	chop($string);
	if ($string =~ m/$regex/i) {
	    print "ok 826\n";
	} else {
	    print "not ok 826\n";
	}
    }

    {
	my $regex  = "ABcde\x{100}";
	my $string = "abcDE";
	chop($regex);
	if ($string =~ m/$regex/i) {
	    print "ok 827\n";
	} else {
	    print "not ok 827\n";
	}
    }

    {
	my $regex  = "ABcde\x{100}";
	my $string = "abcDE\x{100}";
	chop($regex);
	chop($string);
	if ($string =~ m/$regex/i) {
	    print "ok 828\n";
	} else {
	    print "not ok 828\n";
	}
    }
}

{
    print "# more SIGMAs\n";

    my $SIGMA = "\x{03A3}"; # CAPITAL
    my $Sigma = "\x{03C2}"; # SMALL FINAL
    my $sigma = "\x{03C3}"; # SMALL

    my $S3 = "$SIGMA$Sigma$sigma";

    print ":$S3:" =~ m/:(($SIGMA)+):/i   && $1 eq $S3 && $2 eq $sigma ?
	"ok 829\n" : "not ok 829\n";
    print ":$S3:" =~ m/:(($Sigma)+):/i   && $1 eq $S3 && $2 eq $sigma ?
	"ok 830\n" : "not ok 830\n";
    print ":$S3:" =~ m/:(($sigma)+):/i   && $1 eq $S3 && $2 eq $sigma ?
	"ok 831\n" : "not ok 831\n";

    print ":$S3:" =~ m/:(([$SIGMA])+):/i && $1 eq $S3 && $2 eq $sigma ?
	"ok 832\n" : "not ok 832\n";
    print ":$S3:" =~ m/:(([$Sigma])+):/i && $1 eq $S3 && $2 eq $sigma ?
	"ok 833\n" : "not ok 833\n";
    print ":$S3:" =~ m/:(([$sigma])+):/i && $1 eq $S3 && $2 eq $sigma ?
	"ok 834\n" : "not ok 834\n";
}

{
    print "# LATIN SMALL LETTER SHARP S\n";

    use charnames ':full';

    $test= 835;

    ok("\N{LATIN SMALL LETTER SHARP S}" =~ m/\N{LATIN SMALL LETTER SHARP S}/);
    ok("\N{LATIN SMALL LETTER SHARP S}" =~ m/\N{LATIN SMALL LETTER SHARP S}/i, " # TODO sharp S with case folding");

    ok("\N{LATIN SMALL LETTER SHARP S}" =~ m/[\N{LATIN SMALL LETTER SHARP S}]/, " # TODO sharp S in character class");
    ok("\N{LATIN SMALL LETTER SHARP S}" =~ m/[\N{LATIN SMALL LETTER SHARP S}]/i, " # TODO sharp S in character class");

    ok("ss" =~ m/\N{LATIN SMALL LETTER SHARP S}/i, "# TODO sharp S");
    ok("SS" =~ m/\N{LATIN SMALL LETTER SHARP S}/i, "# TODO sharp S");
    ok("ss" =~ m/[\N{LATIN SMALL LETTER SHARP S}]/i, " # TODO sharp S in character class");
    ok("SS" =~ m/[\N{LATIN SMALL LETTER SHARP S}]/i, " # TODO sharp S in character class");

    ok("\N{LATIN SMALL LETTER SHARP S}" =~ m/ss/i, "# TODO sharp S");
    ok("\N{LATIN SMALL LETTER SHARP S}" =~ m/SS/i, "# TODO sharp S");
}

{
    print "# more whitespace: U+0085, U+2028, U+2029\n";

    # U+0085 needs to be forced to be Unicode, the \x{100} does that.
    if ($ordA == 193) {
	print "<\x{100}\x{0085}>" =~ m/<\x{100}e>/ ? "ok 845\n" : "not ok 845\n";
    } else {
	print "<\x{100}\x{0085}>" =~ m/<\x{100}\s>/ ? "ok 845\n" : "not ok 845\n";
    }
    print "<\x{2028}>" =~ m/<\s>/ ? "ok 846\n" : "not ok 846\n";
    print "<\x{2029}>" =~ m/<\s>/ ? "ok 847\n" : "not ok 847\n";
}

{
    print "# . with /s should work on characters, as opposed to bytes\n";

    my $s = "\x{e4}\x{100}";

    # This is not expected to match: the point is that
    # neither should we get "Malformed UTF-8" warnings.
    print $s =~ m/\G(.+?)\n/gcs ?
	"not ok 848\n" : "ok 848\n";

    my @c;

    while ($s =~ m/\G(.)/gs) {
	push @c, $1;
    }

    print join("", @c) eq $s ? "ok 849\n" : "not ok 849\n";

    my $t1 = "Q003\n\n\x{e4}\x{f6}\n\nQ004\n\n\x{e7}"; # test only chars < 256
    my $r1 = "";
    while ($t1 =~ m/ \G ( .+? ) \n\s+ ( .+? ) ( $ | \n\s+ ) /xgcs) {
	$r1 .= $1 . $2;
    }

    my $t2 = $t1 . "\x{100}"; # repeat with a larger char
    my $r2 = "";
    while ($t2 =~ m/ \G ( .+? ) \n\s+ ( .+? ) ( $ | \n\s+ ) /xgcs) {
	$r2 .= $1 . $2;
    }
    $r2 =~ s/\x{100}//;
    print $r1 eq $r2 ? "ok 850\n" : "not ok 850\n";
}

{
    print "# Unicode lookbehind\n";

    print "not ok $_ # TODO variable length lookbehind\n" for 851 .. 854;
    #print "A\x{100}B"        =~ m/(?<=A.)B/  ? "ok 851\n" : "not ok 851\n";
    #print "A\x{200}\x{300}B" =~ m/(?<=A..)B/ ? "ok 852\n" : "not ok 852\n";
    #print "\x{400}AB"        =~ m/(?<=\x{400}.)B/ ? "ok 853\n" : "not ok 853\n";
    #print "\x{500\x{600}}B"  =~ m/(?<=\x{500}.)B/ ? "ok 854\n" : "not ok 854\n";
}

{
    print "# UTF-8 hash keys and /\$/\n";
    # http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2002-01/msg01327.html

    my $u = "a\x{100}";
    my $v = substr($u,0,1);
    my $w = substr($u,1,1);
    my %u = ( $u => $u, $v => $v, $w => $w );
    my $i = 855; 
    for (keys %u) {
	my $m1 = m/^\w*$/ ? 1 : 0;
	my $m2 = %u{$_}=~m/^\w*$/ ? 1 : 0;
	print $m1 == $m2 ? "ok $i\n" : "not ok $i # $m1 $m2\n";
	$i++;
    }
}

{
    print "# [ID 20020124.005]\n";
    # Fixed by #14795.
    my $i = 858;
    for my $char ("a", "\x{df}", "\x{100}"){
	$x = "$char b $char";
	$x =~ s{($char)}{{
	    "c" =~ m/c/;
	    "x";
	}}g;
	print substr($x,0,1) eq substr($x,-1,1) ?
	    "ok $i\n" : "not ok $i # debug: $x\n";
 	$i++;
   }
}

{
    print "# SEGV in s/// and UTF-8\n";
    $s = "s#\x{100}" x 4;
    $s =~ s/[^\w]/ /g;
    print $s eq "s \x{100}" x 4 ? "ok 861\n" : "not ok 861\n";
}

{
    print "# UTF-8 bug (maybe alreayd known?)\n";
    my $u;

    $u = "foo";
    $u =~ s/./\x{100}/g;
    print $u eq "\x{100}\x{100}\x{100}" ? "ok 862\n" : "not ok 862\n";

    $u = "foobar";
    $u =~ s/[ao]/\x{100}/g;
    print $u eq "f\x{100}\x{100}b\x{100}r" ? "ok 863\n" : "not ok 863\n";

    $u =~ s/\x{100}/e/g;
    print $u eq "feeber" ? "ok 864\n" : "not ok 864\n";
}

{
    print "# UTF-8 bug with s///\n";
    # check utf8/non-utf8 mixtures
    # try to force all float/anchored check combinations
    my $c = "\x{100}";
    $test = 865;
    my $subst;
    for my $re (
	"xx.*$c", "x.*$c$c", "$c.*xx", "$c$c.*x", "xx.*(?=$c)", "(?=$c).*xx",
    ) {
	print "xxx" =~ m/$re/ ? "not ok $test\n" : "ok $test\n";
	++$test;
	print +($subst = "xxx") =~ s/$re// ? "not ok $test\n" : "ok $test\n";
	++$test;
    }
    for my $re ("xx.*$c*", "$c*.*xx") {
	print "xxx" =~ m/$re/ ? "ok $test\n" : "not ok $test\n";
	++$test;
	($subst = "xxx") =~ s/$re//;
	print $subst eq '' ? "ok $test\n" : "not ok $test\t# $subst\n";
	++$test;
    }
    for my $re ("xxy*", "y*xx") {
	print "xx$c" =~ m/$re/ ? "ok $test\n" : "not ok $test\n";
	++$test;
	($subst = "xx$c") =~ s/$re//;
	print $subst eq $c ? "ok $test\n" : "not ok $test\n";
	++$test;
	print "xy$c" =~ m/$re/ ? "not ok $test\n" : "ok $test\n";
	++$test;
	print +($subst = "xy$c") =~ m/$re/ ? "not ok $test\n" : "ok $test\n";
	++$test;
    }
    for my $re ("xy$c*z", "x$c*yz") {
	print "xyz" =~ m/$re/ ? "ok $test\n" : "not ok $test\n";
	++$test;
	($subst = "xyz") =~ s/$re//;
	print $subst eq '' ? "ok $test\n" : "not ok $test\n";
	++$test;
    }
}

{
    print "# qr/.../x\n";
    $test = 893;

    my $R = qr/ A B C # D E/x;

    print eval {"ABCDE" =~ $R} ? "ok $test\n" : "not ok $test\n";
    $test++;

    print eval {"ABCDE" =~ m/$R/} ? "ok $test\n" : "not ok $test\n";
    $test++;

    print eval {"ABCDE" =~ m/($R)/} ? "ok $test\n" : "not ok $test\n";
    $test++;
}

{
    print "# illegal Unicode properties\n";
    $test = 896;

    print eval qq* "a" =~ m/\pq / *      ? "not ok $test\n" : "ok $test\n";
    $test++;

    print eval qq* "a" =~ m/\p\{qrst\} / * ? "not ok $test\n" : "ok $test\n";
    $test++;
}

print "# user-defined character properties\n";

sub InKana1 {
    return <<'END';
3040	309F
30A0	30FF
END
}

sub InKana2 {
    return <<'END';
+utf8::InHiragana
+utf8::InKatakana
END
}

sub InKana3 {
    return <<'END';
+utf8::InHiragana
+utf8::InKatakana
-utf8::IsCn
END
}

sub InNotKana {
    return <<'END';
!utf8::InHiragana
-utf8::InKatakana
+utf8::IsCn
END
}

$test = 898;

print "\x{3040}" =~ m/\p{InKana1}/ ? "ok $test\n" : "not ok $test\n"; $test++;
print "\x{303F}" =~ m/\P{InKana1}/ ? "ok $test\n" : "not ok $test\n"; $test++;

print "\x{3040}" =~ m/\p{InKana2}/ ? "ok $test\n" : "not ok $test\n"; $test++;
print "\x{303F}" =~ m/\P{InKana2}/ ? "ok $test\n" : "not ok $test\n"; $test++;

print "\x{3041}" =~ m/\p{InKana3}/ ? "ok $test\n" : "not ok $test\n"; $test++;
print "\x{3040}" =~ m/\P{InKana3}/ ? "ok $test\n" : "not ok $test\n"; $test++;

print "\x{3040}" =~ m/\p{InNotKana}/ ? "ok $test\n" : "not ok $test\n"; $test++;
print "\x{3041}" =~ m/\P{InNotKana}/ ? "ok $test\n" : "not ok $test\n"; $test++;

sub InConsonant { # Not EBCDIC-aware.
    return <<EOF;
0061	007f
-0061
-0065
-0069
-006f
-0075
EOF
}

print "d" =~ m/\p{InConsonant}/ ? "ok $test\n" : "not ok $test\n"; $test++;
print "e" =~ m/\P{InConsonant}/ ? "ok $test\n" : "not ok $test\n"; $test++;

if (!%ENV{PERL_SKIP_PSYCHO_TEST}){
    print "# [ID 20020630.002] utf8 regex only matches 32k\n";
    for (\@( 'byte', "\x{ff}" ), \@( 'utf8', "\x{1ff}" )) {
	my($type, $char) = @$_;
	for my $len (32000, 32768, 33000) {
	    my $s = $char . "f" x $len;
	    my $r = $s =~ m/$char([f]*)/gc;
            ok($r, " # TODO <$type x $len>");
	    ok(+(!$r or pos($s) == $len + 1), " # TODO <$type x $len> pos @{\@( pos($s) )}");
	}
    }
} else {
    ok(1,'Skipped Psycho') for 1..12;
}

$test = 920;

$a = bless qr/foo/, 'Foo';
print(('goodfood' =~ $a ? '' : 'not '),
	"ok $test\t# reblessed qr// matches\n");
++$test;

print(($a eq '(?u-xism:foo)' ? '' : 'not '),
	"ok $test\t# reblessed qr// stringizes\n");
++$test;

$x = "\x{3fe}";

$a = qr/$x/;
print(($x =~ $a ? '' : 'not '), "ok $test - utf8 interpolation in qr//\n");
++$test;

print(("a$a" =~ $x ? '' : 'not '),
      "ok $test - stringifed qr// preserves utf8\n");
++$test;

print(("a$x" =~ m/^a$a\z/ ? '' : 'not '),
      "ok $test - interpolated qr// preserves utf8\n");
++$test;

print(("a$x" =~ m/^a(??{$a})\z/ ? '' : 'not '),
      "ok $test - postponed interpolation of qr// preserves utf8\n");
++$test;

print((length(qr/##/x) == 13 ? '' : 'not '),
      "ok $test - ## in qr// doesn't corrupt memory [perl #17776]\n");
++$test;

{ use re 'eval';

print(("$x$x" =~ m/^$x(??{$x})\z/ ? '' : 'not '),
      "ok $test - postponed utf8 string in utf8 re matches utf8\n");
++$test;

} # no re 'eval'

print "# more user-defined character properties\n";

sub IsSyriac1 {
    return <<'END';
0712	072C
0730	074A
END
}

ok("\x{0712}" =~ m/\p{IsSyriac1}/, '\x{0712}, \p{IsSyriac1}');
ok("\x{072F}" =~ m/\P{IsSyriac1}/, '\x{072F}, \P{IsSyriac1}');

sub Syriac1 {
    return <<'END';
0712	072C
0730	074A
END
}

ok("\x{0712}" =~ m/\p{Syriac1}/, '\x{0712}, \p{Syriac1}');
ok("\x{072F}" =~ m/\P{Syriac1}/, '\x{072F}, \p{Syriac1}');

print "# user-defined character properties may lack \\n at the end\n";
sub InGreekSmall   { return "03B1\t03C9" }
sub InGreekCapital { return "0391\t03A9\n-03A2" }

ok("\x{03C0}" =~ m/\p{InGreekSmall}/,   "Small pi");
ok("\x{03C2}" =~ m/\p{InGreekSmall}/,   "Final sigma");
ok("\x{03A0}" =~ m/\p{InGreekCapital}/, "Capital PI");
ok("\x{03A2}" =~ m/\P{InGreekCapital}/, "Reserved");

sub AsciiHexAndDash {
    return <<'END';
+utf8::ASCII_Hex_Digit
+utf8::Dash
END
}

ok("-" =~ m/\p{Dash}/,            "'-' is Dash");
ok("A" =~ m/\p{ASCII_Hex_Digit}/, "'A' is ASCII_Hex_Digit");
ok("-" =~ m/\p{AsciiHexAndDash}/, "'-' is AsciiHexAndDash");
ok("A" =~ m/\p{AsciiHexAndDash}/, "'A' is AsciiHexAndDash");

{
    print "# Change #18179\n";
    # previously failed with "panic: end_shift
    my $s = "\x{100}" x 5;
    my $ok = $s =~ m/(\x{100}{4})/;
    my($ord, $len) = (ord $1, length $1);
    print +($ok && $ord == 0x100 && $len == 4)
	    ? "ok $test\n" : "not ok $test\t# [#18179] $ok/$ord/$len\n";
    ++$test;
}

{
    print "# [perl #15763]\n";

    $a = "x\x{100}";
    chop $a; # but leaves the UTF-8 flag
    $a .= "y"; # 1 byte before "y"

    ok($a =~ m/^\C/,      'match one \C on 1-byte UTF-8');
    ok($a =~ m/^\C{1}/,   'match \C{1}');

    ok($a =~ m/^\Cy/,      'match \Cy');
    ok($a =~ m/^\C{1}y/,   'match \C{1}y');

    $a = "\x{100}y"; # 2 bytes before "y"

    ok($a =~ m/^\C/,       'match one \C on 2-byte UTF-8');
    ok($a =~ m/^\C{1}/,    'match \C{1}');
    ok($a =~ m/^\C\C/,     'match two \C');
    ok($a =~ m/^\C{2}/,    'match \C{2}');

    ok($a =~ m/^\C\C\C/,    'match three \C on 2-byte UTF-8 and a byte');
    ok($a =~ m/^\C{3}/,     'match \C{3}');

    ok($a =~ m/^\C\Cy/,     'match two \C');
    ok($a =~ m/^\C{2}y/,    'match \C{2}');

    ok($a !~ m/^\C\C\Cy/,    q{don't match three \Cy});
    ok($a !~ m/^\C{2}\Cy/,   q{don't match \C{3}y});

    $a = "\x{1000}y"; # 3 bytes before "y"

    ok($a =~ m/^\C/,         'match one \C on three-byte UTF-8');
    ok($a =~ m/^\C{1}/,      'match \C{1}');
    ok($a =~ m/^\C\C/,       'match two \C');
    ok($a =~ m/^\C{2}/,      'match \C{2}');
    ok($a =~ m/^\C\C\C/,     'match three \C');
    ok($a =~ m/^\C{3}/,      'match \C{3}');

    ok($a =~ m/^\C\C\C\C/,   'match four \C on three-byte UTF-8 and a byte');
    ok($a =~ m/^\C{4}/,      'match \C{4}');

    ok($a =~ m/^\C\C\Cy/,    'match three \Cy');
    ok($a =~ m/^\C{3}y/,     'match \C{3}y');

    ok($a !~ m/^\C\C\C\C\y/, q{don't match four \Cy});
    ok($a !~ m/^\C{4}y/,     q{don't match \C{4}y});
}

{
    local $\;
    $_ = 'aaaaaaaaaa';
    chop $_; $\="\n";
    ok(m/[^\s]+/, "m/[^\s]/ utf8");
    ok(m/[^\d]+/, "m/[^\d]/ utf8");
    ok(($a = $_, $_ =~ s/[^\s]+/./g), "s/[^\s]/ utf8");
    ok(($a = $_, $a =~ s/[^\d]+/./g), "s/[^\s]/ utf8");
}

ok("\x{100}" =~ m/\x{100}/, "[perl #15397]");
ok("\x{100}" =~ m/(\x{100})/, "[perl #15397]");
ok("\x{100}" =~ m/(\x{100}){1}/, "[perl #15397]");
ok("\x{100}\x{100}" =~ m/(\x{100}){2}/, "[perl #15397]");
ok("\x{100}\x{100}" =~ m/(\x{100})(\x{100})/, "[perl #15397]");

$x = "CD";
$x =~ m/(AB)*?CD/;
ok(!defined $1, "[perl #7471]");

$x = "CD";
$x =~ m/(AB)*CD/;
ok(!defined $1, "[perl #7471]");

$pattern = "^(b+?|a)\{1,2\}c";
ok("bac"    =~ m/$pattern/ && $1 eq 'a', "[perl #3547]");
ok("bbac"   =~ m/$pattern/ && $1 eq 'a', "[perl #3547]");
ok("bbbac"  =~ m/$pattern/ && $1 eq 'a', "[perl #3547]");
ok("bbbbac" =~ m/$pattern/ && $1 eq 'a', "[perl #3547]");

{
    # [perl #18232]
    "\x{100}" =~ m/(.)/;
    ok( $1 eq "\x{100}", '$1 is utf-8 [perl #18232]' );
    { 'a' =~ m/./; }
    ok( $1 eq "\x{100}", '$1 is still utf-8' );
    ok( $1 eq "\x[C4]\x[80]", '$1 is also non-utf-8' );
}

{
    use utf8;
    my $attr = 'Name-1' ;

    my $NormalChar          = qr/[\p{IsDigit}\p{IsLower}\p{IsUpper}]/;
    my $NormalWord          = qr/$NormalChar+?/;
    my $PredNameHyphen      = qr/^$NormalWord(\-$NormalWord)*?$/;

    $attr =~ m/^$/;
    ok( $attr =~ $PredNameHyphen, "[perl #19767] original test" );
}

{
    use utf8;
    "a" =~ m/[b]/;
    ok ( "0" =~ m/\p{N}+\z/, "[perl #19767] variant test" );
}

{

    $p = 1;
    foreach (1,2,3,4) {
	    $p++ if m/(??{ $p })/
    }
    iseq ($p, 5, '[perl #20683] (??{ }) returns stale values');
    { package P; $a=1; sub TIESCALAR { bless \@() } sub FETCH { $a++ } }
    tie $p, 'P';
    foreach (1,2,3,4) {
	    m/(??{ $p })/
    }
    iseq ( $p, 5, '(??{ }) returns stale values');
}

{
  # Subject: Odd regexp behavior
  # From: Markus Kuhn <Markus.Kuhn@cl.cam.ac.uk>
  # Date: Wed, 26 Feb 2003 16:53:12 +0000
  # Message-Id: <E18o4nw-0008Ly-00@wisbech.cl.cam.ac.uk>
  # To: perl-unicode@perl.org
    
  $x = "\x{2019}\nk"; $x =~ s/(\S)\n(\S)/$1 $2/sg;
  ok($x eq "\x{2019} k", "Markus Kuhn 2003-02-26");

  $x = "b\nk"; $x =~ s/(\S)\n(\S)/$1 $2/sg;
  ok($x eq "b k", "Markus Kuhn 2003-02-26");

  ok("\x{2019}" =~ m/\S/, "Markus Kuhn 2003-02-26");
}

{
    my $i;
    ok('-1-3-5-' eq join('', split m/((??{$i++}))/, '-1-3-5-'),
	"[perl #21411] (??\{ .. \}) corrupts split's stack");
    split m/(?{'WOW'})/, 'abc';
    ok('a|b|c' eq join ('|', @_),
       "[perl #21411] (?\{ .. \}) version of the above");
}

{
    # XXX DAPM 13-Apr-06. Recursive split is still broken. It's only luck it
    # hasn't been crashing. Disable this test until it is fixed properly.
    # XXX also check what it returns rather than just doing ok(1,...)
    # split /(?{ split "" })/, "abc";
    ok(1,'cache_re & "(?{": it dumps core in 5.6.1 & 5.8.0');
}

{
    ok("\x{100}\n" =~ m/\x{100}\n$/, "UTF8 length cache and fbm_compile");  
}

{
    package Str;
    use overload q/""/ => sub { ${@_[0]}; };
    sub new { my ($c, $v) = @_; bless \$v, $c; }

    package main;
    $_ = Str->new("a\x{100}/\x{100}b");
    ok(join(":", m/\b(.)\x{100}/g) eq "a:/", "re_intuit_start and PL_bostr");
}

{
    $_ = "code:   'x' \{ '...' \}\n"; study;

    $_ = "code:   'x' \{ '...' \}\n"; study;
    my @x; push @x, $& while m/'[^\']*'/gx;
    ok(join(":", @x) eq "'x':'...'",
       "[perl #17757] Parse::RecDescent triggers infinite loop");
}

{
    my $re = qq/^([^X]*)X/;
    ok("\x{100}X" =~ m/$re/, "S_cl_and ANYOF_UNICODE & ANYOF_INVERTED");
}

# bug #22354
sub func ($) {
    ok( "a\nb" !~ m/^b/, @_[0] );
    ok( "a\nb" =~ m/^b/m, "@_[0] - with /m" );
}
func "standalone";
$_ = "x"; s/x/{func "in subst"}/;
$_ = "x"; s/x/{func "in multiline subst"}/m;
#$_ = "x"; /x(?{func "in regexp"})/;
#$_ = "x"; /x(?{func "in multiline regexp"})/m;

# bug RT#19049
$_="abcdef\n";
@x = m/./g;
ok("abcde" eq "$`", 'RT#19049 - global match not setting $`');

ok("123\x{100}" =~ m/^.*1.*23\x{100}$/, 'uft8 + multiple floating substr');

# LATIN SMALL/CAPITAL LETTER A WITH MACRON
ok("  \x{101}" =~ qr/\x{100}/i,
   "<20030808193656.5109.1@llama.ni-s.u-net.com>");

# LATIN SMALL/CAPITAL LETTER A WITH RING BELOW
ok("  \x{1E01}" =~ qr/\x{1E00}/i,
   "<20030808193656.5109.1@llama.ni-s.u-net.com>");

# DESERET SMALL/CAPITAL LETTER LONG I
ok("  \x{10428}" =~ qr/\x{10400}/i,
   "<20030808193656.5109.1@llama.ni-s.u-net.com>");

# LATIN SMALL/CAPITAL LETTER A WITH RING BELOW + 'X'
ok("  \x{1E01}x" =~ qr/\x{1E00}X/i,
   "<20030808193656.5109.1@llama.ni-s.u-net.com>");

{
    # [perl #23769] Unicode regex broken on simple example
    # regrepeat() didn't handle UTF-8 EXACT case right.

    my $s = "\x{a0}\x{a0}\x{a0}\x{100}"; chop $s;

    ok($s =~ m/\x{a0}/,       "[perl #23769]");
    ok($s =~ m/\x{a0}+/,      "[perl #23769]");
    ok($s =~ m/\x{a0}\x{a0}/, "[perl #23769]");

    ok("aaa\x{100}" =~ m/(a+)/, "[perl #23769] easy invariant");
    ok($1 eq "aaa", "[perl #23769]");

    ok("\x{a0}\x{a0}\x{a0}\x{100}" =~ m/(\x{a0}+)/, "[perl #23769] regrepeat invariant");
    ok($1 eq "\x{a0}\x{a0}\x{a0}", "[perl #23769]");

    ok("ababab\x{100}  " =~ m/((?:ab)+)/, "[perl #23769] hard invariant");
    ok($1 eq "ababab", "[perl #23769]");

    ok("\x{a0}\x{a1}\x{a0}\x{a1}\x{a0}\x{a1}\x{100}" =~ m/((?:\x{a0}\x{a1})+)/, "[perl #23769] hard variant");
    ok($1 eq "\x{a0}\x{a1}\x{a0}\x{a1}\x{a0}\x{a1}", "[perl #23769]");

    ok("aaa\x{100}     " =~ m/(a+?)/, "[perl #23769] easy invariant");
    ok($1 eq "a", "[perl #23769]");

    ok("\x{a0}\x{a0}\x{a0}\x{100}    " =~ m/(\x{a0}+?)/, "[perl #23769] regrepeat variant");
    ok($1 eq "\x{a0}", "[perl #23769]");

    ok("ababab\x{100}  " =~ m/((?:ab)+?)/, "[perl #23769] hard invariant");
    ok($1 eq "ab", "[perl #23769]");

    ok("\x{a0}\x{a1}\x{a0}\x{a1}\x{a0}\x{a1}\x{100}" =~ m/((?:\x{a0}\x{a1})+?)/, "[perl #23769] hard variant");
    ok($1 eq "\x{a0}\x{a1}", "[perl #23769]");

    ok("\x{c4}\x{c4}\x{c4}" !~ m/(\x{100}+)/, "[perl #23769] don't match first byte of utf8 representation");
    ok("\x{c4}\x{c4}\x{c4}" !~ m/(\x{100}+?)/, "[perl #23769] don't match first byte of utf8 representation");
}

for (120 .. 130) {
    my $head = 'x' x $_;
    for my $tail ('\x{0061}', '\x{1234}') {
	ok(
	    eval qq{use utf8; "$head$tail" =~ m/$head$tail/ },
	    '\x{...} misparsed in regexp near 127 char EXACT limit'
	);
    }
}

# perl #25269: panic: pp_match start/end pointers
ok("a-bc" eq eval {
	my($x, $y) = "bca" =~ m/^(?=.*(a)).*(bc)/;
	"$x-$y";
}, 'captures can move backwards in string');

# perl #27940: \cA not recognized in character classes
ok("a\cAb" =~ m/\cA/, '\cA in pattern');
ok("a\cAb" =~ m/[\cA]/, '\cA in character class');
ok("a\cAb" =~ m/[\cA-\cB]/, '\cA in character class range');
ok("abc" =~ m/[^\cA-\cB]/, '\cA in negated character class range');
ok("a\cBb" =~ m/[\cA-\cC]/, '\cB in character class range');
ok("a\cCbc" =~ m/[^\cA-\cB]/, '\cC in negated character class range');
ok("a\cAb" =~ m/(??{"\cA"})/, '\cA in ??{} pattern');
ok("ab" !~ m/a\cIb/x, '\cI in pattern');

# perl #28532: optional zero-width match at end of string is ignored
ok(("abc" =~ m/^abc(\z)?/) && defined($1),
    'optional zero-width match at end of string');
ok(("abc" =~ m/^abc(\z)??/) && !defined($1),
    'optional zero-width match at end of string');



{ # TRIE related
    my @got=();
    "words"=~m/(word|word|word)(?{push @got,$1})s$/;
    ok(@got==1,"TRIE optimation is working") or warn "# @got";
    @got=();
    "words"=~m/(word|word|word)(?{push @got,$1})s$/i;
    ok(@got==1,"TRIEF optimisation is working") or warn "# @got";

    my @nums=map {int rand 1000} 1..100;
    my $re="(".(join "|",@nums).")";
    $re=qr/\b$re\b/;

    foreach (@nums) {
        ok($_=~m/$re/,"Trie nums");
    }
    $_=join " ", @nums;
    @got=();
    push @got,$1 while m/$re/g;

    my %count;
    %count{$_}++ for @got;
    my $ok=1;
    for (@nums) {
        $ok=0 if --%count{$_}+<0;
    }
    ok($ok,"Trie min count matches");
}


# TRIE related
# LATIN SMALL/CAPITAL LETTER A WITH MACRON
ok(("foba  \x{101}foo" =~ qr/(foo|\x{100}foo|bar)/i) && $1 eq "\x{101}foo",
   "TRIEF + LATIN SMALL/CAPITAL LETTER A WITH MACRON");

# LATIN SMALL/CAPITAL LETTER A WITH RING BELOW
ok(("foba  \x{1E01}foo" =~ qr/(foo|\x{1E00}foo|bar)/i) && $1 eq "\x{1E01}foo",
   "TRIEF + LATIN SMALL/CAPITAL LETTER A WITH RING BELOW");

# DESERET SMALL/CAPITAL LETTER LONG I
ok(("foba  \x{10428}foo" =~ qr/(foo|\x{10400}foo|bar)/i) &&  $1 eq "\x{10428}foo",
   "TRIEF + DESERET SMALL/CAPITAL LETTER LONG I");

# LATIN SMALL/CAPITAL LETTER A WITH RING BELOW + 'X'
ok(("foba  \x{1E01}xfoo" =~ qr/(foo|\x{1E00}Xfoo|bar)/i) &&  $1 eq "\x{1E01}xfoo",
   "TRIEF + LATIN SMALL/CAPITAL LETTER A WITH RING BELOW + 'X'");

{# TRIE related

use charnames ':full';

$s="\N{LATIN SMALL LETTER SHARP S}";
ok(("foba  ba$s" =~ qr/(foo|Ba$s|bar)/i)
    &&  $1 eq "ba$s",
   " # TODO TRIEF + LATIN SMALL LETTER SHARP S =~ ss");
ok(("foba  ba$s" =~ qr/(Ba$s|foo|bar)/i)
    &&  $1 eq "ba$s",
   " # TODO TRIEF + LATIN SMALL LETTER SHARP S =~ ss");
ok(("foba  ba$s" =~ qr/(foo|bar|Ba$s)/i)
    &&  $1 eq "ba$s",
   " # TODO TRIEF + LATIN SMALL LETTER SHARP S =~ ss");

ok(("foba  ba$s" =~ qr/(foo|Bass|bar)/i)
    &&  $1 eq "ba$s",
   "TRIEF + LATIN SMALL LETTER SHARP S =~ ss # TODO");

ok(("foba  ba$s" =~ qr/(foo|BaSS|bar)/i)
    &&  $1 eq "ba$s",
   "TRIEF + LATIN SMALL LETTER SHARP S =~ SS # TODO");

ok(("foba  ba{$s}pxySS$s$s" =~ qr/(b(?:a$st|a$sf|a$sp)[xy]+$s*)/i)
    &&  $1 eq "ba{$s}pxySS$s$s",
   "COMMON PREFIX TRIEF + LATIN SMALL LETTER SHARP S # TODO");

   
}


print "# set PERL_SKIP_PSYCHO_TEST to skip this test\n";
if (!%ENV{PERL_SKIP_PSYCHO_TEST}){
    my @normal=qw(these are some normal words);
    use utf8;
    my $psycho=join "|",@normal,map chr $_,255..20000;
    ok(('these'=~m/($psycho)/) && $1 eq 'these','Pyscho');
} else {
    ok(1,'Skipped Psycho');
}

# [perl #37038] Global regular matches generate invalid pointers

{
    my $s = "abcd";
    $s =~ m/(..)(..)/g;
    $s = $1;
    $s = $2;
    ok($s eq 'cd',
       "# assigning to original string should not corrupt match vars");
}

{
    package wooosh;
    sub gloople {
      "!";
    }
    package main;
    
    my $aeek = bless \%(), 'wooosh';
    eval {$aeek->gloople() =~ m/(.)/g;};
    ok($@ eq "", "//g match against return value of sub") or print "# $@\n";
}

{
    sub gloople {
      "!";
    }
    eval {gloople() =~ m/(.)/g;};
    ok($@ eq "", "# 26410 didn't affect sub calls for some reason")
	or print "# $@\n";
}

# [perl #37836] Simple Regex causes SEGV when run on specific data
if ($ordA == 193) {
    print "ok $test # Skip: in EBCDIC\n"; $test++;
} else {
    no warnings 'utf8';
    $_ = pack('U0C2', 0xa2, 0xf8); # ill-formed UTF-8
    my $ret = 0;
    eval { $ret = s/[\0]+//g };
    ok($ret == 0, "ill-formed UTF-8 doesn't match NUL in class");
}

{ # [perl #38293] chr(65535) should be allowed in regexes
    no warnings 'utf8'; # to allow non-characters
    my($c, $r, $s);

    $c = chr 0xffff;
    $c =~ s/$c//g;
    ok($c eq "", "U+FFFF, parsed as atom");

    $c = chr 0xffff;
    $r = "\\$c";
    $c =~ s/$r//g;
    ok($c eq "", "U+FFFF backslashed, parsed as atom");

    $c = chr 0xffff;
    $c =~ s/[$c]//g;
    ok($c eq "", "U+FFFF, parsed in class");

    $c = chr 0xffff;
    $r = "[\\$c]";
    $c =~ s/$r//g;
    ok($c eq "", "U+FFFF backslashed, parsed in class");

    $s = "A\x{ffff}B";
    $s =~ s/\x{ffff}//i;
    ok($s eq "AB", "U+FFFF, EXACTF");

    $s = "\x{ffff}A";
    $s =~ s/\bA//;
    ok($s eq "\x{ffff}", "U+FFFF, BOUND");

    $s = "\x{ffff}!";
    $s =~ s/\B!//;
    ok($s eq "\x{ffff}", "U+FFFF, NBOUND");
} # non-characters end

{
    # https://rt.perl.org/rt3/Ticket/Display.html?id=39583
    
    # The printing characters
    my @chars = ("A".."Z");
    my $delim = ",";
    my $size = 32771 - 4;
    my $str = '';

    # create some random junk. Inefficient, but it works.
    for ($i = 0 ; $i +< $size ; $i++) {
        $str .= @chars[int(rand(@chars))];
    }

    $str .= ($delim x 4);
    my $res;
    my $matched;
    if ($str =~ s/^(.*?)(?:$delim){4}//s) {
        $res = $1;
        $matched=1;
    } 
    ok($matched,'pattern matches');
    ok(length($str)==0,"Empty string");
    ok(defined($res) && length($res)==$size,"\$1 is correct size");
}

{ # related to [perl #27940]
    ok("\0-A"  =~ m/\c@-A/, '@- should not be interpolated in a pattern');
    ok("\0\0A" =~ m/\c@+A/, '@+ should not be interpolated in a pattern');
    ok("X\@-A"  =~ m/X@-A/, '@- should not be interpolated in a pattern');
    ok("X\@\@A" =~ m/X@+A/, '@+ should not be interpolated in a pattern');

    ok("X\0A" =~ m/X\c@?A/,  '\c@?');
    ok("X\0A" =~ m/X\c@*A/,  '\c@*');
    ok("X\0A" =~ m/X\c@(A)/, '\c@(');
    ok("X\0A" =~ m/X(\c@)A/, '\c@)');
    ok("X\0A" =~ m/X\c@|ZA/, '\c@|');

    ok("X\@A" =~ m/X@?A/,  '@?');
    ok("X\@A" =~ m/X@*A/,  '@*');
    ok("X\@A" =~ m/X@(A)/, '@(');
    ok("X\@A" =~ m/X(@)A/, '@)');
    ok("X\@A" =~ m/X@|ZA/, '@|');

    local $" = ','; # non-whitespace and non-RE-specific
    ok('abc' =~ m/(.)(.)(.)/, 'the last successful match is bogus');
    ok("A@+B"  =~ m/A@{\@+}B/,  'interpolation of @+ in /@{+}/');
    ok("A@-B"  =~ m/A@{\@-}B/,  'interpolation of @- in /@{-}/');
    ok("A@+B"  =~ m/A@{\@+}B/x, 'interpolation of @+ in /@{+}/x');
    ok("A@-B"  =~ m/A@{\@-}B/x, 'interpolation of @- in /@{-}/x');
}

{
    use lib 'lib';
    use Cname;
    
    ok('fooB'=~m/\N{foo}[\N{B}\N{b}]/,"Passthrough charname");
    my $handle=make_must_warn('Ignoring excess chars from');
    $handle->('q(xxWxx) =~ m/[\N{WARN}]/');
    {
        my $code;
        my $w="";
        local $^WARN_HOOK = sub { $w.=shift->message };
        eval($code=<<'EOFTEST') or die "$@\n$code\n";
        {
            use warnings;
            
            #1234
            ok("\0" !~ m/[\N{EMPTY-STR}XY]/,
                "Zerolength charname in charclass doesnt match \0");
            1;
        }
EOFTEST
        ok($w=~m/Zero length.*replacement character/,
            "Got expected zero length warning");
        warn $code;                    
        
    }
    $handle= make_must_warn('Ignoring zero length');
    $handle->('qq(\0) =~ m/[\N{EMPTY-STR}XY]/');
    ok('AB'=~m/(\N{EVIL})/ && $1 eq 'A',"Charname caching $1");
    ok('ABC'=~m/(\N{EVIL})/,"Charname caching $1");    
    ok('xy'=~m/x\N{EMPTY-STR}y/, 'Empty string charname produces NOTHING node');
    ok(''=~m/\N{EMPTY-STR}/, 'Empty string charname produces NOTHING node 2');
        
}
{
    print "# MORE LATIN SMALL LETTER SHARP S\n";

    use charnames ':full';

    #see also test #835
    ok("ss" =~ m/[\N{LATIN SMALL LETTER SHARP S}x]/i,
        "unoptimized named sequence in class 1, # TODO sharp S in class");
    ok("SS" =~ m/[\N{LATIN SMALL LETTER SHARP S}x]/i,
        "unoptimized named sequence in class 2, # TODO sharp S in class");        
    ok("\N{LATIN SMALL LETTER SHARP S}" =~ m/[\N{LATIN SMALL LETTER SHARP S}x]/,
        "unoptimized named sequence in class 3 # TODO sharp S in class");
    ok("\N{LATIN SMALL LETTER SHARP S}" =~ m/[\N{LATIN SMALL LETTER SHARP S}x]/i,
        "unoptimized named sequence in class 4 # TODO sharp S in clas");
    
    ok('aabc' !~ m/a\N{PLUS SIGN}b/,'/a\N{PLUS SIGN}b/ against aabc');
    ok('a+bc' =~ m/a\N{PLUS SIGN}b/,'/a\N{PLUS SIGN}b/ against a+bc');
    ok('a+bc' =~ m/a\N{PLUS SIGN}b/,'/a\N{PLUS SIGN}b/ against a+bc');

    ok(' A B'=~m/\N{SPACE}\N{U+0041}\N{SPACE}\N{U+0042}/,
        'Intermixed named and unicode escapes 1');
    ok("\N{SPACE}\N{U+0041}\N{SPACE}\N{U+0042}"=~
       m/\N{SPACE}\N{U+0041}\N{SPACE}\N{U+0042}/,
        'Intermixed named and unicode escapes 2');
    ok("\N{SPACE}\N{U+0041}\N{SPACE}\N{U+0042} 3"=~
       m/[\N{SPACE}\N{U+0041}][\N{SPACE}\N{U+0042}]/,
        'Intermixed named and unicode escapes');     
}
$brackets = qr{
	         {  (?> [^{}]+ | (??{ $brackets }) )* }
	      }x;
ok("\{b\{c\}d" !~ m/^((??{ $brackets }))/, "bracket mismatch");

SKIP:{
    our @stack=();
    my @expect=qw(
        stuff1
        stuff2
        <stuff1>and<stuff2>
        right
        <right>
        <<right>>
        <<<right>>>
        <<stuff1>and<stuff2>><<<<right>>>>
    );

    local $_='<<<stuff1>and<stuff2>><<<<right>>>>>';
    ok(m/^(<((?:(?>[^<>]+)|(?1))*)>(?{push @stack, $2 }))$/,
        "Recursion should match");
    ok(@stack==@expect)
        or skip("Won't test individual results as count isn't equal",
                0+@expect);
    foreach my $idx (@expect) {
        ok(@expect[$idx] eq @stack[$idx], 
            "Expecting '$expect' at stack pos #$idx");
    }
        
}
{
    my $s='123453456';
    $s=~s/(?<digits>\d+)\k<digits>/%+{digits}/;
    ok($s eq '123456','Named capture (angle brackets) s///');
    $s='123453456';
    $s=~s/(?'digits'\d+)\k'digits'/%+{digits}/;
    ok($s eq '123456','Named capture (single quotes) s///');    
}

{
    my @ary = (
	pack('U', 0x00F1),            # n-tilde
	'_'.pack('U', 0x00F1),        # _ + n-tilde
	'c'.pack('U', 0x0327),        # c + cedilla
	pack('U*', 0x00F1, 0x0327),   # n-tilde + cedilla
	'a'.pack('U', 0x00B2),        # a + superscript two
	pack('U', 0x0391),            # ALPHA
	pack('U', 0x0391).'2',        # ALPHA + 2
	pack('U', 0x0391).'_',        # ALPHA + _
    );
    for my $uni (@ary) {
	my ($r1, $c1, $r2, $c2) = eval qq{
	    use utf8;
	    scalar("..foo foo.." =~ m/(?'{$uni}'foo) \\k'{$uni}'/),
		\%+\{{$uni}\},
	    scalar("..bar bar.." =~ m/(?<{$uni}>bar) \\k<{$uni}>/),
		\%+\{{$uni}\};
	};
	ok($r1,                         "Named capture UTF (?'')");
	ok(defined $c1 && $c1 eq 'foo', "Named capture UTF \%+");
	ok($r2,                         "Named capture UTF (?<>)");
	ok(defined $c2 && $c2 eq 'bar', "Named capture UTF \%+");
    }
}

sub iseq($$;$) { 
    my ( $got, $expect, $name)=@_;
    my $todo = $TODO ? " # TODO $TODO" : '';
    
    $_=defined($_) ? "'$_'" : "undef"
        for $got, $expect;
        
    my $ok=  $got eq $expect;
        
    printf "\%sok \%d - \%s$todo\n", ($ok ? "" : "not "), $test,
        ($name||$Message)."\tLine ".((caller)[[2]]);

    no warnings 'utf8';
    printf "# Failed test at line \%d\n".
           "# expected: \%s\n". 
           "#   result: \%s\n", 
           (caller)[[2]], $expect, $got
        unless $ok;

    $test++;
    return $ok;
}   
{
    my $s='foo bar baz';
    my (@k,@v,@fetch,$res);
    my $count= 0;
    my @names=qw($+{A} $+{B} $+{C});
    if ($s=~m/(?<A>foo)\s+(?<B>bar)?\s+(?<C>baz)/) {
        while (my ($k,$v)=each(%+)) {
            $count++;
        }
        @k=sort keys(%+);
        @v=sort values(%+);
        $res=1;
        push @fetch,
            \@( "%+{A}", "$1" ),
            \@( "%+{B}", "$2" ),
            \@( "%+{C}", "$3" ),
        ;
    } 
    foreach (0..2) {
        if (@fetch[$_]) {
            iseq(@fetch[$_][0],@fetch[$_][1],@names[$_]);
        } else {
            ok(0, @names[$_]);
        }
    }
    iseq($res,1,"$s~=/(?<A>foo)\s+(?<B>bar)?\s+(?<C>baz)/");
    iseq($count,3,"Got 3 keys in \%+ via each");
    iseq(0+@k, 3, 'Got 3 keys in %+ via keys');
    iseq("@k","A B C", "Got expected keys");
    iseq("@v","bar baz foo", "Got expected values");
    eval'
        print for %+{this_key_doesnt_exist};
    ';
    ok(!$@,'lvalue %+{...} should not throw an exception');
}
{
    #
    # Almost the same as the block above, except that the capture is nested.
    #
    my $s = 'foo bar baz';
    my (@k,@v,@fetch,$res);
    my $count = 0;
    my @names = qw(%+{A} %+{B} %+{C} %+{D});
    if ($s =~ m/(?<D>(?<A>foo)\s+(?<B>bar)?\s+(?<C>baz))/) {
	while (my ($k,$v) = each(%+)) {
	    $count++;
	}
	@k = sort keys(%+);
	@v = sort values(%+);
	$res = 1;
	push @fetch,
	    \@( "%+{A}", "$2" ),
	    \@( "%+{B}", "$3" ),
	    \@( "%+{C}", "$4" ),
	    \@( "%+{D}", $1 ),
	;
    }
    foreach (0..3) {
	if (@fetch[$_]) {
	    iseq(@fetch[$_][0],@fetch[$_][1],@names[$_]);
	} else {
	    ok(0, @names[$_]);
	}
    }
    iseq($res,1,"$s~=m/(?<D>(?<A>foo)\s+(?<B>bar)?\s+(?<C>baz))/");
    iseq($count,4,"Got 4 keys in \%+ via each -- bug 50496");
    iseq(0+@k, 4, 'Got 4 keys in %+ via keys -- bug 50496');
    iseq("@k","A B C D", "Got expected keys -- bug 50496");
    iseq("@v","bar baz foo foo bar baz", "Got expected values -- bug = 50496");
    eval'
	print for %+{this_key_doesnt_exist};
    ';
    ok(!$@,'lvalue %+{...} should not throw an exception');
}
{
    my $s='foo bar baz';
    my @res;
    if ('1234'=~m/(?<A>1)(?<B>2)(?<A>3)(?<B>4)/) {
        foreach my $name (sort keys(%-)) {
            my $ary = %-{$name};
            foreach my $idx (0..@$ary-1) {
                push @res,"$name:$idx:$ary->[$idx]";
            }
        }
    }
    my @expect=qw(A:0:1 A:1:3 B:0:2 B:1:4);
    iseq("@res","@expect","Check \%-");
    eval'
        print for %-{this_key_doesnt_exist};
    ';
    ok(!$@,'lvalue %-{...} should not throw an exception');
}
# stress test CURLYX/WHILEM.
#
# This test includes varying levels of nesting, and according to
# profiling done against build 28905, exercises every code line in the
# CURLYX and WHILEM blocks, except those related to LONGJMP, the
# super-linear cache and warnings. It executes about 0.5M regexes

if (%ENV{PERL_SKIP_PSYCHO_TEST}){
  printf "ok \%d Skip: No psycho tests\n", $test++;
} else {    
  print "# set PERL_SKIP_PSYCHO_TEST to skip this test\n";
  my $r = qr/^
  	    (?:
  		( (?:a|z+)+ )
  		(?:
  		    ( (?:b|z+){3,}? )
  		    (
  			(?:
  			    (?:
				(?:c|z+){1,1}?z
			    )?
  			    (?:c|z+){1,1}
  			)*
  		    )
  		    (?:z*){2,}
  		    ( (?:z+|d)+ )
  		    (?:
  			( (?:e|z+)+ )
  		    )*
  		    ( (?:f|z+)+ )
  		)*
  		( (?:z+|g)+ )
  		(?:
  		    ( (?:h|z+)+ )
  		)*
  		( (?:i|z+)+ )
  	    )+
  	    ( (?:j|z+)+ )
  	    (?:
  		( (?:k|z+)+ )
  	    )*
  	    ( (?:l|z+)+ )
  	$/x;
  
  
  my $ok = 1;
  my $msg = "CURLYX stress test";
  OUTER:
  for my $a ("x","a","aa") {
    for my $b ("x","bbb","bbbb") {
      my $bs = $a.$b;
      for my $c ("x","c","cc") {
        my $cs = $bs.$c;
        for my $d ("x","d","dd") {
          my $ds = $cs.$d;
          for my $e ("x","e","ee") {
            my $es = $ds.$e;
            for my $f ("x","f","ff") {
              my $fs = $es.$f;
              for my $g ("x","g","gg") {
                my $gs = $fs.$g;
                for my $h ("x","h","hh") {
                  my $hs = $gs.$h;
                  for my $i ("x","i","ii") {
                    my $is = $hs.$i;
                    for my $j ("x","j","jj") {
                      my $js = $is.$j;
                      for my $k ("x","k","kk") {
                        my $ks = $js.$k;
                        for my $l ("x","l","ll") {
                          my $ls = $ks.$l;
                          if ($ls =~ $r) {
                            if ($ls =~ m/x/) {
                              $msg .= ": unexpected match for [$ls]";
			      $ok = 0;
                              last OUTER;
                            }
                            my $cap = "$1$2$3$4$5$6$7$8$9$10$11$12";
                            unless ($ls eq $cap) {
                              $msg .= ": capture: [$ls], got [$cap]";
			      $ok = 0;
                              last OUTER;
                            }
                          }
                          else {
                            unless ($ls =~ m/x/) {
                              $msg = ": failed for [$ls]";
			      $ok = 0;
                              last OUTER;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  ok($ok, $msg);
}

# \, breaks {3,4}
ok("xaaay"    !~ m/xa{3\,4}y/, "\, in a pattern");
ok("xa\{3,4\}y" =~ m/xa{3\,4}y/, "\, in a pattern");

# \c\ followed by _
ok("x\c_y"    !~ m/x\c\_y/,    "\_ in a pattern");
ok("x\c\_y"   =~ m/x\c\_y/,    "\_ in a pattern");

# \c\ followed by other characters
for my $c ("z", "\0", "!", chr(254), chr(256)) {
    my $targ = "a\034$c";
    my $reg  = "a\\c\\$c";
    ok(eval("qq/$targ/ =~ m/$reg/"), "\\c\\ in pattern");
}

{
    my $str='abc'; 
    my $count=0;
    my $mval=0;
    my $pval=0;
    while ($str=~m/b/g) { $mval=@- -1; $pval=@+ -1; $count++ }
    iseq($mval,0,"\@- should be empty [RT#36046]");
    iseq($pval,0,"\@+ should be empty [RT#36046]");
    iseq($count,1,"should have matched once only [RT#36046]");
}

{   # Test the (*PRUNE) pattern
    our $count = 0;
    'aaab'=~m/a+b?(?{$count++})(*FAIL)/;
    iseq($count,9,"expect 9 for no (*PRUNE)");
    $count = 0;
    'aaab'=~m/a+b?(*PRUNE)(?{$count++})(*FAIL)/;
    iseq($count,3,"expect 3 with (*PRUNE)");
    local $_='aaab';
    $count=0;
    1 while m/.(*PRUNE)(?{$count++})(*FAIL)/g;
    iseq($count,4,"/.(*PRUNE)/");
    $count = 0;
    'aaab'=~m/a+b?(??{'(*PRUNE)'})(?{$count++})(*FAIL)/;
    iseq($count,3,"expect 3 with (*PRUNE)");
    local $_='aaab';
    $count=0;
    1 while m/.(??{'(*PRUNE)'})(?{$count++})(*FAIL)/g;
    iseq($count,4,"/.(*PRUNE)/");
}
{   # Test the (*SKIP) pattern
    our $count = 0;
    'aaab'=~m/a+b?(*SKIP)(?{$count++})(*FAIL)/;
    iseq($count,1,"expect 1 with (*SKIP)");
    local $_='aaab';
    $count=0;
    1 while m/.(*SKIP)(?{$count++})(*FAIL)/g;
    iseq($count,4,"/.(*SKIP)/");
    $_='aaabaaab';
    $count=0;
    our @res=();
    1 while m/(a+b?)(*SKIP)(?{$count++; push @res,$1})(*FAIL)/g;
    iseq($count,2,"Expect 2 with (*SKIP)" );
    iseq("@res","aaab aaab","adjacent (*SKIP) works as expected" );
}
{   # Test the (*SKIP) pattern
    our $count = 0;
    'aaab'=~m/a+b?(*MARK:foo)(*SKIP)(?{$count++})(*FAIL)/;
    iseq($count,1,"expect 1 with (*SKIP)");
    local $_='aaab';
    $count=0;
    1 while m/.(*MARK:foo)(*SKIP)(?{$count++})(*FAIL)/g;
    iseq($count,4,"/.(*SKIP)/");
    $_='aaabaaab';
    $count=0;
    our @res=();
    1 while m/(a+b?)(*MARK:foo)(*SKIP)(?{$count++; push @res,$1})(*FAIL)/g;
    iseq($count,2,"Expect 2 with (*SKIP)" );
    iseq("@res","aaab aaab","adjacent (*SKIP) works as expected" );
}
{   # Test the (*SKIP) pattern
    our $count = 0;
    'aaab'=~m/a*(*MARK:a)b?(*MARK:b)(*SKIP:a)(?{$count++})(*FAIL)/;
    iseq($count,3,"expect 3 with *MARK:a)b?(*MARK:b)(*SKIP:a)");
    local $_='aaabaaab';
    $count=0;
    our @res=();
    1 while m/(a*(*MARK:a)b?)(*MARK:x)(*SKIP:a)(?{$count++; push @res,$1})(*FAIL)/g;
    iseq($count,5,"Expect 5 with (*MARK:a)b?)(*MARK:x)(*SKIP:a)" );
    iseq("@res","aaab b aaab b ","adjacent (*MARK:a)b?)(*MARK:x)(*SKIP:a) works as expected" );
}
{   # Test the (*COMMIT) pattern
    our $count = 0;
    'aaabaaab'=~m/a+b?(*COMMIT)(?{$count++})(*FAIL)/;
    iseq($count,1,"expect 1 with (*COMMIT)");
    local $_='aaab';
    $count=0;
    1 while m/.(*COMMIT)(?{$count++})(*FAIL)/g;
    iseq($count,1,"/.(*COMMIT)/");
    $_='aaabaaab';
    $count=0;
    our @res=();
    1 while m/(a+b?)(*COMMIT)(?{$count++; push @res,$1})(*FAIL)/g;
    iseq($count,1,"Expect 1 with (*COMMIT)" );
    iseq("@res","aaab","adjacent (*COMMIT) works as expected" );
}
{
    # Test named commits and the $REGERROR var
    our $REGERROR;
    for my $name ('',':foo') 
    {
        for my $pat ("(*PRUNE$name)",
                     ($name? "(*MARK$name)" : "")
                     . "(*SKIP$name)",
                     "(*COMMIT$name)")
        {                         
            for my $suffix ('(*FAIL)','') 
            {
                'aaaab'=~m/a+b$pat$suffix/;
                iseq(
                    $REGERROR,
                    ($suffix ? ($name ? 'foo' : "1") : ""),
                    "Test $pat and \$REGERROR $suffix"
                );
            }
        }
    }      
}    
{
    # Test named commits and the $REGERROR var
    package Fnorble;
    our $REGERROR;
    for my $name ('',':foo') 
    {
        for my $pat ("(*PRUNE$name)",
                     ($name? "(*MARK$name)" : "")
                     . "(*SKIP$name)",
                     "(*COMMIT$name)")
        {                         
            for my $suffix ('(*FAIL)','') 
            {
                'aaaab'=~m/a+b$pat$suffix/;
                ::iseq(
                    $REGERROR,
                    ($suffix ? ($name ? 'foo' : "1") : ""),
                    "Test $pat and \$REGERROR $suffix"
                );
            }
        }
    }      
}    
{
    # Test named commits and the $REGERROR var
    local $Message = "\$REGERROR";
    our $REGERROR;
    for $word (qw(bar baz bop)) {
        $REGERROR="";
        "aaaaa$word"=~m/a+(?:bar(*COMMIT:bar)|baz(*COMMIT:baz)|bop(*COMMIT:bop))(*FAIL)/;
        iseq($REGERROR,$word);
    }    
}
{   #Regression test for perlbug 40684
    local $Message = "RT#40684 tests:";
    my $s = "abc\ndef";
    my $rex = qr'^abc$'m;
    ok($s =~ m/$rex/);
    ok($s =~ m/^abc$/m);
}
{
    #Mindnumbingly simple test of (*THEN)
    for ("ABC","BAX") {
        ok(m/A (*THEN) X | B (*THEN) C/x,"Simple (*THEN) test");
    }
}

{
    local $Message = "Relative Recursion";
    my $parens=qr/(\((?:[^()]++|(?-1))*+\))/;
    local $_='foo((2*3)+4-3) + bar(2*(3+4)-1*(2-3))';
    my ($all,$one,$two)=('','','');
    if (m/foo $parens \s* \+ \s* bar $parens/x) {
       $all=$&;
       $one=$1;
       $two=$2;
    }
    iseq($one, '((2*3)+4-3)');
    iseq($two, '(2*(3+4)-1*(2-3))');
    iseq($all, 'foo((2*3)+4-3) + bar(2*(3+4)-1*(2-3))');
    iseq($all, $_);
}
{
    my $spaces="      ";
    local $_=join 'bar',$spaces,$spaces;
    our $count=0;
    s/(?>\s+bar)(?{$count++})//g;
    iseq($_,$spaces,"SUSPEND final string");
    iseq($count,1,"Optimiser should have prevented more than one match");
}
{
    local $Message = "RT#36909 test";
    $^R = 'Nothing';
    {
        local $^R = "Bad";
        ok('x foofoo y' =~ m{
         (foo) # $^R correctly set
        (?{ "last regexp code result" })
        }x);
        iseq($^R,'last regexp code result');
    }
    iseq($^R,'Nothing');
    {
        local $^R = "Bad";

        ok('x foofoo y' =~ m{
         (?:foo|bar)+ # $^R correctly set
        (?{"last regexp code result"})
        }x);
        iseq($^R,'last regexp code result');
    }
    iseq($^R,'Nothing');

    {
        local $^R = "Bad";
        ok('x foofoo y' =~ m{
         (foo|bar)\1+ # $^R undefined
        (?{"last regexp code result"})
        }x);
        iseq($^R,'last regexp code result');
    }
    iseq($^R,'Nothing');

    {
        local $^R = "Bad";
        ok('x foofoo y' =~ m{
         (foo|bar)\1 # this time without the +
        (?{"last regexp code result"})
        }x);
        iseq($^R,'last regexp code result');
    }
    iseq($^R,'Nothing');
}
{
    local $Message="RT 22395";
    local $TODO = "Should be L+1 not L*(L+3)/2 (L=$l)";
    our $count;
    for my $l (10,100,1000) {
	$count=0;
	('a' x $l) =~ m/(.*)(?{$count++})[bc]/;
	iseq( $count, $l + 1);
    }
}
{
    local $Message = "RT#22614";
    local $_='ab';
    our @len=();
    m/(.){1,}(?{push @len,0+@-})(.){1,}(?{})^/;
    iseq("@len","2 2 2");
}
{
    local $Message = "RT#18209";
    my $text = ' word1 word2 word3 word4 word5 word6 ';

    my @words = ('word1', 'word3', 'word5');
    my $count;
    foreach my $word (@words){
        $text =~ s/$word\s//gi; # Leave a space to seperate words in the resultant str.
        # The following block is not working.
        if($&){
            $count++;
        }
        # End bad block
    }
    iseq($count,3);
    iseq($text,' word2 word4 word6 ');
}
{
    # RT#6893
    local $_= qq(A\nB\nC\n); 
    my @res;
    while (m#(\G|\n)([^\n]*)\n#gsx) 
    { 
        push @res,"$2"; 
        last if @res+>3;
    }
    iseq("@res","A B C","RT#6893: /g pattern shouldn't infinite loop");
}

{
    # From Message-ID: <877ixs6oa6.fsf@k75.linux.bogus>
    my $dow_name= "nada";
    my $parser = "use utf8; (\$dow_name) = \$time_string =~ m/(D\x{e9}\\ C\x{e9}adaoin|D\x{e9}\\ Sathairn|\\w+|\x{100})/;";
    my $time_string = "D\x{e9} C\x{e9}adaoin";
    eval $parser;
    ok(!$@,"Test Eval worked");
    iseq($dow_name,$time_string,"UTF8 trie common prefix extraction");
}

{
    my $v;
    ($v='bar')=~m/(\w+)/g;
    $v='foo';
    iseq("$1",'bar','$1 is safe after /g - may fail due to specialized config in pp_hot.c')
}
{
    local $Message = "http://nntp.perl.org/group/perl.perl5.porters/118663";
    my $qr_barR1 = qr/(bar)\g-1/;
    ok("foobarbarxyz" =~ $qr_barR1);
    ok("foobarbarxyz" =~ qr/foo$qr_barR1xyz/);
    ok("foobarbarxyz" =~ qr/(foo)$qr_barR1xyz/);
    ok("foobarbarxyz" =~ qr/(foo)(bar)\g{-1}xyz/);
    ok("foobarbarxyz" =~ qr/(foo$qr_barR1)xyz/);
    ok("foobarbarxyz" =~ qr/(foo(bar)\g{-1})xyz/);
} 
{
    local $Message = "RT#41010";
    my @tails=('','(?(1))','(|)','()?');    
    my @quants=('*','+');
    my $doit=sub {
        my $pats= shift;
        for (@_) {
            for my $pat (@$pats) {
                for my $quant (@quants) {
                    for my $tail (@tails) {
                        my $re = "($pat$quant\$)$tail";
                        ok(m/$re/ && $1 eq $_,"'$_'=~m/$re/");
                        ok(m/$re/m && $1 eq $_,"'$_'=~m/$re/m");
                    }
                }
            }
       }
    };    
    
    my @dpats=( 
                '\d',
                '[1234567890]',
                '(1|[23]|4|[56]|[78]|[90])',
                '(?:1|[23]|4|[56]|[78]|[90])',
                '(1|2|3|4|5|6|7|8|9|0)',
                '(?:1|2|3|4|5|6|7|8|9|0)',
             );
    my @spats=('[ ]',' ','( |\t)','(?: |\t)','[ \t]','\s');
    my @sstrs=('  ');
    my @dstrs=('12345');
    $doit->(\@spats,@sstrs);
    $doit->(\@dpats,@dstrs);
}

{
    local $Message = "\$REGMARK";
    our @r=();
    ok('foofoo' =~ m/foo (*MARK:foo) (?{push @r,$REGMARK}) /x);
    iseq("@r","foo");           
    iseq($REGMARK,"foo");
    ok('foofoo' !~ m/foo (*MARK:foo) (*FAIL) /x);
    ok(!$REGMARK);
    iseq($REGERROR,'foo');
}
{
    my $x;
    $x = "abc.def.ghi.jkl";
    $x =~ s/.*\K\..*//;
    ok($x eq "abc.def.ghi");
    
    $x = "one two three four";
    $x =~ s/o+ \Kthree//g;
    ok($x eq "one two  four");
    
    $x = "abcde";
    $x =~ s/(.)\K/$1/g;
    ok($x eq "aabbccddee");
}
sub kt
{
    return '4' if @_[0] eq '09028623';
}

{
    use bytes;

    # ANYOF tests

    for (\@(qw|\w aA #@!|),
         \@(qw|[abc] abc def|),
         \@(qw|[^abc] def abc|),
         \@(qw|[[:word:]] abc #@!|),
         \@(qw|[[:^word:]] #@! abc|),
        ) {
        my $m = shift @$_;
        my ($s, $f) = map { \@(split m/ */) } @$_;
        ok(m/$m/, " $m basic match") for @$s;
        ok(not m/$m/) for @$f;
        ok(m/^$m$/) for @$s;
        ok(not m/^$m$/) for @$f;
        ok("xxxx$_" =~ m/^.*$m$/) for @$s;
        ok("xxxx$_" !~ m/^.*$m$/) for @$f;
    }
}

{   # Nested EVAL using PL_curpm (via $1 or friends)
    my $re;
    our $grabit = qr/ ([0-6][0-9]{7}) (??{ kt $1 }) [890] /x;
    $re = qr/^ ( (??{ $grabit }) ) $ /x;
    my @res = '0902862349' =~ $re;
    iseq(join("-",@res),"0902862349",
        'PL_curpm is set properly on nested eval');

    our $qr = qr/ (o) (??{ $1 }) /x;
    ok( 'boob'=~m/( b (??{ $qr }) b )/x && 1,
        "PL_curpm, nested eval");
}

{
    use charnames ":full";
    ok("\N{ROMAN NUMERAL ONE}" =~ m/\p{Alphabetic}/, "I =~ Alphabetic");
    ok("\N{ROMAN NUMERAL ONE}" =~ m/\p{Uppercase}/,  "I =~ Uppercase");
    ok("\N{ROMAN NUMERAL ONE}" !~ m/\p{Lowercase}/,  "I !~ Lowercase");
    ok("\N{ROMAN NUMERAL ONE}" =~ m/\p{IDStart}/,    "I =~ ID_Start");
    ok("\N{ROMAN NUMERAL ONE}" =~ m/\p{IDContinue}/, "I =~ ID_Continue");
    ok("\N{SMALL ROMAN NUMERAL ONE}" =~ m/\p{Alphabetic}/, "i =~ Alphabetic");
    ok("\N{SMALL ROMAN NUMERAL ONE}" !~ m/\p{Uppercase}/,  "i !~ Uppercase");
    ok("\N{SMALL ROMAN NUMERAL ONE}" =~ m/\p{Lowercase}/,  "i =~ Lowercase");
    ok("\N{SMALL ROMAN NUMERAL ONE}" =~ m/\p{IDStart}/,    "i =~ ID_Start");
    ok("\N{SMALL ROMAN NUMERAL ONE}" =~ m/\p{IDContinue}/, "i =~ ID_Continue");
}

{
# requirement of Unicode Technical Standard #18, 1.7 Code Points
# cf. http://www.unicode.org/reports/tr18/#Supplementary_Characters
    for my $u (0x7FF, 0x800, 0xFFFF, 0x10000) {
        no warnings 'utf8'; # oops
        my $c = chr $u;
        my $x = sprintf '%04X', $u;
        ok( "A{$c}B" =~ m/A[\0-\x{10000}]B/, "unicode range - $x");
    }
}

{
    my $res="";

    if ('1' =~ m/(?|(?<digit>1)|(?<digit>2))/) {
      $res = "@{%- {digit}}";
    }
    iseq($res,"1",
        "Check that (?|...) doesnt cause dupe entries in the names array");
    #---
    $res="";
    if ('11' =~ m/(?|(?<digit>1)|(?<digit>2))(?&digit)/) {
      $res = "@{%- {digit}}";
    }
    iseq($res, "1",
        "Check that (?&..) to a buffer inside a (?|...) goes to the leftmost");
}

{
    use warnings;
    local $Message = "ASCII pattern that really is utf8";
    my @w;
    local $^WARN_HOOK=sub{push @w,"@_"};
    my $c=qq(\x{DF}); 
    ok($c=~m/$c|\x{100}/);
    ok(@w==0);
}    
{
    local $Message = "corruption of match results of qr// across scopes";
    my $qr=qr/(fo+)(ba+r)/;
    'foobar'=~m/$qr/;
    iseq("$1$2","foobar");
    {
        'foooooobaaaaar'=~m/$qr/;
        iseq("$1$2",'foooooobaaaaar');    
    }
    iseq("$1$2","foobar");
}
{
    local $Message = "HORIZWS";
    local $_="\t \r\n \n \t".chr(11)."\n";
    s/\H/H/g;
    s/\h/h/g;
    iseq($_,"\t \r\n \n \t".chr(11)."\n");
    $_="\t \r\n \n \t".chr(11)."\n";
}
{
    local $Message = "Various whitespace special patterns";
    my @lb=( "\x{0D}\x{0A}",
             map { chr( $_ ) } ( 0x0A..0x0D,0x85,0x2028,0x2029 ));
    foreach my $t (\@(\@lb,qr/\R/,qr/\R+/),){
        my $ary=shift @$t;
        foreach my $pat (@$t) {
            foreach my $str (@$ary) {
                ok($str=~m/($pat)/,$pat);
                iseq($1,$str,$pat);
            }
        }
    }
}
{
    local $Message = "Check that \\xDF match properly in its various forms";
    # test that \xDF matches properly. this is pretty hacky stuff,
    # but its actually needed. the malarky with '-' is to prevent
    # compilation caching from playing any role in the test.
    my @df= (chr(0xDF),'-',chr(0xDF));
    my @strs= ('ss','sS','Ss','SS',chr(0xDF));
    my @ss= @strs;

    for my $ssi (0..@ss-1) {
        for my $dfi (0..@df-1) {
            my $pat= @df[$dfi];
            my $str= @ss[$ssi];
            (my $sstr=$str)=~s/\x{DF}/\\x\{DF\}/;

            my $ret= $str=~m/$pat/i;
            next if $pat eq '-';
            ok($ret,
               "\"$sstr\"=~m/\\x\{DF\}/i # TODO multi-char folding");
        }
    }
}
{
    use bytes;
    local $Message = "BBC(Bleadperl Breaks CPAN) Today: String::Multibyte";
    my $re  = qr/(?:[\x[00]-\x[FF]]{4})/;
    my $hyp = "\0\0\0-";
    my $esc = "\0\0\0\\";

    my $str = "$esc$hyp$hyp$esc$esc";
    my @a = ($str =~ m/\G(?:\Q$esc$esc\E|\Q$esc$hyp\E|$re)/g);

    iseq(0+@a,3);
    iseq(join('=', @a),"$esc$hyp=$hyp=$esc$esc");
}
# test for keys in %+ and %-
{
    my $_ = "abcdef";
    m/(?<foo>a)|(?<foo>b)/;
    iseq( (join ",", sort keys %+), "foo" );
    iseq( (join ",", sort keys %-), "foo" );
    iseq( (join ",", sort values %+), "a" );
    iseq( (join ",", sort map "@$_", values %-), "a " );
    m/(?<bar>a)(?<bar>b)(?<quux>.)/;
    iseq( (join ",", sort keys %+), "bar,quux" );
    iseq( (join ",", sort keys %-), "bar,quux" );
    iseq( (join ",", sort values %+), "a,c" ); # leftmost
    iseq( (join ",", sort map "@$_", values %-), "a b,c" );
    m/(?<un>a)(?<deux>c)?/; # second buffer won't capture
    iseq( (join ",", sort keys %+), "un" );
    iseq( (join ",", sort keys %-), "deux,un" );
    iseq( (join ",", sort values %+), "a" );
    iseq( (join ",", sort map "@$_", values %-), ",a" );
}

# length() on captures, the numbered ones end up in Perl_magic_len
{
    my $_ = "aoeu \x{e6}var ook";
    m/^ \w+ \s (?<eek>\S+)/x;

    iseq( length($`), 0, 'length $`' );
    iseq( length($'), 4, q[length $'] );
    iseq( length($&), 9, 'length $&' );
    iseq( length($1), 4, 'length $1' );
    iseq( length(%+{eek}), 4, 'length $+{eek} == length $1' );
}

{
    my $ok=-1;

    $ok=exists(%-{x}) ? 1 : 0
        if 'bar'=~m/(?<x>foo)|bar/;
    iseq($ok,1,'$-{x} exists after "bar"=~m/(?<x>foo)|bar/');
    iseq(scalar(%+), 0, 'scalar %+ == 0 after "bar"=~m/(?<x>foo)|bar/');
    iseq(scalar(%-), 1, 'scalar %- == 1 after "bar"=~m/(?<x>foo)|bar/');

    $ok=-1;
    $ok=exists(%+{x}) ? 1 : 0
        if 'bar'=~m/(?<x>foo)|bar/;
    iseq($ok,0,'$+{x} not exists after "bar"=~m/(?<x>foo)|bar/');
    iseq(scalar(%+), 0, 'scalar %+ == 0 after "bar"=~m/(?<x>foo)|bar/');
    iseq(scalar(%-), 1, 'scalar %- == 1 after "bar"=~m/(?<x>foo)|bar/');

    $ok=-1;
    $ok=exists(%-{x}) ? 1 : 0
        if 'foo'=~m/(?<x>foo)|bar/;
    iseq($ok,1,'$-{x} exists after "foo"=~m/(?<x>foo)|bar/');
    iseq(scalar(%+), 1, 'scalar %+ == 1 after "foo"=~m/(?<x>foo)|bar/');
    iseq(scalar(%-), 1, 'scalar %- == 1 after "foo"=~m/(?<x>foo)|bar/');

    $ok=-1;
    $ok=exists(%+{x}) ? 1 : 0
        if 'foo'=~m/(?<x>foo)|bar/;
    iseq($ok,1,'$+{x} exists after "foo"=~m/(?<x>foo)|bar/');
}
{
    local $_;
    ($_ = 'abc')=~m/(abc)/g;
    $_ = '123'; 
    iseq("$1",'abc',"/g leads to unsafe match vars: $1");
}
{
    local $Message="Message-ID: <20070818091501.7eff4831@r2d2>";
    my $str= "";
    for(0..5){
        my @x;
        $str .= "@x"; # this should ALWAYS be the empty string
        'a'=~m/(a|)/;
        push @x,1;
    }
    iseq(length($str),"0","Trie scope error, string should be empty");
    $str="";
    my @foo = ('a')x5;
    for (@foo) {
        my @bar;
        $str .= "@bar";
        s/a|/{push @bar, 1}/;
    }
    iseq(length($str),"0","Trie scope error, string should be empty");
}

{
    my $a = 3; "" =~ m/(??{ $a })/;
    my $b = $a;
    iseq($b, $a, "copy of scalar used for postponed subexpression");
}
{
     local $Message = "\$REGMARK in replacement -- Bug #49190";
     my $_ = "A";
     s/(*:B)A/$REGMARK/;
     iseq $_, "B";
     $_ = "CCCCBAA";
     s/(*:X)A+|(*:Y)B+|(*:Z)C+/$REGMARK/g;
     iseq $_, "ZYX";
}
{
    our @ctl_n=();
    our @plus=();
    our $nested_tags;
    $nested_tags = qr{
        <
           (\w+)
           (?{
                   push @ctl_n,$^N;
                   push @plus,$+;
           })
        >
        (??{$nested_tags})*
        </\s* \w+ \s*>
    }x;

    my $match= '<bla><blubb></blubb></bla>' =~ m/^$nested_tags$/;
    ok($match,'nested construct matches');
    iseq("@ctl_n","bla blubb",'$^N inside of (?{}) works as expected');
    iseq("@plus","bla blubb",'$+ inside of (?{}) works as expected');
}




# Test counter is at bottom of file. Put new tests above here.
#-------------------------------------------------------------------
# Keep the following tests last -- they may crash perl
{   
    # RT#19049 / RT#38869
    my @list = (
        'ab cdef', # matches regex
        ( 'e' x 40000 ) .'ab c' # matches not, but 'ab c' matches part of it
    );
    my $y;
    my $x;
    foreach (@list) {
        m/ab(.+)cd/i; # the ignore-case seems to be important
        $y = $1; # use $1, which might not be from the last match!
        $x = substr(@list[0],@-[0],@+[0]-@-[0]);
    }
    iseq($y,' ',
        'pattern in a loop, failure should not affect previous success');
    iseq($x,'ab cd',
        'pattern in a loop, failure should not affect previous success');
}

ok(("a" x (2**15 - 10)) =~ m/^()(a|bb)*$/, "Recursive stack cracker: #24274")
    or print "# Unexpected outcome: should pass or crash perl\n";

ok((q(a)x 100) =~ m/^(??{'(.)'x 100})/, 
        "Regexp /^(??\{'(.)'x 100\})/ crashes older perls")
    or print "# Unexpected outcome: should pass or crash perl\n";

eval 'm/\k/';
ok($@->{description}=~m/\QSequence \k... not terminated in regex;\E/);

{
    use bytes;
    local $Message = "substitution with lookahead (possible segv)";
    $_="ns1ns1ns1";
    s/ns(?=\d)/ns_/g;
    iseq($_,"ns_1ns_1ns_1");
    $_="ns1";
    s/ns(?=\d)/ns_/;
    iseq($_,"ns_1");
    $_="123";
    s/(?=\d+)|(?<=\d)/!Bang!/g;
    iseq($_,"!Bang!1!Bang!2!Bang!3!Bang!");
}

# [perl #45337] utf8 + "[a]a{2}" + /$.../ = panic: sv_len_utf8 cache

{
    local $^UTF8CACHE = -1;
    use utf8;
    my $s="[a]a\{2\}";
    ok("aaa" =~ m/$s/, "#45337");
}

# Put new tests above the dotted line about a page above this comment
iseq(0+$::test,$::TestCount,"Got the right number of tests!");

} # end of sub pat_tests

# Don't forget to update this!
BEGIN {
    $::TestCount = 1796;
    print "1..$::TestCount\n";
}

"Truth";
