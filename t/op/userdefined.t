#!./perl

BEGIN { require './test.pl'; }
BEGIN { plan( tests => 23 ); }

# create a user defined functions.
# basic test that is called the correct number of times.

our $foo_called;
BEGIN {
    # define 'function' foo, which only executes it first argument.
    # i.e. the opcode tree generated by foo($arg1, ...) is something like as ($arg1, ...)
#     $^H{'functions'} = {
#                         foo => sub { $foo_called++; return $_[0] },
#                        };
#    $^H{'foo'} = sub { die };
#     warn join '*', @{$^H{'foo'}};
#     Internals::peek(\($^H{'foo'}));
#     Internals::peek(\($^H{'xfoo'}));
    #Internals::peek(\(my $x = $^H{'foo'}));
}

# BEGIN { is $foo_called, 0; }

sub bla {
    my @x = caller(1);
    warn join '**', @x;
    Internals::peek(\$x[10]);
    warn $x[10]->{'foo'};
    $x[10]->{'foo'} = sub { die "blaat"};
}

BEGIN { bla() };
BEGIN { bla() };
#BEGIN {    Internals::peek(\($^H{'foo'})); }
sub bar { foo(); }
BEGIN { bla() };
die;
# BEGIN { is $foo_called, 1; }
