#!./perl

BEGIN { require './test.pl'; }
BEGIN { plan( tests => 5 ); }

# create a user defined functions.
# basic test that is called the correct number of times.

BEGIN { our $foo_called = 0; }
BEGIN {
    # define 'function' foo, which only executes it first argument.
    # i.e. the opcode tree generated by foo $arg1, $arg2, ...  is something like as $arg1, $arg2, ...
    $^H{'comptfunc'} = {
                        foo => sub { $foo_called++; return $_[0] },
                       };
}

BEGIN { is $foo_called, 0; }
sub bar { foo }
BEGIN { is $foo_called, 1; }

is( (join '*', foo 1, 2), "1*2");

BEGIN { is $foo_called, 2; }

use B ();
use B::Generate ();

BEGIN {
    # fst $arg1, $arg2, ... evaluates only its first argument
    # this leaks the OP_LIST, and the remaining items in the listop
    $^H{'comptfunc'} = {
                        fst => sub { my $first = $_[0]->first->sibling;
                                     # remove $first from the list of children of $_[0]
                                     $_[0]->first->sibling($first->sibling);
                                     $_[0]->free; undef $_[0];
                                     # free the $_[0] opcode.
                                     return $first; },
                       };
}

$b = "oldb";
fst $a="newa", $b="notset";
is("$a-$b", "newa-oldb");
