=head1 NAME

perltodo - Perl TO-DO List

=head1 DESCRIPTION

This is a list of wishes for Perl. The tasks we think are smaller or easier
are listed first. Anyone is welcome to work on any of these, but it's a good
idea to first contact I<perl5-porters@perl.org> to avoid duplication of
effort. By all means contact a pumpking privately first if you prefer.

Whilst patches to make the list shorter are most welcome, ideas to add to
the list are also encouraged. Check the perl5-porters archives for past
ideas, and any discussion about them. One set of archives may be found at:

    http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/

What can we offer you in return? Fame, fortune, and everlasting glory? Maybe
not, but if your patch is incorporated, then we'll add your name to the
F<AUTHORS> file, which ships in the official distribution. How many other
programming languages offer you 1 line of immortality?

=head1 The roadmap to 5.10

The roadmap to 5.10 envisages feature based releases, as various items in this
TODO are completed.

=head2 Needed for a 5.9.4 release

=over

=item *

Review assertions. Review syntax to combine assertions. Assertions could take
advantage of the lexical pragmas work. L</What hooks would assertions need?>

=item *

C<encoding::warnings> should be turned into a lexical pragma.
C<encoding> should, too (probably).

=back

=head2 Needed for a 5.9.5 release

=over

=item *
Implement L</_ prototype character>

=item *
Implement L</state variables>

=back

=head2 Needed for a 5.9.6 release

Stabilisation. If all goes well, this will be the equivalent of a 5.10-beta.

=head1 Tasks that only need Perl knowledge

=head2 common test code for timed bail out

Write portable self destruct code for tests to stop them burning CPU in
infinite loops. This needs to avoid using alarm, as some of the tests are
testing alarm/sleep or timers.

=head2 POD -> HTML conversion in the core still sucks

Which is crazy given just how simple POD purports to be, and how simple HTML
can be. It's not actually I<as> simple as it sounds, particularly with the
flexibility POD allows for C<=item>, but it would be good to improve the
visual appeal of the HTML generated, and to avoid it having any validation
errors. See also L</make HTML install work>, as the layout of installation tree
is needed to improve the cross-linking.

The addition of C<Pod::Simple> and its related modules may make this task
easier to complete.

=head2 Parallel testing

The core regression test suite is getting ever more comprehensive, which has
the side effect that it takes longer to run. This isn't so good. Investigate
whether it would be feasible to give the harness script the B<option> of
running sets of tests in parallel. This would be useful for tests in
F<t/op/*.t> and F<t/uni/*.t> and maybe some sets of tests in F<lib/>.

Questions to answer

=over 4

=item 1

How does screen layout work when you're running more than one test?

=item 2

How does the caller of test specify how many tests to run in parallel?

=item 3

How do setup/teardown tests identify themselves?

=back

Pugs already does parallel testing - can their approach be re-used?

=head2 Make Schwern poorer

We should have for everything. When all the core's modules are tested,
Schwern has promised to donate to $500 to TPF. We may need volunteers to
hold him upside down and shake vigorously in order to actually extract the
cash.

See F<t/lib/1_compile.t> for the 3 remaining modules that need tests.

=head2 Improve the coverage of the core tests

Use Devel::Cover to ascertain the core's test coverage, then add tests that
are currently missing.

=head2 test B

A full test suite for the B module would be nice.

=head2 A decent benchmark

C<perlbench> seems impervious to any recent changes made to the perl core. It
would be useful to have a reasonable general benchmarking suite that roughly
represented what current perl programs do, and measurably reported whether
tweaks to the core improve, degrade or don't really affect performance, to
guide people attempting to optimise the guts of perl. Gisle would welcome
new tests for perlbench.

=head2 fix tainting bugs

Fix the bugs revealed by running the test suite with the C<-t> switch (via
C<make test.taintwarn>).

=head2 Dual life everything

As part of the "dists" plan, anything that doesn't belong in the smallest perl
distribution needs to be dual lifed. Anything else can be too. Figure out what
changes would be needed to package that module and its tests up for CPAN, and
do so. Test it with older perl releases, and fix the problems you find.

=head2 Improving C<threads::shared>

Investigate whether C<threads::shared> could share aggregates properly with
only Perl level changes to shared.pm

=head2 POSIX memory footprint

Ilya observed that use POSIX; eats memory like there's no tomorrow, and at
various times worked to cut it down. There is probably still fat to cut out -
for example POSIX passes Exporter some very memory hungry data structures.

=head2 embed.pl/makedef.pl

There is a script F<embed.pl> that generates several header files to prefix
all of Perl's symbols in a consistent way, to provide some semblance of
namespace support in C<C>. Functions are declared in F<embed.fnc>, variables
in F<interpvar.h> and F<thrdvar.h>. Quite a few of the functions and variables
are conditionally declared there, using C<#ifdef>. However, F<embed.pl>
doesn't understand the C macros, so the rules about which symbols are present
when is duplicated in F<makedef.pl>. Writing things twice is bad, m'kay.
It would be good to teach C<embed.pl> to understand the conditional
compilation, and hence remove the duplication, and the mistakes it has caused.






=head1 Tasks that need a little sysadmin-type knowledge

Or if you prefer, tasks that you would learn from, and broaden your skills
base...

=head2 make HTML install work

There is an C<installhtml> target in the Makefile. It's marked as
"experimental". It would be good to get this tested, make it work reliably, and
remove the "experimental" tag. This would include

=over 4

=item 1

Checking that cross linking between various parts of the documentation works.
In particular that links work between the modules (files with POD in F<lib/>)
and the core documentation (files in F<pod/>)

=item 2

Work out how to split C<perlfunc> into chunks, preferably one per function
group, preferably with general case code that could be used elsewhere.
Challenges here are correctly identifying the groups of functions that go
together, and making the right named external cross-links point to the right
page. Things to be aware of are C<-X>, groups such as C<getpwnam> to
C<endservent>, two or more C<=items> giving the different parameter lists, such
as

    =item substr EXPR,OFFSET,LENGTH,REPLACEMENT
    
    =item substr EXPR,OFFSET,LENGTH
    
    =item substr EXPR,OFFSET

and different parameter lists having different meanings. (eg C<select>)

=back

=head2 compressed man pages

Be able to install them. This would probably need a configure test to see how
the system does compressed man pages (same directory/different directory?
same filename/different filename), as well as tweaking the F<installman> script
to compress as necessary.

=head2 Add a code coverage target to the Makefile

Make it easy for anyone to run Devel::Cover on the core's tests. The steps
to do this manually are roughly

=over 4

=item *

do a normal C<Configure>, but include Devel::Cover as a module to install
(see F<INSTALL> for how to do this)

=item *

    make perl

=item *

    cd t; HARNESS_PERL_SWITCHES=-MDevel::Cover ./perl -I../lib harness

=item *

Process the resulting Devel::Cover database

=back

This just give you the coverage of the F<.pm>s. To also get the C level
coverage you need to

=over 4

=item *

Additionally tell C<Configure> to use the appropriate C compiler flags for
C<gcov>

=item *

    make perl.gcov

(instead of C<make perl>)

=item *

After running the tests run C<gcov> to generate all the F<.gcov> files.
(Including down in the subdirectories of F<ext/>

=item *

(From the top level perl directory) run C<gcov2perl> on all the C<.gcov> files
to get their stats into the cover_db directory.

=item *

Then process the Devel::Cover database

=back

It would be good to add a single switch to C<Configure> to specify that you
wanted to perform perl level coverage, and another to specify C level
coverage, and have C<Configure> and the F<Makefile> do all the right things
automatically.

=head2 Make Config.pm cope with differences between build and installed perl

Quite often vendors ship a perl binary compiled with their (pay-for)
compilers.  People install a free compiler, such as gcc. To work out how to
build extensions, Perl interrogates C<%Config>, so in this situation
C<%Config> describes compilers that aren't there, and extension building
fails. This forces people into choosing between re-compiling perl themselves
using the compiler they have, or only using modules that the vendor ships.

It would be good to find a way teach C<Config.pm> about the installation setup,
possibly involving probing at install time or later, so that the C<%Config> in
a binary distribution better describes the installed machine, when the
installed machine differs from the build machine in some significant way.

=head2 linker specification files

Some platforms mandate that you provide a list of a shared library's external
symbols to the linker, so the core already has the infrastructure in place to
do this for generating shared perl libraries. My understanding is that the
GNU toolchain can accept an optional linker specification file, and restrict
visibility just to symbols declared in that file. It would be good to extend
F<makedef.pl> to support this format, and to provide a means within
C<Configure> to enable it. This would allow Unix users to test that the
export list is correct, and to build a perl that does not pollute the global
namespace with private symbols.




=head1 Tasks that need a little C knowledge

These tasks would need a little C knowledge, but don't need any specific
background or experience with XS, or how the Perl interpreter works

=head2 Make it clear from -v if this is the exact official release

Currently perl from C<p4>/C<rsync> ships with a F<patchlevel.h> file that
usually defines one local patch, of the form "MAINT12345" or "RC1". The output
of perl -v doesn't report that a perl isn't an official release, and this
information can get lost in bugs reports. Because of this, the minor version
isn't bumped up until RC time, to minimise the possibility of versions of perl
escaping that believe themselves to be newer than they actually are.

It would be useful to find an elegant way to have the "this is an interim
maintenance release" or "this is a release candidate" in the terse -v output,
and have it so that it's easy for the pumpking to remove this just as the
release tarball is rolled up. This way the version pulled out of rsync would
always say "I'm a development release" and it would be safe to bump the
reported minor version as soon as a release ships, which would aid perl
developers.

This task is really about thinking of an elegant way to arrange the C source
such that it's trivial for the Pumpking to flag "this is an official release"
when making a tarball, yet leave the default source saying "I'm not the
official release".

=head2 Ordering of "global" variables.

F<thrdvar.h> and F<intrpvarh> define the "global" variables that need to be
per-thread under ithreads, where the variables are actually elements in a
structure. As C dictates, the variables must be laid out in order of
declaration. There is a comment
C</* Important ones in the first cache line (if alignment is done right) */>
which implies that at some point in the past the ordering was carefully chosen
(at least in part). However, it's clear that the ordering is less than perfect,
as currently there are things such as 7 C<bool>s in a row, then something
typically requiring 4 byte alignment, and then an odd C<bool> later on.
(C<bool>s are typically defined as C<char>s). So it would be good for someone
to review the ordering of the variables, to see how much alignment padding can
be removed.

It's also worth checking that all variables are actually used. Perl 5.8.0
shipped with C<PL_nrs> still defined in F<thrdvar.h>, despite it being unused
since a change over a year earlier. Had this been spotted before release, it
could have been removed, but now it has to remain in the 5.8.x releases to
keep the structure the same size, to retain binary compatibility.

It's probably worth checking if all need to be the types they are. For example

    PERLVAR(Ierror_count, I32)	/* how many errors so far, max 10 */

might work as well if stored in a signed (or unsigned) 8 bit value, if the
comment is accurate. C<PL_multi_open> and C<PL_multi_close> can probably
become C<char>s. Finding variables to downsize coupled with rearrangement
could shrink the interpreter structure; a size saving which is multiplied by
the number of threads running.

=head2 am I hot or not?

The idea of F<pp_hot.c> is that it contains the I<hot> ops, the ops that are
most commonly used. The idea is that by grouping them, their object code will
be adjacent in the executable, so they have a greater chance of already being
in the CPU cache (or swapped in) due to being near another op already in use.

Except that it's not clear if these really are the most commonly used ops. So
anyone feeling like exercising their skill with coverage and profiling tools
might want to determine what ops I<really> are the most commonly used. And in
turn suggest evictions and promotions to achieve a better F<pp_hot.c>.

=head2 Shrink struct context

In F<cop.h>, we have

    struct context {
        U32		cx_type;	/* what kind of context this is */
        union {
    	struct block	cx_blk;
    	struct subst	cx_subst;
        } cx_u;
    };

There are less than 256 values for C<cx_type>, and the constituent parts
C<struct block> and C<struct subst> both contain some C<U8> and C<U16> fields,
so it should be possible to move them to the first word, and share space with
a C<U8> C<cx_type>, saving 1 word.

=head2 Allocate OPs from arenas

Currently all new OP structures are individually malloc()ed and free()d.
All C<malloc> implementations have space overheads, and are now as fast as
custom allocates so it would both use less memory and less CPU to allocate
the various OP structures from arenas. The SV arena code can probably be
re-used for this.




=head1 Tasks that need a knowledge of XS

These tasks would need C knowledge, and roughly the level of knowledge of
the perl API that comes from writing modules that use XS to interface to
C.

=head2 shrink C<PVBM>s

By removing unused elements and careful re-ordering, the structures for C<AV>s,
C<HV>s, C<CV>s and C<GV>s have recently been shrunk considerably. C<PVIO>s
probably aren't worth it, as typical programs don't use more than 8, and
(at least) C<Filter::Util::Call> uses C<SvPVX>/C<SvCUR>/C<SvLEN> on a C<PVIO>,
so it would mean code changes to modules on CPAN. C<PVBM>s might have some
savings to win.

=head2 Implicit Latin 1 => Unicode translation

Conversions from byte strings to UTF-8 currently map high bit characters
to Unicode without translation (or, depending on how you look at it, by
implicitly assuming that the byte strings are in Latin-1). As perl assumes
the C locale by default, upgrading a string to UTF-8 may change the
meaning of its contents regarding character classes, case mapping, etc.
This should probably emit a warning (at least).

This task is incremental - even a little bit of work on it will help.

=head2 autovivification

Make all autovivification consistent w.r.t LVALUE/RVALUE and strict/no strict;

This task is incremental - even a little bit of work on it will help.

=head2 Unicode in Filenames

chdir, chmod, chown, chroot, exec, glob, link, lstat, mkdir, open,
opendir, qx, readdir, readlink, rename, rmdir, stat, symlink, sysopen,
system, truncate, unlink, utime, -X.  All these could potentially accept
Unicode filenames either as input or output (and in the case of system
and qx Unicode in general, as input or output to/from the shell).
Whether a filesystem - an operating system pair understands Unicode in
filenames varies.

Known combinations that have some level of understanding include
Microsoft NTFS, Apple HFS+ (In Mac OS 9 and X) and Apple UFS (in Mac
OS X), NFS v4 is rumored to be Unicode, and of course Plan 9.  How to
create Unicode filenames, what forms of Unicode are accepted and used
(UCS-2, UTF-16, UTF-8), what (if any) is the normalization form used,
and so on, varies.  Finding the right level of interfacing to Perl
requires some thought.  Remember that an OS does not implicate a
filesystem.

(The Windows -C command flag "wide API support" has been at least
temporarily retired in 5.8.1, and the -C has been repurposed, see
L<perlrun>.)

=head2 Unicode in %ENV

Currently the %ENV entries are always byte strings.

=head2 use less 'memory'

Investigate trade offs to switch out perl's choices on memory usage.
Particularly perl should be able to give memory back.

This task is incremental - even a little bit of work on it will help.

=head2 Re-implement C<:unique> in a way that is actually thread-safe

The old implementation made bad assumptions on several levels. A good 90%
solution might be just to make C<:unique> work to share the string buffer
of SvPVs. That way large constant strings can be shared between ithreads,
such as the configuration information in F<Config>.

=head2 Make tainting consistent

Tainting would be easier to use if it didn't take documented shortcuts and
allow taint to "leak" everywhere within an expression.

=head2 readpipe(LIST)

system() accepts a LIST syntax (and a PROGRAM LIST syntax) to avoid
running a shell. readpipe() (the function behind qx//) could be similarly
extended.





=head1 Tasks that need a knowledge of the interpreter

These tasks would need C knowledge, and knowledge of how the interpreter works,
or a willingness to learn.

=head2 lexical pragmas

Document the new support for lexical pragmas in 5.9.3 and how %^H works.
Maybe C<re>, C<encoding>, maybe other pragmas could be made lexical.

=head2 Attach/detach debugger from running program

The old perltodo notes "With C<gdb>, you can attach the debugger to a running
program if you pass the process ID. It would be good to do this with the Perl
debugger on a running Perl program, although I'm not sure how it would be
done." ssh and screen do this with named pipes in /tmp. Maybe we can too.

=head2 LVALUE functions for lists

The old perltodo notes that lvalue functions don't work for list or hash
slices. This would be good to fix.

=head2 LVALUE functions in the debugger

The old perltodo notes that lvalue functions don't work in the debugger. This
would be good to fix.

=head2 _ prototype character

Study the possibility of adding a new prototype character, C<_>, meaning
"this argument defaults to $_".

=head2 state variables

C<my $foo if 0;> is deprecated, and should be replaced with
C<state $x = "initial value\n";> the syntax from Perl 6.

=head2 regexp optimiser optional

The regexp optimiser is not optional. It should configurable to be, to allow
its performance to be measured, and its bugs to be easily demonstrated.

=head2 UNITCHECK

Introduce a new special block, UNITCHECK, which is run at the end of a
compilation unit (module, file, eval(STRING) block). This will correspond to
the Perl 6 CHECK. Perl 5's CHECK cannot be changed or removed because the
O.pm/B.pm backend framework depends on it.

=head2 optional optimizer

Make the peephole optimizer optional. Currently it performs two tasks as
it walks the optree - genuine peephole optimisations, and necessary fixups of
ops. It would be good to find an efficient way to switch out the
optimisations whilst keeping the fixups.

=head2 You WANT *how* many

Currently contexts are void, scalar and list. split has a special mechanism in
place to pass in the number of return values wanted. It would be useful to
have a general mechanism for this, backwards compatible and little speed hit.
This would allow proposals such as short circuiting sort to be implemented
as a module on CPAN.

=head2 lexical aliases

Allow lexical aliases (maybe via the syntax C<my \$alias = \$foo>.

=head2 entersub XS vs Perl

At the moment pp_entersub is huge, and has code to deal with entering both
perl and XS subroutines. Subroutine implementations rarely change between 
perl and XS at run time, so investigate using 2 ops to enter subs (one for
XS, one for perl) and swap between if a sub is redefined.

=head2 Self ties

self ties are currently illegal because they caused too many segfaults. Maybe
the causes of these could be tracked down and self-ties on all types re-
instated.

=head2 Optimize away @_

The old perltodo notes "Look at the "reification" code in C<av.c>".

=head2 What hooks would assertions need?

Assertions are in the core, and work. However, assertions needed to be added
as a core patch, rather than an XS module in ext, or a CPAN module, because
the core has no hooks in the necessary places. It would be useful to
investigate what hooks would need to be added to make it possible to provide
the full assertion support from a CPAN module, so that we aren't constraining
the imagination of future CPAN authors.





=head1 Big projects

Tasks that will get your name mentioned in the description of the "Highlights
of 5.10"

=head2 make ithreads more robust

Generally make ithreads more robust. See also L</iCOW>

This task is incremental - even a little bit of work on it will help, and
will be greatly appreciated.

One bit would be to write the missing code in sv.c:Perl_dirp_dup.

=head2 iCOW

Sarathy and Arthur have a proposal for an improved Copy On Write which
specifically will be able to COW new ithreads. If this can be implemented
it would be a good thing.

=head2 (?{...}) closures in regexps

Fix (or rewrite) the implementation of the C</(?{...})/> closures.

=head2 A re-entrant regexp engine

This will allow the use of a regex from inside (?{ }), (??{ }) and
(?(?{ })|) constructs.
