=encoding utf8

=head1 NAME

perl5110delta - what is new for perl v5.11.0

=head1 DESCRIPTION

This document describes differences between the 5.10.0 release and
the 5.11.0 development release.

=head1 Incompatible Changes

=head2 Unicode interpretation of \w, \d, \s, and the POSIX character classes redefined.

Previous versions of Perl tried to map POSIX style character class definitions onto
Unicode property names so that patterns would "dwim" when matches were made against latin-1 or
unicode strings. This proved to be a mistake, breaking character class negation, causing
forward compatibility problems (as Unicode keeps updating their property definitions and adding
new characters), and other problems.

Therefore we have now defined a new set of artificial "unicode" property names which will be
used to do unicode matching of patterns using POSIX style character classes and perl short-form
escape character classes like \w and \d.

The key change here is that \d will no longer match every digit in the unicode standard
(there are thousands) nor will \w match every word character in the standard, instead they
will match precisely their POSIX or Perl definition.

Those needing to match based on Unicode properties can continue to do so by using the \p{} syntax
to match whichever property they like, including the new artificial definitions.

B<NOTE:> This is a backwards incompatible no-warning change in behaviour. If you are upgrading
and you process large volumes of text look for POSIX and Perl style character classes and
change them to the relevent property name (by removing the word 'Posix' from the current name).

The following table maps the POSIX character class names, the escapes and the old and new
Unicode property mappings:

    POSIX  Esc  Class               New-Property  ! Old-Property
    ----------------------------------------------+-------------
    alnum       [0-9A-Za-z]         IsPosixAlnum  ! IsAlnum
    alpha       [A-Za-z]            IsPosixAlpha  ! IsAlpha
    ascii       [\000-\177]         IsASCII       = IsASCII
    blank       [\011 ]             IsPosixBlank  !
    cntrl       [\0-\37\177]        IsPosixCntrl  ! IsCntrl
    digit   \d  [0-9]               IsPosixDigit  ! IsDigit
    graph       [!-~]               IsPosixGraph  ! IsGraph
    lower       [a-z]               IsPosixLower  ! IsLower
    print       [ -~]               IsPosixPrint  ! IsPrint
    punct       [!-/:-@[-`{-~]      IsPosixPunct  ! IsPunct
    space       [\11-\15 ]          IsPosixSpace  ! IsSpace
            \s  [\11\12\14\15 ]     IsPerlSpace   ! IsSpacePerl
    upper       [A-Z]               IsPosixUpper  ! IsUpper
    word    \w  [0-9A-Z_a-z]        IsPerlWord    ! IsWord
    xdigit      [0-9A-Fa-f]         IsXDigit      = IsXDigit

If you wish to build perl with the old mapping you may do so by setting

	#define PERL_LEGACY_UNICODE_CHARCLASS_MAPPINGS 1

in regcomp.h, and then setting

	PERL_TEST_LEGACY_POSIX_CC

to true your enviornment when testing.


=head2 In @INC, move ARCHLIB and PRIVLIB after the current version's site_perl and vendor_perl.

=head2 Switch statement changes

The handling of complex expressions by the C<given>/C<when> switch
statement has been enhanced. These enhancements are also available in
5.10.1 and subsequent 5.10 releases. There are two new cases where C<when> now
interprets its argument as a boolean, instead of an expression to be used
in a smart match:

=over 4

=item flip-flop operators

The C<..> and C<...> flip-flop operators are now evaluated in boolean
context, following their usual semantics; see L<perlop/"Range Operators">.

Note that, as in perl 5.10.0, C<when (1..10)> will not work to test
whether a given value is an integer between 1 and 10; you should use
C<when ([1..10])> instead (note the array reference).

However, contrary to 5.10.0, evaluating the flip-flop operators in boolean
context ensures it can now be useful in a C<when()>, notably for
implementing bistable conditions, like in:

    when (/^=begin/ .. /^=end/) {
      # do something
    }

=item defined-or operator

A compound expression involving the defined-or operator, as in
C<when (expr1 // expr2)>, will be treated as boolean if the first
expression is boolean. (This just extends the existing rule that applies
to the regular or operator, as in C<when (expr1 || expr2)>.)

=back

The next section details more changes brought to the semantics to
the smart match operator, that naturally also modify the behaviour
of the switch statements where smart matching is implicitly used.
These changers were also made for the 5.10.1 release, and will remain in
subsequent 5.10 releases.

=head2 Smart match changes

=head3 Changes to type-based dispatch

The smart match operator C<~~> is no longer commutative. The behaviour of
a smart match now depends primarily on the type of its right hand
argument. Moreover, its semantics have been adjusted for greater
consistency or usefulness in several cases. While the general backwards
compatibility is maintained, several changes must be noted:

=over 4

=item *

Code references with an empty prototype are no longer treated specially.
They are passed an argument like the other code references (even if they
choose to ignore it).

=item *

C<%hash ~~ sub {}> and C<@array ~~ sub {}> now test that the subroutine
returns a true value for each key of the hash (resp. element of the
array), instead of passing the whole hash or array as a reference to
the subroutine.

=item *

Due to the commutativity breakage, code references are no longer
treated specially when appearing on the left of the C<~~> operator,
but like any vulgar scalar.

=item *

C<undef ~~ %hash> is always false (since C<undef> can't be a key in a
hash). No implicit conversion to C<""> is done (as was the case in perl
5.10.0).

=item *

C<$scalar ~~ @array> now always distributes the smart match across the
elements of the array. It's true if one element in @array verifies
C<$scalar ~~ $element>. This is a generalization of the old behaviour
that tested whether the array contained the scalar.

=back

The full dispatch table for the smart match operator is given in
L<perlsyn/"Smart matching in detail">.

=head3 Smart match and overloading

According to the rule of dispatch based on the rightmost argument type,
when an object overloading C<~~> appears on the right side of the
operator, the overload routine will always be called (with a 3rd argument
set to a true value, see L<overload>.) However, when the object will
appear on the left, the overload routine will be called only when the
rightmost argument is a scalar. This way distributivity of smart match
across arrays is not broken, as well as the other behaviours with complex
types (coderefs, hashes, regexes). Thus, writers of overloading routines
for smart match mostly need to worry only with comparing against a scalar,
and possibly with stringification overloading; the other common cases
will be automatically handled consistently.

C<~~> will now refuse to work on objects that do not overload it (in order
to avoid relying on the object's underlying structure). (However, if the
object overloads the stringification or the numification operators, and
if overload fallback is active, it will be used instead, as usual.)

=head2 Labels can't be keywords

Labels used as targets for the C<goto>, C<last>, C<next> or C<redo>
statements cannot be keywords anymore. This restriction will prevent
potential confusion between the C<goto LABEL> and C<goto EXPR> syntaxes:
for example, a statement like C<goto print> would jump to a label whose
name would be the return value of C<print()>, (usually 1), instead of a
label named C<print>. Moreover, the other control flow statements
would just ignore any keyword passed to them as a label name. Since
such labels cannot be defined anymore, this kind of error will be
avoided.

=head2 Other incompatible changes

=over 4

=item *

The semantics of C<use feature :5.10*> have changed slightly.
See L<"Modules and Pragmata"> for more information.

=item *

It is now a run-time error to use the smart match operator C<~~>
with an object that has no overload defined for it. (This way
C<~~> will not break encapsulation by matching against the
object's internal representation as a reference.)

=item *

The version control system used for the development of the perl
interpreter has been switched from Perforce to git.  This is mainly an
internal issue that only affects people actively working on the perl core;
but it may have minor external visibility, for example in some of details
of the output of C<perl -V>. See L<perlrepository> for more information.

=item *

The internal structure of the C<ext/> directory in the perl source has
been reorganised. In general, a module C<Foo::Bar> whose source was
stored under F<ext/Foo/Bar/> is now located under F<ext/Foo-Bar/>. Also,
nearly all dual-life modules have been moved from F<lib/> to F<ext/>. This
is purely a source tarball change, and should make no difference to the
compilation or installation of perl, unless you have a very customised build
process that explicitly relies on this structure, or which hard-codes the
C<nonxs_ext> F<Configure> parameter. Specifically, this change does not by
default alter the location of any files in the final installation.

=item *

As part of the C<Test::Harness> 2.x to 3.x upgrade, the experimental
C<Test::Harness::Straps> module has been removed.
See L</"Updated Modules"> for more details.

=item *

As part of the C<ExtUtils::MakeMaker> upgrade, the
C<ExtUtils::MakeMaker::bytes> and C<ExtUtils::MakeMaker::vmsish> modules
have been removed from this distribution.

=item *

C<Module::CoreList> no longer contains the C<%:patchlevel> hash.

=item *

This one is actually a change introduced in 5.10.0, but it was missed
from that release's perldelta, so it is mentioned here instead.

A bugfix related to the handling of the C</m> modifier and C<qr> resulted
in a change of behaviour between 5.8.x and 5.10.0:

    # matches in 5.8.x, doesn't match in 5.10.0
    $re = qr/^bar/; "foo\nbar" =~ /$re/m;

=item *

C<length undef> now returns undef.

=back

=head1 Core Enhancements

=head2 Unicode Character Database 5.1.0

The copy of the Unicode Character Database included in Perl 5.11.0 has
been updated to 5.1.0 from 5.0.0. See
L<http://www.unicode.org/versions/Unicode5.1.0/#Notable_Changes> for the
notable changes.

=head2 A proper interface for pluggable Method Resolution Orders

As of Perl 5.11.0 there is a new interface for plugging and using method
resolution orders other than the default (linear depth first search).
The C3 method resolution order added in 5.10.0 has been re-implemented as
a plugin, without changing its Perl-space interface. See L<perlmroapi> for
more information.

=head2 The C<overloading> pragma

This pragma allows you to lexically disable or enable overloading
for some or all operations. (Yuval Kogman)

=head2 C<\N> regex escape

A new regex escape has been added, C<\N>. It will match any character that
is not a newline, independently from the presence or absence of the single
line match modifier C</s>. (If C<\N> is followed by an opening brace and
by a letter, perl will still assume that a Unicode character name is
coming, so compatibility is preserved.) (Rafael Garcia-Suarez)

=head2 Implicit strictures

Using the C<use VERSION> syntax with a version number greater or equal
to 5.11.0 will also lexically enable strictures just like C<use strict>
would do (in addition to enabling features.) So, the following:

    use 5.11.0;

will now imply:

    use strict;
    use feature ':5.11';

=head2 Parallel tests

The core distribution can now run its regression tests in parallel on
Unix-like platforms. Instead of running C<make test>, set C<TEST_JOBS> in
your environment to the number of tests to run in parallel, and run
C<make test_harness>. On a Bourne-like shell, this can be done as

    TEST_JOBS=3 make test_harness  # Run 3 tests in parallel

An environment variable is used, rather than parallel make itself, because
L<TAP::Harness> needs to be able to schedule individual non-conflicting test
scripts itself, and there is no standard interface to C<make> utilities to
interact with their job schedulers.

Note that currently some test scripts may fail when run in parallel (most
notably C<ext/IO/t/io_dir.t>). If necessary run just the failing scripts
again sequentially and see if the failures go away.

=head2 The C<...> operator

A new operator, C<...>, nicknamed the Yada Yada operator, has been added.
It is intended to mark placeholder code, that is not yet implemented.
See L<perlop/"Yada Yada Operator">. (chromatic)

=head2 DTrace support

Some support for DTrace has been added. See "DTrace support" in F<INSTALL>.

=head2 Support for C<configure_requires> in CPAN module metadata

Both C<CPAN> and C<CPANPLUS> now support the C<configure_requires> keyword
in the F<META.yml> metadata file included in most recent CPAN distributions.
This allows distribution authors to specify configuration prerequisites that
must be installed before running F<Makefile.PL> or F<Build.PL>.

See the documentation for C<ExtUtils::MakeMaker> or C<Module::Build> for more
on how to specify C<configure_requires> when creating a distribution for CPAN.

=head2 The C<each> function can now operate on arrays

=head2 Perl's core time-related functions are now Y2038 compliand

=head2 The variable C<$,> may now be tied

=head2 // now behaves like || in when clauses

=head2 You can now set C<-W> from the C<PERL5OPT> environment varialbe

=head1 Modules and Pragmata

=head2 New Modules and Pragmata

=over 4

=item C<autodie>

This is a new lexically-scoped alternative for the C<Fatal> module.
The bundled version is 2.06_01. Note that in this release, using a string
eval when C<autodie> is in effect can cause the autodie behaviour to leak
into the surrounding scope. See L<autodie/"BUGS"> for more details.

=item C<Compress::Raw::Bzip2>

This has been added to the core (version 2.020).

=item C<parent>

This pragma establishes an ISA relationship with base classes at compile
time. It provides the key feature of C<base> without the feature creep.

=item C<Parse::CPAN::Meta>

This has been added to the core (version 1.39).

=back

=head2 Pragmata Changes

=over 4

=item C<overloading>

See L</"The C<overloading> pragma"> above.

=item C<attributes>

Upgraded from version 0.08 to 0.09.

=item C<attrs>

The C<attrs> pragma has been removed. It had been marked as deprecated since
5.6.0.

=item C<base>

Upgraded from version 2.13 to 2.14. See L<parent> for a replacement.

=item C<bigint>

Upgraded from version 0.22 to 0.23.

=item C<bignum>

Upgraded from version 0.22 to 0.23.

=item C<bigrat>

Upgraded from version 0.22 to 0.23.

=item C<charnames>

Upgraded from version 1.06 to 1.07.

The Unicode F<NameAliases.txt> database file has been added. This has the
effect of adding some extra C<\N> character names that formerly wouldn't
have been recognised; for example, C<"\N{LATIN CAPITAL LETTER GHA}">.

=item C<constant>

Upgraded from version 1.13 to 1.19. Some code has been shifted from run time to
compile time, and the amount of MRO cache flushing has been minimised.

=item C<feature>

The meaning of the C<:5.10> and C<:5.10.X> feature bundles has
changed slightly. The last component, if any (i.e. C<X>) is simply ignored.
This is predicated on the assumption that new features will not, in
general, be added to maintenance releases. So C<:5.10> and C<:5.10.X>
have identical effect. This is a change to the behaviour documented for
5.10.0.

=item C<fields>

Upgraded from version 2.13 to 2.14 (this was just a version bump; there
were no functional changes).

=item C<lib>

Upgraded from version 0.5565 to 0.62.

=item C<open>

Upgraded from version 1.06 to 1.07.

=item C<overload>

Upgraded from version 1.06 to 1.07.

=item C<overloading>

See L</"The C<overloading> pragma"> above.

=item C<version>

Upgraded from version 0.74 to 0.77.

=back

=head2 Updated Modules

=over 4

=item C<Archive::Extract>

Upgraded from version 0.24 to 0.34.

=item C<Archive::Tar>

Upgraded from version 1.38 to 1.52.

=item C<Attribute::Handlers>

Upgraded from version 0.79 to 0.85.

=item C<AutoLoader>

Upgraded from version 5.63 to 5.68.

=item C<AutoSplit>

Upgraded from version 1.05 to 1.06.

=item C<B>

Upgraded from version 1.17 to 1.22.

=item C<B::Debug>

Upgraded from version 1.05 to 1.11.

=item C<B::Deparse>

Upgraded from version 0.83 to 0.89.

=item C<B::Lint>

Upgraded from version 1.09 to 1.11.

=item C<B::Xref>

Upgraded from version 1.01 to 1.02.

=item C<Benchmark>

Upgraded from version 1.10 to 1.11.

=item C<Carp>

Upgraded from version 1.08 to 1.11.

L<Carp> now includes all the necessary code to function. Previously, it
used to be a lightweight placeholder that loaded the actual code from
C<Carp::Heavy> on demand. C<Carp::Heavy> is now a simple, empty module
kept for backwards compatibility for programs that used to pre-load it.

=item C<CGI>

Upgraded from version 3.29 to 3.43.
(also includes the "default_value for popup_menu()" fix from 3.45).

=item C<Compress::Zlib>

Upgraded from version 2.008 to 2.020.

=item C<CPAN>

Upgraded from version 1.9205 to 1.9402. C<CPAN::FTP> has a local fix to
stop it being too verbose on download failure.

=item C<CPANPLUS>

Upgraded from version 0.84 to 0.88.

=item C<CPANPLUS::Dist::Build>

Upgraded from version 0.06_02 to 0.36.

=item C<Cwd>

Upgraded from version 3.25_01 to 3.30.

=item C<Data::Dumper>

Upgraded from version 2.121_14 to 2.124.

=item C<DB>

Upgraded from version 1.01 to 1.02.

=item C<DB_File>

Upgraded from version 1.816_1 to 1.820.

=item C<Devel::PPPort>

Upgraded from version 3.13 to 3.19.

=item C<Digest::MD5>

Upgraded from version 2.36_01 to 2.39.

=item C<Digest::SHA>

Upgraded from version 5.45 to 5.47.

=item C<DirHandle>

Upgraded from version 1.01 to 1.03.

=item C<Dumpvalue>

Upgraded from version 1.12 to 1.13.

=item C<DynaLoader>

Upgraded from version 1.08 to 1.10.

=item C<Encode>

Upgraded from version 2.23 to 2.35.

=item C<Errno>

Upgraded from version 1.10 to 1.11.

=item C<Exporter>

Upgraded from version 5.62 to 5.63.

=item C<ExtUtils::CBuilder>

Upgraded from version 0.21 to 0.2602.

=item C<ExtUtils::Command>

Upgraded from version 1.13 to 1.16.

=item C<ExtUtils::Constant>

Upgraded from 0.20 to 0.22. (Note that neither of these versions are
available on CPAN.)

=item C<ExtUtils::Embed>

Upgraded from version 1.27 to 1.28.

=item C<ExtUtils::Install>

Upgraded from version 1.44 to 1.54.

=item C<ExtUtils::MakeMaker>

Upgraded from version 6.42 to 6.55_02.

Note that C<ExtUtils::MakeMaker::bytes> and C<ExtUtils::MakeMaker::vmsish>
have been removed from this distribution.

=item C<ExtUtils::Manifest>

Upgraded from version 1.51_01 to 1.56.

=item C<ExtUtils::ParseXS>

Upgraded from version 2.18_02 to 2.2002.

=item C<Fatal>

Upgraded from version 1.05 to 2.06_01. See also the new pragma C<autodie>.

=item C<File::Basename>

Upgraded from version 2.76 to 2.77.

=item C<File::Compare>

Upgraded from version 1.1005 to 1.1006.

=item C<File::Copy>

Upgraded from version 2.11 to 2.16.

File::Copy now always return 0 (not "") on failure.

FIXME - describe C<cp>

=item C<File::Fetch>

Upgraded from version 0.14 to 0.20.

=item C<File::Find>

Upgraded from version 1.12 to 1.14.

=item C<File::Path>

Upgraded from version 2.04 to 2.07_03.

=item C<File::Spec>

Upgraded from version 3.2501 to 3.30.

=item C<File::stat>

Upgraded from version 1.00 to 1.01.

Added -X overloading, -M, -C and -A.

=item C<File::Temp>

Upgraded from version 0.18 to 0.22.

=item C<FileCache>

Upgraded from version 1.07 to 1.08.

=item C<FileHandle>

Upgraded from version 2.01 to 2.02.

=item C<Filter::Simple>

Upgraded from version 0.82 to 0.84.

=item C<Filter::Util::Call>

Upgraded from version 1.07 to 1.08.

=item C<FindBin>

Upgraded from version 1.49 to 1.50.

=item C<GDBM_File>

Upgraded from version 1.08 to 1.09.

=item C<Getopt::Long>

Upgraded from version 2.37 to 2.38.

=item C<Hash::Util::FieldHash>

Upgraded from version 1.03 to 1.04. This fixes a memory leak.

=item C<I18N::Collate>

Upgraded from version 1.00 to 1.01.

=item C<IO>

Upgraded from version 1.23_01 to 1.25.

This makes non-blocking mode work on Windows in C<IO::Socket::INET>
[CPAN #43573].

=item C<IO::Compress::*>

Upgraded from version 2.008 to 2.020.

=item C<IO::Dir>

Upgraded from version 1.06 to 1.07.

=item C<IO::Handle>

Upgraded from version 1.27 to 1.28.

=item C<IO::Socket>

Upgraded from version 1.30_01 to 1.31.

=item C<IO::Zlib>

Upgraded from version 1.07 to 1.09.

=item C<IPC::Cmd>

Upgraded from version 0.40_1 to 0.46.

=item C<IPC::Open3>

Upgraded from version 1.02 to 1.04.

=item C<IPC::SysV>

Upgraded from version 1.05 to 2.01.

=item C<lib>

Upgraded from version 0.5565 to 0.62.

=item C<List::Util>

Upgraded from version 1.19 to 1.21.

=item C<Locale::MakeText>

Upgraded from version 1.12 to 1.13.

=item C<Log::Message>

Upgraded from version 0.01 to 0.02.

=item C<Math::BigFloat>

Upgraded from version 1.59 to 1.60.

=item C<Math::BigInt>

Upgraded from version 1.88 to 1.89.

=item C<Math::BigInt::FastCalc>

Upgraded from version 0.16 to 0.19.

=item C<Math::BigRat>

Upgraded from version 0.21 to 0.22.

=item C<Math::Complex>

Upgraded from version 1.37 to 1.56.

=item C<Math::Trig>

Upgraded from version 1.04 to 1.20.

=item C<Memoize>

Upgraded from version 1.01_02 to 1.01_03 (just a minor documentation
change).

=item C<Module::Build>

Upgraded from version 0.2808_01 to 0.34_02.

=item C<Module::CoreList>

Upgraded from version 2.13 to 2.18. This release no longer contains the
C<%Module::CoreList::patchlevel> hash.

=item C<Module::Load>

Upgraded from version 0.12 to 0.16.

=item C<Module::Load::Conditional>

Upgraded from version 0.22 to 0.30.

=item C<Module::Loaded>

Upgraded from version 0.01 to 0.02.

=item C<Module::Pluggable>

Upgraded from version 3.6 to 3.9.

=item C<NDBM_File>

Upgraded from version 1.07 to 1.08.

=item C<Net::Ping>

Upgraded from version 2.33 to 2.36.

=item C<NEXT>

Upgraded from version 0.60_01 to 0.64.

=item C<Object::Accessor>

Upgraded from version 0.32 to 0.34.

=item C<OS2::REXX>

Upgraded from version 1.03 to 1.04.

=item C<Package::Constants>

Upgraded from version 0.01 to 0.02.

=item C<PerlIO>

Upgraded from version 1.04 to 1.06.

=item C<PerlIO::via>

Upgraded from version 0.04 to 0.07.

=item C<Pod::Man>

Upgraded from version 2.16 to 2.22.

=item C<Pod::Parser>

Upgraded from version 1.35 to 1.37.

=item Pod::Perldoc

Upgrade from version 3.14_02 to 3.15.

=item C<Pod::Simple>

Upgraded from version 3.05 to 3.07.

=item C<Pod::Text>

Upgraded from version 3.08 to 3.13.

=item C<POSIX>

Upgraded from version 1.13 to 1.17.

=item C<Safe>

Upgraded from 2.12 to 2.18.

=item C<Scalar::Util>

Upgraded from version 1.19 to 1.21.

=item C<SelectSaver>

Upgraded from 1.01 to 1.02.

=item C<SelfLoader>

Upgraded from 1.11 to 1.17.

=item C<Socket>

Upgraded from 1.80 to 1.84.

As of 1.84, C<Socket> can now handle abstract namespace sockets on Linux.
(see unix(7)).

=item C<Storable>

Upgraded from 2.18 to 2.20.

=item C<Switch>

Upgraded from version 2.13 to 2.14. Please see L</Deprecations>.

=item C<Symbol>

Upgraded from version 1.06 to 1.07.

=item C<Sys::Syslog>

Upgraded from version 0.22 to 0.27.

=item C<Term::ANSIColor>

Upgraded from version 1.12 to 2.01.

=item C<Term::ReadLine>

Upgraded from version 1.03 to 1.04.

=item C<Term::UI>

Upgraded from version 0.18 to 0.20.

=item C<Test::Harness>

Upgraded from version 2.64 to 3.17.

Note that one side-effect of the 2.x to 3.x upgrade is that the
experimental C<Test::Harness::Straps> module (and its supporting
C<Assert>, C<Iterator>, C<Point> and C<Results> modules) have been
removed. If you still need this, then they are available in the
(unmaintained) C<Test-Harness-Straps> distribution on CPAN.

=item C<Test::Simple>

Upgraded from version 0.72 to 0.92.

=item C<Text::ParseWords>

Upgraded from version 3.26 to 3.27.

=item C<Text::Tabs>

Upgraded from version 2007.1117 to 2009.0305.

=item C<Text::Wrap>

Upgraded from version 2006.1117 to 2009.0305.

=item C<Thread::Queue>

Upgraded from version 2.00 to 2.11.

=item C<Thread::Semaphore>

Upgraded from version 2.01 to 2.09.

=item C<threads>

Upgraded from version 1.67 to 1.73.

=item C<threads::shared>

Upgraded from version 1.14 to 1.29.

=item C<Tie::RefHash>

Upgraded from version 1.37 to 1.38.

=item C<Tie::StdHandle>

This has documentation changes, and has been assigned a version for the
first time: version 4.2.

=item C<Time::HiRes>

Upgraded from version 1.9711 to 1.9719.

=item C<Time::Local>

Upgraded from version 1.18 to 1.1901.

=item C<Time::Piece>

Upgraded from version 1.12 to 1.15.

=item C<Unicode::Normalize>

Upgraded from version 1.02 to 1.03.

=item C<Unicode::UCD>

Upgraded from version 0.25 to 0.27.

C<charinfo()> now works on Unified CJK code points added to later versions
of Unicode.

C<casefold()> has new fields returned to provide both a simpler interface
and previously missing information. The old fields are retained for
backwards compatibility. Information about Turkic-specific code points is
now returned.

The documentation has been corrected and expanded.

=item C<UNIVERSAL>

Upgraded from version 1.04 to 1.05.

C<UNIVERSAL->import()> is now deprecated.

=item C<Win32>

Upgraded from version 0.34 to 0.39.

=item C<Win32API::File>

Upgraded from version 0.1001_01 to 0.1101.

=item C<XSLoader>

Upgraded from version 0.08 to 0.10.

=back

=head1 Utility Changes

=over 4

=item F<h2ph>

Now looks in C<include-fixed> too, which is a recent addition to gcc's
search path.

=item F<h2xs>

No longer incorrectly treats enum values like macros (Daniel Burr).

Now handles C++ style constants (C<//>) properly in enums. (A patch from
Rainer Weikusat was used; Daniel Burr also proposed a similar fix).

=item F<perl5db.pl>

C<LVALUE> subroutines now work under the debugger.

The debugger now correctly handles proxy constant subroutines, and
subroutine stubs.

=item F<perlbug>

F<perlbug> now uses C<%Module::CoreList::bug_tracker> to print out upstream bug
tracker URLs.

Where the user names a module that their bug report is about, and we know the
URL for its upstream bug tracker, provide a message to the user explaining
that the core copies the CPAN version directly, and provide the URL for
reporting the bug directly to upstream.

=item F<perlthanks>

Perl 5.11.0 added a new utility F<perlthanks>, which is a variant of
F<perlbug>, but for sending non-bug-reports to the authors and maintainers
of Perl. Getting nothing but bug reports can become a bit demoralising:
we'll see if this changes things.

=back

=head1 New Documentation

=over 4

=item L<perlhaiku>

This contains instructions on how to build perl for the Haiku platform.

=item L<perlmroapi>

This describes the new interface for pluggable Method Resolution Orders.

=item L<perlperf>

This document, by Richard Foley, provides an introduction to the use of
performance and optimization techniques which can be used with particular
reference to perl programs.

=item L<perlrepository>

This describes how to access the perl source using the I<git> version
control system.

=item L<perlthanks>

This describes the new F<perlthanks> utility.

=back

=head1 Changes to Existing Documentation

The various large F<Changes*> files (which listed every change made to perl
over the last 18 years) have been removed, and replaced by a small file,
also called F<Changes>, which just explains how that same information may
be extracted from the git version control system.

The file F<Porting/patching.pod> has been deleted, as it mainly described
interacting with the old Perforce-based repository, which is now obsolete.
Information still relevant has been moved to L<perlrepository>.

L<perlapi>, L<perlintern>, L<perlmodlib> and L<perltoc> are now all
generated at build time, rather than being shipped as part of the release.

=head2 Documented -X overloading.

=head2 Documented that C<when()> treats specially most of the filetest operators

=head2 Documented when as a syntax modifier

=head2 Eliminated "Old Perl threads tutorial", which describes 5005 threads.

pod/perlthrtut.pod is the same material reworked for ithreads.

=head2 Correct previous documentation: v-strings are not deprecated

With version objects, we need them to use MODULE VERSION syntax.  This
patch removes the deprecation note.

=head1 Performance Enhancements

=over 4

=item *

A new internal cache means that C<isa()> will often be faster.

=item *

The implementation of C<C3> Method Resolution Order has been optimised -
linearisation for classes with single inheritance is 40% faster. Performance 
for multiple inheritance is unchanged.

=item *

Under C<use locale>, the locale-relevant information is now cached on
read-only values, such as the list returned by C<keys %hash>. This makes
operations such as C<sort keys %hash> in the scope of C<use locale> much
faster.

=item *

Empty C<DESTROY> methods are no longer called.

=item *

Faster C<Perl_sv_utf8_upgrade()>

=item *

Speed up C<keys> on empty hash

=back

=head1 Installation and Configuration Improvements

=head2 F<ext/> reorganisation

The layout of directories in F<ext> has been revised. Specifically, all
extensions are now flat, and at the top level, with C</> in pathnames
replaced by C<->, so that F<ext/Data/Dumper/> is now F<ext/Data-Dumper/>,
etc.  The names of the extensions as specified to F<Configure>, and as
reported by C<%Config::Config> under the keys C<dynamic_ext>,
C<known_extensions>, C<nonxs_ext> and C<static_ext> have not changed, and
still use C</>. Hence this change will not have any affect once perl is
installed. C<Safe> has been split out from being part of C<Opcode>, and
C<mro> is now an extension in its own right. 

Nearly all dual-life modules have been moved from F<lib> to F<ext>, and will
now appear as known C<nonxs_ext>. This will made no difference to the
structure of an installed perl, nor will the modules installed differ,
unless you run F<Configure> with options to specify an exact list of
extensions to build. In this case, you will rapidly become aware that you
need to add to your list, because various modules needed to complete the
build, such as C<ExtUtils::ParseXS>, have now become extensions, and
without them the build will fail well before it attempts to run the
regression tests.

=head2 Configuration improvements

If C<vendorlib> and C<vendorarch> are the same, then they are only added to
C<@INC> once.

C<$Config{usedevel}> and the C-level C<PERL_USE_DEVEL> are now defined if
perl is built with  C<-Dusedevel>.

F<Configure> will enable use of C<-fstack-protector>, to provide protection
against stack-smashing attacks, if the compiler supports it.

F<Configure> will now determine the correct prototypes for re-entrant
functions, and for C<gconvert>, if you are using a C++ compiler rather
than a C compiler.

On Unix, if you build from a tree containing a git repository, the
configuration process will note the commit hash you have checked out, for
display in the output of C<perl -v> and C<perl -V>. Unpushed local commits
are automatically added to the list of local patches displayed by
C<perl -V>.

=head2 Compilation improvements

As part of the flattening of F<ext>, all extensions on all platforms are
built by F<make_ext.pl>. This replaces the Unix-specific
F<ext/util/make_ext>, VMS-specific F<make_ext.com> and Win32-specific
F<win32/buildext.pl>.

=head2 Platform Specific Changes

=over 4

=item AIX

Removed F<libbsd> for AIX 5L and 6.1. Only C<flock()> was used from F<libbsd>.

Removed F<libgdbm> for AIX 5L and 6.1. The F<libgdbm> is delivered as an
optional package with the AIX Toolbox. Unfortunately the 64 bit version 
is broken.

Hints changes mean that AIX 4.2 should work again.

=item Cygwin

On Cygwin we now strip the last number from the DLL. This has been the
behaviour in the cygwin.com build for years. The hints files have been
updated.

=item DomainOS

Support for Apollo DomainOS was removed in Perl 5.11.0

=item FreeBSD

The hints files now identify the correct threading libraries on FreeBSD 7
and later.

=item Irix

We now work around a bizarre preprocessor bug in the Irix 6.5 compiler:
C<cc -E -> unfortunately goes into K&R mode, but C<cc -E file.c> doesn't.

=item Haiku

Patches from the Haiku maintainers have been merged in. Perl should now
build on Haiku.

=item MiNT

Support for Atari MiNT was removed in Perl 5.11.0.

=item MirOS BSD

Perl should now build on MirOS BSD.

=item NetBSD

Hints now supports versions 5.*.

=item Stratus VOS

Various changes from Stratus have been merged in.

=item Symbian

There is now support for Symbian S60 3.2 SDK and S60 5.0 SDK.

=item Win32

Improved message window handling means that C<alarm> and C<kill> messages
will no longer be dropped under race conditions.

=item VMS

Reads from the in-memory temporary files of C<PerlIO::scalar> used to fail
if C<$/> was set to a numeric reference (to indicate record-style reads).
This is now fixed.

VMS now supports C<getgrgid>.

Many improvements and cleanups have been made to the VMS file name handling
and conversion code.

Enabling the C<PERL_VMS_POSIX_EXIT> logical name now encodes a POSIX exit
status in a VMS condition value for better interaction with GNV's bash
shell and other utilities that depend on POSIX exit values.  See
L<perlvms/"$?"> for details.

C<File::Copy> now detects Unix compatibility mode on VMS.

=back

=head1 Selected Bug Fixes

=over 4

=item *

C<-I> on shebang line now adds directories in front of @INC.
as documented, and as does C<-I> when specified on the command-line.
(Renée Bäcker)

=item *

C<kill> is now fatal when called on non-numeric process identifiers.
Previously, an 'undef' process identifier would be interpreted as a request to
kill process "0", which would terminate the current process group on POSIX
systems.  Since process identifiers are always integers, killing a non-numeric
process is now fatal.

=item *

5.10.0 inadvertently disabled an optimisation, which caused a measurable
performance drop in list assignment, such as is often used to assign
function parameters from C<@_>. The optimisation has been re-instated, and
the performance regression fixed.

=item *

Fixed memory leak on C<while (1) { map 1, 1 }> [RT #53038].

=item *

Some potential coredumps in PerlIO fixed [RT #57322,54828].

=item *

The debugger now works with lvalue subroutines.

=item *

The debugger's C<m> command was broken on modules that defined constants
[RT #61222].

=item *

C<crypt> and string complement could return tainted values for untainted
arguments [RT #59998].

=item *

The C<-i>I<.suffix> command-line switch now recreates the file using
restricted permissions, before changing its mode to match the original
file. This eliminates a potential race condition [RT #60904].

=item *

On some UNIX systems, the value in C<$?> would not have the top bit set
(C<$? & 128>) even if the child core dumped.

=item *

Under some circumstances, C<$^R> could incorrectly become undefined
[RT #57042].

=item *

In the XS API, various hash functions, when passed a pre-computed hash where
the key is UTF-8, might result in an incorrect lookup.

=item *

XS code including F<XSUB.h> before F<perl.h> gave a compile-time error
[RT #57176].

=item *

C<< $object->isa('Foo') >> would report false if the package C<Foo> didn't
exist, even if the object's C<@ISA> contained C<Foo>.

=item *

Various bugs in the new-to 5.10.0 mro code, triggered by manipulating
C<@ISA>, have been found and fixed.

=item *

Bitwise operations on references could crash the interpreter, e.g.
C<$x=\$y; $x |= "foo"> [RT #54956].

=item *

Patterns including alternation might be sensitive to the internal UTF-8
representation, e.g.

    my $byte = chr(192);
    my $utf8 = chr(192); utf8::upgrade($utf8);
    $utf8 =~ /$byte|X}/i;	# failed in 5.10.0

=item *

Within UTF8-encoded Perl source files (i.e. where C<use utf8> is in
effect), double-quoted literal strings could be corrupted where a C<\xNN>,
C<\0NNN> or C<\N{}> is followed by a literal character with ordinal value
greater than 255 [RT #59908].

=item *

C<B::Deparse> failed to correctly deparse various constructs:
C<readpipe STRING> [RT #62428], C<CORE::require(STRING)> [RT #62488],
C<sub foo(_)> [RT #62484].

=item *

Using C<setpgrp> with no arguments could corrupt the perl stack.

=item *

The block form of C<eval> is now specifically trappable by C<Safe> and
C<ops>.  Previously it was erroneously treated like string C<eval>.

=item *

In 5.10.0, the two characters C<[~> were sometimes parsed as the smart
match operator (C<~~>) [RT #63854].

=item *

In 5.10.0, the C<*> quantifier in patterns was sometimes treated as
C<{0,32767}> [RT #60034, #60464]. For example, this match would fail:

    ("ab" x 32768) =~ /^(ab)*$/

=item *

C<shmget> was limited to a 32 bit segment size on a 64 bit OS [RT #63924].

=item *

Using C<next> or C<last> to exit a C<given> block no longer produces a
spurious warning like the following:

    Exiting given via last at foo.pl line 123

=item *

On Windows, C<'.\foo'> and C<'..\foo'>  were treated differently than
C<'./foo'> and C<'../foo'> by C<do> and C<require> [RT #63492].

=item *

Assigning a format to a glob could corrupt the format; e.g.:

     *bar=*foo{FORMAT}; # foo format now bad

=item *

Attempting to coerce a typeglob to a string or number could cause an
assertion failure. The correct error message is now generated,
C<Can't coerce GLOB to I<$type>>.

=item *

Under C<use filetest 'access'>, C<-x> was using the wrong access mode. This
has been fixed [RT #49003].

=item *

C<length> on a tied scalar that returned a Unicode value would not be
correct the first time. This has been fixed.

=item *

Using an array C<tie> inside in array C<tie> could SEGV. This has been
fixed. [RT #51636]

=item *

A race condition inside C<PerlIOStdio_close()> has been identified and
fixed. This used to cause various threading issues, including SEGVs.

=item *

In C<unpack>, the use of C<()> groups in scalar context was internally
placing a list on the interpreter's stack, which manifested in various
ways, including SEGVs.  This is now fixed [RT #50256].

=item *

Magic was called twice in C<substr>, C<\&$x>, C<tie $x, $m> and C<chop>.
These have all been fixed.

=item *

A 5.10.0 optimisation to clear the temporary stack within the implicit
loop of C<s///ge> has been reverted, as it turned out to be the cause of
obscure bugs in seemingly unrelated parts of the interpreter [commit 
ef0d4e17921ee3de].

=item *

The line numbers for warnings inside C<elsif> are now correct.

=item *

The C<..> operator now works correctly with ranges whose ends are at or
close to the values of the smallest and largest integers.

=item *

C<binmode STDIN, ':raw'> could lead to segmentation faults on some platforms.
This has been fixed [RT #54828].

=item *

An off-by-one error meant that C<index $str, ...> was effectively being
executed as C<index "$str\0", ...>. This has been fixed [RT #53746].

=item *

Various leaks associated with named captures in regexes have been fixed
[RT #57024].

=item *

A weak reference to a hash would leak. This was affecting C<DBI>
[RT #56908].

=item *

Using (?|) in a regex could cause a segfault [RT #59734].

=item *

Use of a UTF-8 C<tr//> within a closure could cause a segfault [RT #61520].

=item *

Calling C<Perl_sv_chop()> or otherwise upgrading an SV could result in an
unaligned 64-bit access on the SPARC architecture [RT #60574].

=item *

In the 5.10.0 release, C<inc_version_list> would incorrectly list
C<5.10.*> after C<5.8.*>; this affected the C<@INC> search order
[RT #67628].

=item *

In 5.10.0, C<pack "a*", $tainted_value> returned a non-tainted value
[RT #52552].

=item *

In 5.10.0, C<printf> and C<sprintf> could produce the fatal error
C<panic: utf8_mg_pos_cache_update> when printing UTF-8 strings
[RT #62666].

=item *

In the 5.10.0 release, a dynamically created C<AUTOLOAD> method might be
missed (method cache issue) [RT #60220,60232].

=item *

In the 5.10.0 release, a combination of C<use feature> and C<//ee> could
cause a memory leak [RT #63110].

=item *

C<-C> on the shebang (C<#!>) line is once more permitted if it is also
specified on the command line. C<-C> on the shebang line used to be a
silent no-op I<if> it was not also on the command line, so perl 5.10.0
disallowed it, which broke some scripts. Now perl checks whether it is
also on the command line and only dies if it is not [RT #67880].

=item *

In 5.10.0, certain types of re-entrant regular expression could crash,
or cause the following assertion failure [RT #60508]:

    Assertion rx->sublen >= (s - rx->subbeg) + i failed

=back

=head1 New or Changed Diagnostics

=over 4

=item C<panic: sv_chop %s>

This new fatal error occurs when the C routine C<Perl_sv_chop()> was
passed a position that is not within the scalar's string buffer. This
could be caused by buggy XS code, and at this point recovery is not
possible.

=item C<Can't locate package %s for the parents of %s>

This warning has been removed. In general, it only got produced in
conjunction with other warnings, and removing it allowed an ISA lookup
optimisation to be added.

=item C<v-string in use/require is non-portable>

This warning has been removed.

=item C<Deep recursion on subroutine "%s">

It is now possible to change the depth threshold for this warning from the
default of 100, by recompiling the F<perl> binary, setting the C
pre-processor macro C<PERL_SUB_DEPTH_WARN> to the desired value.

=back

=head1 Changed Internals

=over 4

=item *

The J.R.R. Tolkien quotes at the head of C source file have been checked and
proper citations added, thanks to a patch from Tom Christiansen.

=item *

C<Perl_vcroak()> now accepts a null first argument. In addition, a full audit
was made of the "not NULL" compiler annotations, and those for several
other internal functions were corrected.

=item *

New macros C<dSAVEDERRNO>, C<dSAVE_ERRNO>, C<SAVE_ERRNO>, C<RESTORE_ERRNO>
have been added to formalise the temporary saving of the C<errno>
variable.

=item *

The function C<Perl_sv_insert_flags> has been added to augment
C<Perl_sv_insert>.

=item *

The function C<Perl_newSV_type(type)> has been added, equivalent to
C<Perl_newSV()> followed by C<Perl_sv_upgrade(type)>.

=item *

The function C<Perl_newSVpvn_flags()> has been added, equivalent to
C<Perl_newSVpvn()> and then performing the action relevant to the flag.

Two flag bits are currently supported.

=over 4

=item C<SVf_UTF8>

This will call C<SvUTF8_on()> for you. (Note that this does not convert an
sequence of ISO 8859-1 characters to UTF-8). A wrapper, C<newSVpvn_utf8()>
is available for this.

=item C<SVs_TEMP>

Call C<Perl_sv_2mortal()> on the new SV.

=back

There is also a wrapper that takes constant strings, C<newSVpvs_flags()>.

=item *

The function C<Perl_croak_xs_usage> has been added as a wrapper to
C<Perl_croak>.

=item *

The functions C<PerlIO_find_layer> and C<PerlIO_list_alloc> are now
exported.

=item *

C<PL_na> has been exterminated from the core code, replaced by local STRLEN
temporaries, or C<*_nolen()> calls. Either approach is faster than C<PL_na>,
which is a pointer deference into the interpreter structure under ithreads,
and a global variable otherwise.

=item *

C<Perl_mg_free()> used to leave freed memory accessible via C<SvMAGIC()> on
the scalar. It now updates the linked list to remove each piece of magic
as it is freed.

=item *

Under ithreads, the regex in C<PL_reg_curpm> is now reference counted. This
eliminates a lot of hackish workarounds to cope with it not being reference
counted.

=item *

C<Perl_mg_magical()> would sometimes incorrectly turn on C<SvRMAGICAL()>.
This has been fixed.

=item *

The I<public> IV and NV flags are now not set if the string value has
trailing "garbage". This behaviour is consistent with not setting the
public IV or NV flags if the value is out of range for the type.

=item *

SV allocation tracing has been added to the diagnostics enabled by C<-Dm>.
The tracing can alternatively output via the C<PERL_MEM_LOG> mechanism, if
that was enabled when the F<perl> binary was compiled.

=item *

Uses of C<Nullav>, C<Nullcv>, C<Nullhv>, C<Nullop>, C<Nullsv> etc have been
replaced by C<NULL> in the core code, and non-dual-life modules, as C<NULL>
is clearer to those unfamiliar with the core code.

=item *

A macro C<MUTABLE_PTR(p)> has been added, which on (non-pedantic) gcc will
not cast away C<const>, returning a C<void *>. Macros C<MUTABLE_SV(av)>,
C<MUTABLE_SV(cv)> etc build on this, casting to C<AV *> etc without
casting away C<const>. This allows proper compile-time auditing of
C<const> correctness in the core, and helped picked up some errors (now
fixed).

=item *

Macros C<mPUSHs()> and C<mXPUSHs()> have been added, for pushing SVs on the
stack and mortalizing them.

=item *

Use of the private structure C<mro_meta> has changed slightly. Nothing
outside the core should be accessing this directly anyway.

=item *

A new tool, F<Porting/expand-macro.pl> has been added, that allows you
to view how a C preprocessor macro would be expanded when compiled.
This is handy when trying to decode the macro hell that is the perl
guts.

=back

=head1 New Tests

Many modules updated from CPAN incorporate new tests.

Several tests that have the potential to hang forever if they fail now
incorporate a "watchdog" functionality that will kill them after a timeout,
which helps ensure that C<make test> and C<make test_harness> run to
completion automatically. (Jerry Hedden).

Some core-specific tests have been added:

=over 4

=item t/comp/retainedlines.t

Check that the debugger can retain source lines from C<eval>.

=item t/io/perlio_fail.t

Check that bad layers fail.

=item t/io/perlio_leaks.t

Check that PerlIO layers are not leaking.

=item t/io/perlio_open.t

Check that certain special forms of open work.

=item t/io/perlio.t

General PerlIO tests.

=item t/io/pvbm.t

Check that there is no unexpected interaction between the internal types
C<PVBM> and C<PVGV>.

=item t/mro/package_aliases.t

Check that mro works properly in the presence of aliased packages.

=item t/op/dbm.t

Tests for C<dbmopen> and C<dbmclose>.

=item t/op/index_thr.t

Tests for the interaction of C<index> and threads.

=item t/op/pat_thr.t

Tests for the interaction of esoteric patterns and threads.

=item t/op/qr_gc.t

Test that C<qr> doesn't leak.

=item t/op/reg_email_thr.t

Tests for the interaction of regex recursion and threads.

=item t/op/regexp_qr_embed_thr.t

Tests for the interaction of patterns with embedded C<qr//> and threads.

=item t/op/regexp_unicode_prop.t

Tests for Unicode properties in regular expressions.

=item t/op/regexp_unicode_prop_thr.t

Tests for the interaction of Unicode properties and threads.

=item t/op/reg_nc_tie.t

Test the tied methods of C<Tie::Hash::NamedCapture>.

=item t/op/reg_posixcc.t 

Check that POSIX character classes behave consistently.

=item t/op/re.t

Check that exportable C<re> functions in F<universal.c> work.

=item t/op/setpgrpstack.t

Check that C<setpgrp> works.

=item t/op/substr_thr.t

Tests for the interaction of C<substr> and threads.

=item t/op/upgrade.t

Check that upgrading and assigning scalars works.

=item t/uni/lex_utf8.t

Check that Unicode in the lexer works.

=item t/uni/tie.t

Check that Unicode and C<tie> work.

=back

=head1 Known Problems

This is a list of some significant unfixed bugs, which are regressions
from either 5.10.0 or 5.8.x.

=over 4

=item *

C<List::Util::first> misbehaves in the presence of a lexical C<$_>
(typically introduced by C<my $_> or implicitly by C<given>). The variable
which gets set for each iteration is the package variable C<$_>, not the
lexical C<$_> [RT #67694].

A similar issue may occur in other modules that provide functions which
take a block as their first argument, like

    foo { ... $_ ...} list

=item *

The C<charnames> pragma may generate a run-time error when a regex is
interpolated [RT #56444]:

    use charnames ':full';
    my $r1 = qr/\N{THAI CHARACTER SARA I}/;
    "foo" =~ $r1;    # okay
    "foo" =~ /$r1+/; # runtime error

A workaround is to generate the character outside of the regex:

    my $a = "\N{THAI CHARACTER SARA I}";
    my $r1 = qr/$a/;

=item *

Some regexes may run much more slowly when run in a child thread compared
with the thread the pattern was compiled into [RT #55600].

=back

=head1 Deprecations

The following items are now deprecated.

=over 4

=item *

C<Switch> is buggy and should be avoided. From perl 5.11.0 onwards, it is
intended that any use of the core version of this module will emit a
warning, and that the module will eventually be removed from the core
(probably in perl 5.14.0). See L<perlsyn/"Switch statements"> for its
replacement.

=item *

C<suidperl> has been removed. It used to provide a mechanism to
emulate setuid permission bits on systems that don't support it properly.

=item *

Deprecate assignment to $[

=item *

Remove attrs, which has been deprecated since 1999/10/02.

=item *

Deprecate use of the attribute :locked on subroutines.

=item *

Deprecate using "locked" with the attributes pragma.

=item *

Deprecate using "unique" with the attributes pragma.

=item *

warn if ++ or -- are unable to change the value because it's beyond the limit of representation 

This uses a new warnings category: "imprecision".

=item *

Make lc/uc/lcfirst/ucfirst warn when passed undef.

=item *

Show constant in "Useless use of a constant in void context"

=item *

Make the new warning report undef constants as undef

=item *

Add a new warning, "Prototype after '%s'"

=item *

Tweak the "Illegal character in prototype" warning so it's more precise when reporting illegal characters after _

=item *

Unintented interpolation of $\ in regex

=item *

Make overflow warnings in gmtime/localtime only occur when warnings are on

=item *

Improve mro merging error messages.

They are now very similar to those produced by Algorithm::C3.

=item *

Amelioration of the error message "Unrecognized character %s in column %d"

Changes the error message to "Unrecognized character %s; marked by <--
HERE after %s<-- HERE near column %d". This should make it a little
simpler to spot and correct the suspicious character.

=item *

Explicitely point to $. when it causes an uninitialized warning for ranges in scalar context

=back

=head1 Acknowledgements

Some of the work in this release was funded by a TPF grant funded by
Dijkmat BV, The Netherlands.

Steffen Mueller and David Golden in particular helped getting CPAN modules
polished and synchronised with their in-core equivalents.

Craig Berry was tireless in getting maint to run under VMS, no matter how
many times we broke it for him.

The other core committers contributed most of the changes, and applied most
of the patches sent in by the hundreds of contributors listed in F<AUTHORS>.

Much of the work of categorizing changes in this perldelta file was contributed
by the following porters using changelogger.bestpractical.com:

Nicholas Clark, leon, shawn, alexm, rjbs, rafl, Pedro Melo, brunorc,
anonymous, ☄, Tom Hukins, anonymous, Jesse, dagolden, Moritz Onken,
Mark Fowler, chorny, anonymous, tmtm

Finally, thanks to Larry Wall, without whom none of this would be
necessary.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the B<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5-security-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details
on what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut


=head1 TODO

The following changes are a filtered list of changes which weren't backported
to 5.10.1. They were run through changelogger.bestpractical.com and triaged
by a set of Perl 5 Porters. Changes to blead after 5945e41e have not yet
been triaged or integrated.

The following changes need to be 

1) deleted if they don't merit inclusion

	OR

2) lightly copyedited and integrated into the perldelta above. Unfortunately, many of our
commit messages are somewhat terse and require a bit more help to turn into something readable




=head1 API

=head2 Move the reg_stringify logic to Perl_sv_2pv_flags

=head2 mg_copy ought to take an I32

=head2 Perl_store_cop_label() isn't meant to be part of the public API.

=head2 Perl_gv_fetchmethod{,_autoload,_flags} are actually never* called with a non-NULL stash. 
So change the parameter to NN.


=head2 Promote Perl_setdefout() to the public API.

=head2 Add get_cvs() as a shortcut for STR_WITH_LEN() and Perl_get_cvn_flags()

=head2 In Perl_newCONSTSUB(), sv should not be NULL.

=head2 GvUNIQUE* have been defined as 0 since 2005/06/30 - high time to remove them.

=head2 invert and rename PERL_MEM_LOG_STDERR to PERL_MEM_LOG_NOIMPL

Most users who want PERL_MEM_LOG want the default implementation,
give it to them.  Users providing their own implementation can
obtain current behavior by adding -DPERL_MEM_LOG_NOIMPL.
Frankly, the average user probably wants _ENV by default too.

=head2 simplify PERL_MEM_LOG

This combines multiple environment variable reads into 1,
where it looks for values like "2mst"
-2 leading digits are atoi()d to get FD
-m memory logging please
-s sv logging also
-t timestamp those please.

Combining these reduces overhead such that it seemed
worthwhile to drop all the ifdefs.  TBD whether this works
in the environment that drove the original tradeoffs.

If it isnt enough, Id be tempted by a global static ptr,
and on 1st use, is read, seen 0, a lock is taken, and getenvar
run to populate it, unlocked, proceed.  This would remove
iterative overheads.

=head2 Add a parameter "destructing" to Gv_AMupdate()

This boolean parameter indicates if the function has been called
to update the overload magic table while looking up the DESTROY
method. In this case, it's probably best to avoid croaking if
those tables could not be updated (for example due to a method
that could not be loaded.)

=head2 Modify the return value of Gv_AMupdate to indicate a compilation error

This way we'll restore most of the performance on object desctruction
lost by the previous commit


=head2 local $SIG{FOO} = sub {...}; sets signal handler to SIG_DFL

Re: [perl #60360] [PATCH] UPDATED: local $SIG{FOO} = sub {...}; sets signal handler to SIG_DFL
Message-ID: <20081112234504.GI2062@tytlal.topaz.cx>

Updated patch to retain source compatibility.

Plus using the correct PERL_ARGS_ASSERT_SAVE_HELEM_FLAGS
macro and running make regen.

=head2 Respecting inc_version_list while processing PERL_VENDORLIB_STEM

Respecting inc_version_list while processing PERL_VENDORLIB_STEM
From: "Mandalemula, Rajesh" <Rajesh.Mandalemula@deshaw.com>

=head2 Change PL_debug behaviour 


String eval lines are now saved whenever
a subroutine is defined, even if the eval'd string has subsequent
syntax errors. This allows the debugger to single step into these
subroutines.


=head2 Tied filehandles now have an additional method EOF which provides the EOF type

=head2 Perl is now smarter about adding a -I dir to the beginning or end of @INC

=head2 On scope end, delete localized array elements that should not exist anymore, so that the array recovers its previous length. Honour EXISTS and DELETE for tied arrays.

=head2 When a glob is deleted, mark its sub as ANON.

=head2 Require a space or a newline after a "#line XXX" directive

=head2 Forbid using "foreach" as an attribute

(like all other control flow statements)


=head2 Unregister signal handlers before destroying my_perl

If the signal handler runs after perl_destruct() has been called, it
will get an invalid (or NULL) my_perl when it asks for the
thread-specific interpreter struct.  This patch resets the signal
handler for any signal previously handled by PL_csighandlerp to SIG_DFL
before calling perl_destruct().

=head2 Perl_magic_clearsig() needs to remove magic, else delete $SIG{INT} returns undef

Perl_magic_clearsig() needs to remove magic, else delete $SIG{INT} returns undef
instead of the now-removed INT handler.

=head2 [perl #66452] TMPDIR not honored when opening an anonymous temporary file

[perl #66452] TMPDIR not honored when opening an anonymous temporary file

=head2 The attached patch to perlio.c fixes the problem of errno getting set.

While I am firmly in the school of "do not look at $! except immediately
after a failure", I also agree that spuriously setting it is messy.  But
there is just no way of knowing where your errno might have been.

The problem was that PerlIO_fast_gets() (and other nearby similar
capability-checking PerlIO routines) set the errno (and it was being
called a lot, from sv_gets()).  I think setting the errno here was
a mistake: checking for "can has FOO" should not set external state,
such as the errno.  The patch removes that errno trashing from all those
routines.

=head2 Trim all trailing / from "." in @INC when filling %INC

This fixes bug #66942 : as a / was left in the directory name,
$INC{"Foo.pm"} for a file loaded from the current directory
was given the incorrect value "/Foo.pm".

=head2 Don't enqueue pending signals during global destruction

Global destruction is not signal-safe. PL_psig_pend may already
be gone when the signal handler is called (with destruct_level > 0).
NULL it before freeing it to prevent a race condition.

=head2 Eliminate struct regexp_allocated and xpvio_allocated.

Calculate memory allocation using regexp and XPVIO, and the offset of the first
real structure member. This avoids tripping over alignment differences between
X* and x*_allocated, because x*_allocated doesn't have a double in it.


=head1 internals

=head2 [perl #47047] Use of inherited AUTOLOAD for non-method is deprecated

=head2 Remove the definitions of Null(), Nullch, Nullfp, Nullsv and PL_na when code is within the perl source tree

=head2 Replace our assert-which-can-be-caught-by-eval with the real deal from the standard C library.

=head2 Tweak Perl_sv_upgrade() so that references can upgrade to SVt_PV

=head2 Eliminate prelen from struct regexp. 

=head2 Change Perl_av_iter_p() to return IV* rather than I32* (which means

=head2 Reorder the external regexp flags to get RXf_PMf_STD_PMMOD into the

lowest 4 bits (which saves a shift), and the "flags indicating special
patterns" into contiguous bits. This makes everything a little tidier,
and saves 88 bytes (woohoo!) of object file with -Os on x86 FreeBSD.


=head2 Re-implement the SvOOK() hack to store the offset as a BER encoded number in the part of the PVX that is being released. 
(It will always
fit, as chopping off 1 byte gives just enough space for recording a
delta of up to 127). This allows SvOOK() to co-exist with SvIOK_on(),
which means all the calls to SvOOK_off() [with the possibility of a
call to sv_backoff()] in SvIOK_on() can be removed. This ought to make
a lot of straight line code a little bit simpler.
OOK()d scalars can now be SVt_PV, as the IVX isn't needed.

=head2 Abolish wraplen from struct regexp. We're already storing it in SvCUR.

=head2 Make Perl_pregcomp() use SvUTF8() of the pattern, rather than the flag bit in pmflags, to decide whether the pattern is UTF-8.

=head2 Abolish RXf_UTF8. Store the UTF-8-ness of the pattern with SvUTF8().

=head2 In struct regexp move the member paren_names to the IV union.

=head2 Make REGEXP a type distinct from SV. (Much like AV, CV, GV, HV).

=head2 Allow sv_setsv_flags() to copy SVt_REGEXP much like it copies SVt_FORMAT - the just string buffer.


=head2 Correct a long-standing ithreads reference counting anonamly

The reference count only needs "doubling" when the scalar is pushed onto
PL_regex_padav for the second time.


=head2 In PL_regexp_padav, store regexps via real references, rather than hiding them within IVs. 

We can do this now that they are real SV pointers.

=head2 With regexps stored as real RVs, we can eliminate SvREPADTMP().

=head2 REGEXPs are now stored directly in PL_regex_padav, rather than indirectly via RVs.

=head2 Remove code that protected pp_qr against REGEXPs going away during global destruction whilst they were stored via true references in PL_regex_padav. 

=head2 Remove PM_GETRE_SAFE and PM_SETRE_SAFE as nothing uses them.

=head2 Note the U8 sized space created by removing -P, and check that it is now an illegal command line flag.

=head2 Pack the recycled pad offsets into an SV at PL_regex_pad[0]. 

=head2 Re-order so that the !SvOK() case is last (which should be rare)

=head2 Extend PUSHFORMAT() to take a second parameter to set retop, to save NULLing it and then reassigning.

=head2 Split struct block_sub into struct block_sub and struct block_format.

Split struct block_sub into struct block_sub and struct block_format.
(CXt_SUB and CXt_FORMAT were using some comon members, but some members
were only for one or the other.)

=head2 Change the wantarray result from caller from IV to bool for the SCALAR/ARRAY case. 

This doesn't contradict the documentation, as there isn't any. Oops.


=head2 Give G_VOID, G_SCALAR and G_ARRAY the same numeric values as OPf_WANT_VOID, OPf_WANT_SCALAR and OPf_WANT_LIST.


=head2 Squeeze the context type down to 4 bits, and move the private flags to fit within the next 4 bits.


=head2 In struct block change blku_type from U8 to U16, and the "spare" U8 to U16, with the lockstep changes in struct subst. 
Eliminate lval from
struct block_sub, and instead store it in the U16 in struct block.


=head2 In struct block_eval, eliminate old_in_eval and old_op_type by storing the data in blk_u16.


=head2 The layout for struct block_loop under ithreads can be simplified.

Instead of wedging the pad offset into a void* iterdata, and always
storing PL_comppad even when it isn't used, instead do this:

PAD        *oldcomppad; /* Also used for the GV, if targoffset is 0 */
/* This is also accesible via cx->blk_loop.my_op->op_targ */
PADOFFSET  targoffset;

and store the GV pointer in oldcompad. Pointers to pointers seems
cleaner. This also allows us to eliminate the flag bit CXp_PADVAR.


=head2 In XS_PerlIO_get_layers() take advantage of the implementation of

In XS_PerlIO_get_layers() take advantage of the implementation of
PerlIO_get_layers(), by co-opting the new SVs it creates, rather than
copying them.


=head2 Micro-optimise the order of the context types. [Because I can :-)]

=head2 [patch] optimize OP_IS_(FILETEST|SOCKET) macros

=head2 Eliminate ck_lengthconst.

=head2 Chainsaw DEBUG_S out, as suggested by Vincent Pit.

=head2 Unsupported private API functions are now declared "static" to prevent leakage to the public API

=head2 Perl_cv_ckproto() is not part of the public API, and not used anywhere. It has been removed

=head2 Remove all the 5005threads specific mutex macros, which are now vestigial.

=head2 Do not honor TMPDIR for anonymous temporary files when tainting

Use a default of /tmp on Unixes when TMPDIR is unset or empty, or
when creation of a temporary file in it fails

=head2 Add a pluggable hook in op_free()





