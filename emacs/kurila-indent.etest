
(setq debug-on-error t)

(require 'etest)

(defun kt-simple-buffer ()
  "package Foo::Bar

sub foo()
    'noot'
    return 'bar'
")

(defun kt-buffer-if-block ()
  "package Foo::Bar

sub aap
      'noot'
      'mies'
      if ('mies')
        'wim'
        'zus'
")

(defun kt-buffer-paren ()
  "package Foo::Bar

sub aap
    noot('mies',
         'wim')
")

(defun buffer-test (function buffer)
  (set-buffer (get-buffer-create "*kurila-indent-test*"))
  (erase-buffer)
  (kurila-mode)
  (kurila-indent-mode)
  (insert buffer)
  (let (indents)
    (let ((linenr 1) start str)
      (while (and (= (goto-line linenr) 0) (not (eobp)))
        (setq start (point))
        (skip-chars-forward "^|")
        (setq str (car (read-from-string (buffer-substring start (point)))))
        (delete-region start (1+ (point)))
        (setq indents (cons str indents))
        (setq linenr (+ linenr 1))
        ))
    (setq indents (reverse indents))
    (let ((linenr 1) got)
      (while indents
        (goto-line linenr)
        ;(message "sniff for block start: %S" (kurila-sniff-for-block-start))
        ;(message "sniff for indent: %S" (kurila-sniff-for-indent))
        (setq got (funcall function))
        (if (not (equal (car indents) got))
            (progn
              (message "Failed on %s - got %S - exp %S" linenr got (car indents))
              (let ((debug-on-error nil))
                (assert nil))
              ))
        (setq linenr (+ linenr 1))
        (setq indents (cdr indents))
        )))
  )

(defun indent-test (buffer)
  (buffer-test 'kurila-indent-indentation-info buffer))

(buffer-test 'kurila-sniff-for-layout-lists
"(10 5)       |foo: bar: 3
(10 5)        |")

(buffer-test 'kurila-sniff-for-layout-lists
"(10)         |Foo::bar: 3")

(buffer-test 'kurila-sniff-for-layout-lists
"(15 10)         |Foo::bar: baz: 3")

(buffer-test 'kurila-sniff-for-layout-lists
"(15 5)         |baz: Foo::bar: 3")

(buffer-test 'kurila-sniff-for-layout-lists
"(new-layout-list)   |foo: 
()                   |'bar'")

(buffer-test 'kurila-sniff-for-layout-lists
"(new-layout-list)    |foo: 
(3)                   |   'bar'
()                    |'bar'")

(buffer-test 'kurila-sniff-for-layout-lists
"(10 5)    |foo: bar: 'baz'
(5)        |     'bar'
()         |'bar'")

(buffer-test 'kurila-sniff-for-indent
"[toplevel ()]           |foo: bar: 'baz'
[statement (0) (10 5)]   |     'bar'
[statement (0) (5)]      |'bar'")

(buffer-test 'kurila-sniff-for-indent
"[toplevel ()]          |substr: 'foo'
[statement (0) (8)]     |")

(buffer-test 'kurila-sniff-for-indent
"[toplevel ()]              |sub foo
[code-start-in-block 0]     |")

(buffer-test 'kurila-indent-indentation-info
"(0)    |sub foo
(4)     |")

(buffer-test 'kurila-indent-indentation-info
"(0)     |foo: bar: 'baz'
(10 5 0) |     'bar'
(5 0)    |'bar'")

(buffer-test  'kurila-sniff-for-indent
"[toplevel ()]             |package Foo::Bar
[statement (0) nil]        |
[statement (0) nil]        |sub foo
[code-start-in-block 0]    |    help
[statement (4 0) ()]       |    if (1)
((8))             |
((8))             |        my $a = $a->{?$b}
((8) (12) (4) (0))|
((8) (12) (4) (0))|        # foo ")

(indent-test "((0) (4))|package Foo::Bar
((0) (4))         |
((0) (4))         |for ($a)
((4))             |    s///")

(indent-test "((0) (4))|package Foo::Bar
((0) (4))         |
((0) (4))         |if ($a)
((4))             |    33
((4) (8) (0))     |else
((4))             |    44")

(indent-test "((0) (4))|package Foo::Bar
((0) (4))         |
((0) (4))         |if ($a) { 33 }
((0) (4))         |44
((0) (4))         |if ($a) { 33 } else { 44 }
((0) (4))         |55")

(indent-test "((0) (4))|package Foo::Bar
((0) (4))         |
((0) (4))         |if (@: $a,
((4) (8))         |    $a)
((4))             |    44")

(indent-test "((0) (4))|package Foo::Bar
((0) (4))           |
((0) (4))           |sub aap
((4))               |    noot: $a
((10) (14) (4) (0)) |          $b
((10) (14) (4) (0)) |
((10) (14) (4) (0)) |'sub aap'
((0) (4))           |'noot'")

;; indentation isnside qw() construct
(indent-test "((0) (4))|package Foo::Bar
((0) (4))         |
((0) (4))         |aap(qw(noot
((7))             |       mies))")

;;             for (grep {defined},
;;                  map      { $state->{$type}->{?$_} }, qw(goto continue))
;;                  %reachable{+$_}++

(defun kt-is (buffer line exp func)
  (save-excursion
    (set-buffer (get-buffer-create "*kurila-indent-test*"))
    (erase-buffer)
    (insert (eval buffer))
    (kurila-mode)
    (kurila-indent-mode)
    (goto-line line)
    (etest-equality-test 'equal exp func)
    )
)

(deftest '(kt-is 4) 'kt-is)




(etest 
 (kt-is (kt-simple-buffer)
        3
        '(0 next-line)
        (kurila-sniff-for-block-start))
 (kt-is (kt-simple-buffer) 
        3
        nil
        (kurila-sniff-for-paren-open))
 (kt-is (kt-simple-buffer)
        4
        [code-start-in-block 0]
        (kurila-sniff-for-indent))
 (kt-is (kt-simple-buffer) 
        4
        '((4))
        (kurila-indent-indentation-info))
 (kt-is (kt-simple-buffer)
        5
        [statement (4 0)]
        (kurila-sniff-for-indent))
 (kt-is (kt-simple-buffer)
        5
        '((4) (8) (0))
        (kurila-indent-indentation-info))
 
 (kt-is (kt-buffer-if-block)
        5
        [statement (6 0)]
        (kurila-sniff-for-indent))
 (kt-is (kt-buffer-if-block)
        6
        '(6 next-line)
        (kurila-sniff-for-block-start))
 (kt-is (kt-buffer-if-block)
        6
        '()
        (kurila-sniff-for-paren-open))
 (kt-is (kt-buffer-if-block)
        7
        '((10))
        (kurila-indent-indentation-info))
 (kt-is (kt-buffer-if-block)
        8
        '((8) (12) (6) (0))
        (kurila-indent-indentation-info))
 
 (kt-is (kt-buffer-paren)
        4
        '(9)
        (kurila-sniff-for-paren-open))
 (kt-is (kt-buffer-paren)
        5
        [cont-expr (9 4)]
        (kurila-sniff-for-indent))
 (kt-is (kt-buffer-paren)
        5
        '((9) (13))
        (kurila-indent-indentation-info))
 )

